---
layout: post
related_posts:
  - _posts/coding/coding/2024-04-05-04 DFS,BFS 문제.markdown
  - _posts/coding/coding/2024-04-12-05 정렬 문제.markdown
title: 05 정렬 (설명)
categories:
  - coding
  - coding
image: /assets/img/coding/이것이 코딩테스트다. 파이썬.png
permalink: '/:categories/:year/:month/:day/:title/'
description: >

 이것이 코딩 테스트다. with 파이썬 - 05 정렬 설명
---

* toc
{:toc}

> [(이코테 2021 강의 몰아보기) 4. 정렬](https://www.youtube.com/watch?v=KGyK-pNvWos&list=PLRx0vPvlEmdAghTr5mXQxGpHjWqSz0dgC&index=5)

# **⭐ 나동빈님의 유튜브를 통해 확인해 주세요!!**

---

# 정렬

정렬이란 데이터를 특정한 기준에 따라서 순서대로 나열하는 것을 말한다.

정렬 알고리즘으로 데이터를 정렬하면 다음 장에서 배울 이진 탐색이 가능해진다.

- 선택 정렬
- 삽입 정렬
- 퀵 정렬
- 계수 정렬

---

## 선택 정렬(Selection Sort)

‘가장 작은 것을 선택’ 한다는 의미에서 선택 정렬 알고리즘이라고 한다.

**가장 작은 것을 선택해서 앞으로 보내는 과정**을 반복해서 수행하다 보면, 전체 데이터의 정렬이 이루어진다.

```python
array = [5, 3, 4, 1, 2]

for i in range(len(array)):
    min_index = i  # 가장 작은 원소의 인덱스
    for j in range(i + 1, len(array)):
        if array[min_index] > array[j]:
            min_index = j
    array[i], array[min_index] = array[min_index], array[i]  # 스와프

print(array)

# 코드는 이미지에 맞게 배열 숫자만 다르게 했다.
```

> <strong class="orange_">스와프</strong>
>
> 스와프란 특정한 리스트에 주어졌을 때 변수의 위치를 변경하는 작업이다. 

- 느린 성능을 가지고 있다. 빅오 표기법으로 O(N^2)이라고 표현할 수 있다.

<img src="/assets/img/coding/선택 정렬.gif"/>

<img src="/assets/img/coding/선택 정렬 결과.png"/>

<img src="/assets/img/coding/선택 정렬 필기.jpg"/>

---

## 삽입 정렬(Insertion Sort)

특정한 데이터를 적절한 위치에 ‘삽입’한다는 의미에서 삽입 정렬이라고 부른다.

>❗ 삽입 정렬은 필요할 때만 위치를 바꾸므로 ‘데이터가 거의 정렬 되어 있을 때’ 효율적이다.

```python
array = [6, 5, 3, 1, 8, 7, 2, 4]

for i in range(1, len(array)):
	for j in range(i, 0, -1): # 인덱스 i부터 1까지 감소하며 반복하는 문법
		if array[j] < array[j-1]: # 한 칸씩 왼족으로 이동
			array[j],array[j-1] = array[j-1],array[j]
		else: # 자기보다 작은 데이터를 만나면 그 위치에서 멈춤
            break
print(array)

# 책의 내용에서 옆의 이미지에 맞게 배열 숫자만 다르게 했다.
```

<img src="/assets/img/coding/삽입 정렬.gif" />

<img src="/assets/img/coding/삽입 정렬 결과.png" />

<img src="/assets/img/coding/삽입 정렬 필기.jpg" />

- 느린 성능을 가지고 있다. 삽입 정렬은 시간 복잡도는 O(N^2)이다
    
삽입 정렬은 현재 리스트의 데이터가 거의 정렬되어 있는 상태라면 매우 빠르게 동작한다는 점이다.

---

## 퀵 정렬(Quick Sort)

퀵 정렬은 기준을 설정한 다음 큰 수와 작은 수를 교환한 후 리스트를 반으로 나누는 방식으로 동작한다.

> 퀵 정렬은 피벗이 사용된다
>
> 큰 숫자와 작은 숫자를 교환할 때, 교환하기 위한 ‘기준’ 을 바로 피벗이라고 한다.
    

퀵 정렬을 수행하기 전에는 피벗을 어떻게 설정할 것인지 미리 명시해야 한다. 피벗을 설정하고 리스트를 분할하는 방법에 따라서 여러 가지 방식으로 퀵 정렬을 구분한다.

퀵 정렬과 비교할 만큼 빠른 알고리즘으로 ‘병합 정렬’ 알고리즘이 있다.

>❗ 병합 정렬과 더불어 대부분의 프로그램 언어에서 정렬 라이브러리의 근간이 되는 알고리즘입니다.

<img src="/assets/img/coding/퀵 정렬.gif" />

<img src="/assets/img/coding/퀵 정렬 결과.png" />

<img src="/assets/img/coding/퀵 정렬 필기.jpg" />

가장 대표적인 분할 방식인 호어 분할 방식을 기준으로 퀵 정렬을 설명한다.

- 리스트에서 첫 번째 데이터를 피벗으로 정한다.

### I 파트

[5, 7, 9, 0, 3, 1, 6, 2, 4, 8]

1. 현재 기준이 되는 피벗의 값은 ‘5’ 입니다. 왼쪽에서 부터 ‘5’ 보다 큰 데이터를 선택하므로 ‘7’ 이 선택되고, 오른쪽에서 부터 ‘5’ 보다 작은 데이터를 선택하므로 ‘4’ 가 선택된다.

2. 이제 이 두 데이터의 위치를 서로 변경한다.

3. 그 다음 다시 피벗보다 큰 데이터와 작은 데이터를 각각 찾는다. 찾은 뒤에는 두 값의 위치를 서로 변경한다. 현재 ‘9’ 와 ‘2’가 선택되었으므로 서로 위치를 바꾼다.

4. 그 다음 다시 피벗보다 큰 데이터와 작은 데이터를 찾는다. 단, 왼쪽에서 부터 찾는 값과 오른쪽에서 부터 찾는 값의 위치가 서로 엇갈린 경우이다. **이렇게 두 값이 엇갈린 경우에는 ‘작은 데이터’ 와 ‘피벗’ 의 위치를 서로 변경한다.**

5. **분할 완료**

- 이제 ‘5’의 왼쪽에 있는 데이터는 모두 ‘5’보다 작고, 오른쪽에 있는 데이터는 모두 ‘5’보다 크다는 특징이 있다.
- 피벗의 왼쪽에는 피벗보다 작은 데이터가 위치하고, 피벗의 오른쪽에는 피벗보다 큰 데이터가 위치하도록 하는 작업을 분할 혹은 파티션이라고 한다.

### II 파트

**왼쪽 데이터 묶음 정렬** : 왼쪽에 있는 데이터에 대해 마찬가지로 정렬을 수행한다.

### III 파트

오른쪽 **데이터 묶음 정렬** : 오른쪽에 있는 데이터에 대해 마찬가지로 정렬을 수행한다.

이 과정을 반복하면 전체 데이터에 대해 정렬이 수행된다.

퀵 정렬은 재귀 함수 형태로 작성했을 때 구현이 매우 간결해진다.

- 재귀 함수는 종료 조건이 있다. 퀵 정렬의 종료 조건으로는 현재 리스트의 데이터 개수가 1개인 경우이다.
    
> 이미 정렬이 되어 있다고 간주할 수 있으며 분할이 불가능하다.
    
```python
array = [5, 7, 9, 0, 3, 1, 6, 2, 4, 8]

def quick_sort(array, start, end):
    if start >= end:  # 원소가 1개 인 경우
        return
    pivot = start  # 피벗은 첫 번째 원소입니다.
    left = start + 1
    right = end
    while left <= right:
        # 피벗보다 큰 데이터를 찾을 때까지 반복
        while left <= end and array[left] <= array[pivot]:
            left += 1
        # 피벗보다 작은 데이터를 찾을 때까지 반복
        while right > start and array[right] >= array[pivot]:
            right -= 1
        if left > right:  # 엇갈렸다면 작은 데이터와 피벗을 교체
            array[right], array[pivot] = array[pivot], array[right]
        else:  # 엇갈리지 않았다면 작은 데이터와 큰 데이터를 교체
            array[left], array[right] = array[right], array[left]
    # 분할 이후 왼족 부분과 오른족 부분에서 각각 정렬 수행
    quick_sort(array, start, right - 1)
    quick_sort(array, right + 1, end)

quick_sort(array, 0, len(array) - 1)
print(array)
```

- 파이썬의 장점을 살린 퀵 정렬 소스 코드
    
    ```python
    array = [5, 7, 9, 0, 3, 1, 6, 2, 4, 8]
    
    def quick_sort(array):
        # 리스트가 하나 이하의 원소만을 담고 있다면 종료
        if len(array) <= 1:
            return array
    
        pivot = array[0]  # 피벗은 첫 번째 원소
        tail = array[1:]  # 피벗을 제외한 리스트
    
        left_side = [x for x in tail if x <= pivot]  # 분할된 왼족 부분
        right_side = [x for x in tail if x > pivot]  # 분할된 오른쪽 부분
    
        # 분할 이우 왼쪽 부분과 오른쪽 부분에서 각각 정렬을 수행하고, 전체 리스트를 반환
        return quick_sort(left_side) + [pivot] + quick_sort(right_side)
    
    print(quick_sort(array))
    ```

퀵 정렬은 평균의 경우 O(NlogN)의 시간 복잡도를 가집니다.
    
- 최악의 경우 분할이 수행되는 횟수가 매번 선형 탐색을 수행해야 되기 때문에 전체 시간 복잡도가 O(N^2)이 됩니다.

---

## 계수 정렬(Count Sort)

특정한 조건이 부합할 때만 사용할 수 있지만 매우 빠른 정렬 알고리즘이다. 계수 정렬은 **‘데이터의 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때’**만 사용할 수 있다. 

- 계수 정렬은 일반적으로 별도의 리스트를 선언하고 그 안에 정렬에 대한 정보를 담는다는 특징이 있다.

### 계수 정렬 동작 예시

가장 작은 데이터부터 가장 큰 데이터까지의 범위가 모두 담길 수 있도록 리스트를 생성한다.

- 정렬한 데이터: 7 5 9 0 3 1 6 2 9 1 4 8 0 5 2

데이터를 하나씩 확인하며 데이터의 값과 동일한 인덱스의 데이터를 1씩 증가 시킵니다.

예를 들어, 가장 앞에 있는 7은 인덱스 7에 값을 1 증가 시킵니다.

이런 식으로 정렬된 데이터를 순서에 맞게 하나씩 정렬 시키면 아래와 같습니다.

최종적으로 리스트에는 각 데이터가 몇 번씩 등장했는지 그 횟수가 기록됩니다.

**결과 확인 시,** 리스트의 첫 번째 데이터부터 하나씩 그 값만큼 반복하여 인덱스를 출력합니다.

```python
# 모든 원소가 값이 0보다 크거나 같다고 가정
array = [7, 5, 9, 0, 3, 1, 6, 2, 9, 1, 4, 8, 0, 5, 2]
# 모든 범위를 포함하는 리스트 선언(모든 값은 0으로 초기화)
count = [0] * (max(array) + 1)

for i in range(len(array)):
    count[array[i]] += 1  # 각 데이터에 해당하는 인덱스의 값 증가

for i in range(len(count)):  # 리스트에 기록된 정렬 정보 확인
    for j in range(count[i]):
        print(i, end=' ')
```

계수 정렬은 최악의 경우에도 수행 시간 O(N+K)를 보장한다.
    
계수 정렬의 공간 복잡도는 O(N+K)이다.
    
---

걍의에는 없지만 퀵 정렬과 빠르다는 정렬인 병합 정렬을 알아보자

## 병합 정렬(Merge Sort)

반으로 나누고 다시 합치는 과정에서 그룹을 만들어 정렬하게 되며 이 과정에서 2n 개의 공간이 필요하다.

O(NlogN)의 시간 복잡도를 가지고 있다.

```python
# 합쳐지는 과정은 다음과 같다.
[1,4][2,3] (1과 2 비교) -> 1 선택, 완성된 배열은 [1]
[4][2,3] (4와 2 비교) -> 2 선택, 완성된 배열은 [1,2]
[4][3] (4와 3 비교) -> 3 선택, 완성된 배열은 [1,2,3]
[4][] -> 남는 4 선택, 완성된 배열은 [1,2,3,4]
```

```python
array = [8,4,6,2,9,1,3,7,5]

def merge_sort(array):
	if len(array) < 2:
		return array
	mid = len(array) // 2
	low_arr = merge_sort(array[:mid])
	high_arr = merge_sort(array[mid:])

	merged_arr = []
	l = h = 0
	while l < len(low_arr) and h < len(high_arr):
		if low_arr[l] < high_arr[h]:
			merged_arr.append(low_arr[l])
			l += 1
		else:
			merged_arr.append(high_arr[h])
			h += 1
	merged_arr += low_arr[l:]
	merged_arr += high_arr[h:]
	print(merged_arr)
	return merged_arr

print("before: ",array)
array = merge_sort(array)
print("after:", array)
```

분할 정복과 재귀를 이용한 알고리즘으로 O(n log n)의 시간 복잡도를 가지고 있다.

<img src="/assets/img/coding/병합 정렬.gif" />

<img src="/assets/img/coding/병합 정렬 결과.png" />

<img src="/assets/img/coding/병합 정렬 필기.jpg" />

---

걍의에는 없지만 선택 정렬과 같이 느린 성능을 가지고 있다.

## 버블 정렬(Bubble Sort)

앞에서 부터 시작하여 큰 수를 뒤로 보내 뒤가 가장 큰 값을 가지도록 완성해나가는 방법 또는

뒤에서 부터 반복하여 앞의 작은 값부터 정렬을 완성해나가는 방법이 있습니다.

```python
array = [9,8,7,6,5,4,3,2,1]

def bubble_sort(array):
    n = len(array)
    for i in range(n - 1):
        for j in range(n - i - 1):
            if array[j] > array[j + 1]:
                array[j], array[j + 1] = array[j + 1], array[j]
        print(array)

print("before: ",array)
bubble_sort(array)
print("after:", array)
```

<img src="/assets/img/coding/버블 정렬.gif">

<img src="/assets/img/coding/버블 정렬 결과.png">

<img src="/assets/img/coding/병합 정렬 필기.jpg" />

인접한 두 수를 비교하며 정렬해나가는 방법으로 O(N^2)의 느린 성능을 가지고 있다.
    
---

## 파이썬의 정렬 라이브러리 - sort(), sorted()

파이썬은 기본 정렬 라이브러리인 sorted() 함수를 제공한다. sorted()는 병합 정렬을 기반으로 만들어졌다.

병합 정렬은 일반적으로 퀵 정렬보다 느리지만 최악의 경우에도 시간 복잡도 O(NlogN)을 보장한다는 특징이 있다.

리스트 변수가 하나 있을 때 내부 원소를 바로 정렬할 수도 있다. 리스트 객체의 내장 함수인 sort()를 이용하는 것

이를 이용하면 별도의 정렬된 리스트가 반환 되지 않고 내부 원소가 바로 정렬된다.

```python
array = [7, 8, 9, 0, 3, 1, 6, 2, 4, 8]

result = sorted(array)
print(result)
```

```python
array = [7, 8, 9, 0, 3, 1, 6, 2, 4, 8]

array.sort()
print(result)
```

또한 sorted()나 sort()를 이용할 때에는 key 매개변수를 입력으로 받을 수 있다. key 값으로는 하나의 함수가 들어가야 하며 이는 정렬 기준이 된다.

```python
array = [('바나나',2), ('사과',5), ('당근',3)]

def setting(data):
	return data[1] # 숫자를 기준으로

result = sorted(array, key=setting)
print(result)

# 출력결과
[('바나나',2), ('당근',3), ('사과',5)]
```

---

# 참고

> <a href="https://velog.io/@jguuun/%EC%A0%95%EB%A0%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98">정렬 알고리즘 종류와 설명(파이썬 예제)</a> - 이미지 예제 및 코드 설명