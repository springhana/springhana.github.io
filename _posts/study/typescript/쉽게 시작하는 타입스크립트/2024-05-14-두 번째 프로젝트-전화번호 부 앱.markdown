---
layout: post
related_posts:
  - /study/2024-05-11-제네릭.markdown
  - /study/2024-05-14-타입 추론.markdown
title: 두 번째 프로젝트-전화번호 부 앱
categories:
  - study
  - typescript
image: /assets/img/typescript/typescript_logo.png
permalink: '/:categories/:year/:month/:day/:title/'
description: >
  캡틴 판교의 쉽게 시작하는 타입스크립트, 11장 두 번째 프로젝트 - 전화번호 부 앱
published : false
---

* toc
{:toc}

# 1. 프로젝트 환경 구성
# 2. 프로젝트 폴더 구조

## tsconfig.JSON 

```json
{
  "compilerOptions": {
    ...
    "noImplicitAny": true,
    "strict": true 
  },
  "include": ["./src/**/*"]
}
```

- `noImplicitAny` : 경고 알림 (노란색으로 경고 표시)
- `strict` : 엄격 모드 

---
# 3. 프로젝트 로직
# 4. 프로젝트 실습
# 5. 프로젝트 실습 풀이: 첫 번째

# Promise

프로미스(promise)란 자바스크립트의 비동기 처리에 사용되는 객체이다. 


```ts
function fetchNumber() {
  return new Promise(function(resolve, reject) {
    resolve(10);
  });
}

fetchNumber().then(function(data) {
  console.log(data); // 10
})

function fetchError() {
  return new Promise(function(resolve, reject) {
    reject('시스템 에러');
  });
}

fetchError().catch(function(error) {
  console.log(error); // 시스템 에러
})
```

`then()` 안에서 콜백 함수를 정의하면 `resolve()`에 넘긴 값을 전달 받을 수 있다. 

```ts
fetchNumber().then(function(data) {
``  console.log(data); // 10
})
```

`catch()` 구문을 이용하여 실패(에러) 처리를 할 수 있다.

```ts
fetchError().catch(function(error) {
  console.log(error); // 시스템 에러
})
```

- 프로미스는 비동기 처리에 사용되는 객체이다.
- `new Promise()`의 첫 번째 파라미터는 `resolve()`고, 두 번째 파라미터는 `reject()`이다.
- 프로미스가 실행되었을 때 성공한 값은 `resolve()`에 넣고, 실패한 값은 `reject()`에 넣는다.
- 성공한 값은 `.then()`의 골백함수에서 전달받고, 실패한 값은 `.catch()`의 콜백 함수에서 전달받는다.

```ts
function fetchContacts(): Promise<Contact[]> {
  const cantacts: Contact[] = [
    // ...
  ];

  return new Promise((resolve) => {
    setTimeout(()=> resolve(contacts), 2000);
  })
}
```

---
# 프로젝트 실습 풀이: 두 번째