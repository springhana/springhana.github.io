---
layout: post
related_posts:
   - /study/typescript/2024-05-14-타입 추론.markdown
title: 타입 단언
categories:
  - study
  - typescript
image: /assets/img/typescript/typescript_logo.png
permalink: '/:categories/:year/:month/:day/:title/'
description: >
  캡틴 판교의 쉽게 시작하는 타입스크립트, 13장 타입 단언
published : false
---

* toc
{:toc}

1. 타입 단언이란?

**타입 단언(type assertion)** 은 타입스크립트의 타입 추론에 기대치 않고 개발자가 직접 타입을 명시하여 해당 타입으로 강제하는 것을 의미한다.

```ts
let name = '봄' as string
```

이 코드는 `name`이라는 변수의 타입을 `string` 타입으로 간주한다는 의미이다. 

- `as` 키워드를 붙이면 타입스크립트가 컴파일할 때 해당 코드의 타입 검사는 수행하지 않는다. 


```ts
interface Spring {
  name: string,
  age: number
}

let spring = {} as Spring
```

위의 코드는 변수를 선언할 때 빈 객체로 선언했지만 이 객체에 들어갈 속성은 `Spring` 인터페이스와 속성이라고 타입스크립트 컴파일러에 말해 주는 것과 같은 효과이다.

---
# 2. 타입 단언 문법

## 타입 단언의 대상

타입 단언은 숫자, 문자열, 객체 등의 원시 값뿐만 아니라 변수나 함수의 호출 결과에도 사용할 수 있다.

```ts
function getId(id) {
  return id;
}

var myId = getId('spring') as number;
```

## 타입 단언 중첩

타입 단언은 다음과 같이 여러 번 중첩해서 사용할 수 있다.

```ts
let num = (10 as any) as number;
```

## 타입 단언을 사용할 때 주의할 점

#### as 키워드는 구문 오른쪽에서만 사용한다.

타입 단언은 변수 이름에 사용할 수 없습니다. 그러면 다음과 같이 타입스크립트 컴파일러에서 코드를 인식할 수 없다.

## 호환되지 않는 데이터 타입으로는 단언할 수 없다.

타입 단언을 이용하면 어떤 값이든 내가 원하는 타입으로 단언할 수 있을 것 같지만 실제로는 그렇지 않다.

두 형식이 서로 충분히 겹치지 않는다는 표현도 나오는데, 타입 시스템 관점에서 타입의 교집합이 없다는 의미이다.

## 타입 단언 남용하지 않기

타입 단언은 코드를 실행하는 시점에서 아무런 역할도 하지 않기 때문에 에러에 취약한 측면이 있다. 타입 에러를 쉽게 해결하려고 타입을 단언해서 타입 에러는 해결했지만 정작 실행 에러는 미리 방지하지 못한다.

---
# 3. null 아님 보장 연산자 :!

**null 아님 보장 연산자(non null assertion)** 는 `null` 타입을 체크할 때 유용하게 쓰는 연산자이다.

- 값이 `null`이 아님을 보장해준다.

```ts
function langauage(titles: Titles | null ) {
 let result = titles!.name();
  return result;
}
```

- `!`가 바로 `null` 아님 보장 연산자(`!`)이다.