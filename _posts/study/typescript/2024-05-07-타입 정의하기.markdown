---
layout: post
related_posts:
  - /study/typescript/
title: 타입 지정하기
categories:
  - study
  - typescript
image: /assets/img/typescript/TypeScript.png
permalink: '/:categories/:year/:month/:day/:title/'
description: >
  타입스크립트 타입 지정하는 방법 및 기본 타입들
published : false
---

* toc
{:toc}

# 타입 지정하기

## 변수 타입 지정

`: 타입 이름` 으로 변수 뒤에 타입을 선언해주면 된다.

```ts
const script: string = 'typescript' 
```

- 콜론 (`:`)은 **타입 표기**라고 한다.

## 함수 타입 지정

함수의 반환값 타입을 함수 이름 오른쪽에 지정해 줄 수 있다.

- 파라미터의 경우 파라미터마다 오른쪽에 타입 이름을 지정할 수 있다.

```ts
function handleTest(text: string): string {
	return text
}
```

> 파라미터의 옵션을 넣어 **옵셔널 파라미터**로 사용할 수 있다.

```ts
function handleTest(text: string, email?: string): string {
	return text + email
}
```

- 옵셔널 파라미터는 `?`로 표기한다.

# 기본 타입

## 문자열 타입

`string`은 문자열을 취급하는 타입이다.

```ts
const str: string = 'hello';
```

## 숫자 타입

`number`은 숫자를 취급하는 타입이다.

```ts
const num: number = 10;
```

## 진위 타입

`boolean`은 진위 값을 취급하는 타입이다.

```ts
var isLogin: boolean = false;
```

## 객체 타입: object

`object`은 객체 유형의 데이터를 취급하는 타입이다.

```ts
var obj: object = { name: 'typescript', age: 100 };
```

## 배열 타입: Array

배열 타입은 다음 두 가지 방법으로 선언할 수 있다.

```ts
var languages: Array<string> = ['java', 'react', 'typescript']
var languages: string[] = ['java', 'react', 'typescript']
```

문자열 배열이라는 의미의 `Array<string>`과 `string[]` 타입 표기 방식을 사용한다.

## 튜플 타입: tuple

튜플(`tuple`)은 특정 형태를 갖는 배열을 의미한다.

> <strong class="orange_">튜플</strong>
> 배열 길이가 고정되고 각 요소 타입이 정의된 배열


```ts
const address: [string, number] = ['판교', 40];
```

## any

`any` 타입은 아무 데이터나 취급하겠다는 의미다.

```ts
var myName: any = 'spring'
myName = 100;
```

## null과 undefined

- `null`은 빈 값을 의미한다.
- `undefined`는 변수를 선언할 때 값을 할당하지 않으면 기본적으로 할당되는 초기값이다.

```ts
var empty: null = null;
var init: undefined;
```