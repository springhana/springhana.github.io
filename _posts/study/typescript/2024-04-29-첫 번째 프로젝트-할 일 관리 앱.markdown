---
layout: post
related_posts:
  - /study/typescript/2024-04-29-타입스크립트 기초-변수와 함수의 타입 정의.markdown
  - /study/typescript/2024-05-01-인터페이스.markdown
title: 첫 번째 프로젝트 - 할 일 관리 앱
categories:
  - study
  - typescript
image: /assets/img/typescript/typescript_logo.png
permalink: '/:categories/:year/:month/:day/:title/'
description: >
  캡틴 판교의 쉽게 시작하는 타입스크립트, 04장 첫 번째 프로젝트 - 할 일 관리 앱
---

* toc
{:toc}

# 1. 프로젝트 내려받기 및 라이브러리 설치

프로젝트를 다운로드 했거나 클론 했을 경우에는 해당 라이브러리를 설치해줘야 한다.

```shell
npm i
```

그럼 `node_modules`폴더가 설치되는 것을 알 수 있을 것이다.

---

# 2. 프로젝트 폴더 구조

## node_modules 폴더

`node_modules`폴더에는 실습에 필요한 라이브러리가 설치되어 있다. 

- `NPM` 기반의 웹 애플리케이션을 실행하는 데 꼭 필요한 폴더이다.

## .eslintrc.js 파일

`.eslintrc.js`파일은 ESLint 설정 파일이다.

- 설정 파일에 `.js` 확장자가 붙어 있으므로 자바스크립트 파일이다.

잠재적인 에러가 발생할 수 있는 코드를 경고해 준다.

## package.json 파일

`package.json` 파일은 `NPM` 설정 파일이다. 

`NPM` 설정 파일은 프로젝트 이름, 버전, 라이선스 등 프로젝트와 관련된 기본 정보가 들어간다.

```json
{
  "name": "1_todo",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "@babel/core": "^7.9.0",
    "@babel/preset-env": "^7.9.5",
    "@babel/preset-typescript": "^7.9.0",
    "@typescript-eslint/eslint-plugin": "^2.27.0",
    "@typescript-eslint/parser": "^2.27.0",
    "eslint": "^6.8.0",
    "eslint-plugin-prettier": "^3.1.2",
    "prettier": "^2.0.4",
    "typescript": "^3.8.3"
  }
}
```

- `name` : 프로젝트 이름
- `version` : 프로젝트 버전
- `description` : 프로젝트 설명
- `main` : 프로젝트 메인 파일
- `scripts` : 프로젝트 명령어, 임의로 명령어를 생성해서 `npm run 명령어이름` 형태로 해당 명령어 실행 가능
- `keywords` : `NPM` 사이트에서 검색할 때 연관될 검색어
- `author` : 프로젝트 작성자
- `license` : 프로젝트 라이선스 종류 표기
- `devDependencies` : 프로젝트를 로컬에서 개발할 때 도움을 주는 라이브러리 목록
	- 예를 들어 로컬에서 사용할 개발 서버나 코드 문법 검사 도구 등에 해당

## package-lock.json 파일

`package-lock.json` 파일은 `dependencise`나 `devDependencies`에 명시된 라이브러리를 설치할 때 필요한 부수 라이브러리의 버전을 관리한다.

## tsconfig.json 파일

`tsconfig.json` 파일은 타입스크립트 설정 파일이다.

타입스크립트 컴파일을 들릴 파일 목록과 배제할 목록, 그리고 컴파일러를 구체적으로 어떻게 동작시킬지 등 다양한 옵션을 지정할 수 있다.

```ts
{
  "compilerOptions": {
    "allowJs": true,
    "checkJs": true,
    "noImplicitAny": false
  },
  "include": ["./src/**/*"]
}
```

-  `compilerOptions` : 타입스크립트로 컴파일할 때 세부적인 동작을 지정할 수 있는 옵션이다.
	- `allowJs` : 타입스크립트로 프로젝트를 컴파일할 때 자바스크립트 파일도 컴파일 대상에 포함시킬지 선택하는 옵션이다.
	- `checkJs` : 주로 `allowJs` 옵션과 같이 사용되며 프로젝트 내 자바스크립트 파일에서 타입스크립트 컴파일 규칙을 적용할지 선택하는 옵션이다.
	- `noImplicitAny` : 타입스크립트는 타입스크립트 코드의 타입을 따로 지정하지 않으면 암묵적으로 모든 타입을 any로 추론한다.
- `include` : 타입스크립트 컴파일 대상 경로를 지정할 수 있다. `./src/**/*`는 `src`폴더 아래의 모든 파일에서 타입스크립트 컴파일을 돌리겠다는 의미이다.

---

# 3. 프로젝트 로직

---

# 4. 프로젝트 실습

---

# 5. 프로젝트 실습 풀이