---
layout: post
related_posts:
  - /study/typescript/2024-04-29-첫 번째 프로젝트-할 일 관리 앱.markdown
title: 인터페이스
categories:
  - study
  - typescript
image: /assets/img/typescript/typescript_logo.png
permalink: '/:categories/:year/:month/:day/:title/'
description: >
  캡틴 판교의 쉽게 시작하는 타입스크립트, 05장 타입스크립트 기초 - 인터페이스
published : false
---

* toc
{:toc}

# 1. 인터페이스란?

타입스크립트에서 **인터페이스( interface)** 는 객체 타입을 정의할 때 사용하는 문법이다.

- 객체의 속성과 속성 타입
- 함수의 파라미터와 반환 타입
- 함수의 스펙(파라미터 개수와 반환값 여부 등)
- 배열과 객체를 접근하는 방식
- 클래스

# 2. 인터페이스를 이용한 객체 타입 정의

`interface`라는 예약어를 이용하여 `User`라는 인터페이스를 선언한 코드다.

```ts
interface User {
	name: string;
	age: number:
}

let user: User = { name: '사용자', age: 36 };
```

인터페이스를 이용하여 객체의 속성과 들어갈 데이터 타입을 정확하게 정의할 수 있다.

# 3. 인터페이스를 이용한 함수 타입 정의

## 함수 파라미터 타입 정의

함수의 파라미터를 좀 더 명시적으로 선언하려면 다음과 같이 인터페이스를 이용하여 타입을 선언한다.

```ts
interface User {
	name: string;
	age: number:
}

function logAge (user: User) {
	console.log(user.age);
}

let user: User = { name: '사용자', age: 36 };
logAge(user)
```

함수의 파라미터 타입은 콜론 (`:`)이라는 타입 표기 방식을 이용해서 정의한다.

- **누락된 속성이 있다면 에러가 발생한다.**

맞다! 이 코드는 에러를 발생한다.

## 함수 반환 타입 정의

함수의 반환 타입을 명시적으로 표시하기 위해 인터페이스로 함수의 반환 타입을 정의할 수 있다.

```ts
function getUser(user: User): User {
	return user
}
```

# 4. 인터페이스의 옵션 속성

인터페이스로 정의된 객체의 속성을 선택적으로 사용하고 싶을 때 옵션 속성을 사용한다.

> 자바스크립트로 코드를 작성할 때는 객체의 일부 속성만 작성한 후 추후에 객체의 속성을 추가해도 되는데 타입스크립트로 작성하면 제약 사항이 추후에 생깁니다.

이때 사용할 수 있는 것이 **옵션 속성(optional propertty)**

인터페이스의 속성에 `?`를 붙여주면 된다.

```ts
interface User {
	name?: string;
	age: number:
}

function logAge (user: User) {
	console.log(user.age);
}

let user: User = { age: 36 };
logAge(user)
```

# 5. 인터페이스 상속

상속은 객체 간 관게를 형성하는 방법이며, 상위 클래스의 내용을 하위 클래스가 물려받아 사용하거나 확장하는 기법을 의미한다.

```ts
class User {
	contructor(name, age){
		this.name = name;
		this.age = age;
	}
	
	logAge() {
		console.log(this.age)
	}
}

class Developer extends Person {
	constructor(name, age, skill){
		super(name, age);
		this.skill = skill;
	}
	
	logDeveloperInfo(){
		this.logAge();
		console.log(this.name);
		console.log(this.skill);
	}
}
```

- 상위 클래스에서 정의한 내용을 하위 클래스에서 접근하여 사용할 수 있는 것이 상속이다.

## 인터페이스 상속이란?

인터페이스를 상속받을 때도 동일하게 `extends` 예약어를 사용합니다.

```ts
interface User {
	name: string;
	age: string;
}

interface Developer extends User {
	skill: string;
}

let man: Developer = {
	name: '남자',
	age: 21,
	skill: '코딩'
}
```

`User` 인터페이스를 선언하고 `Developer` 인터페이스에 `extends`로 상속한 것이다.

```ts
interface Developer {
	name: stringl
	age: number;
	skill: string;
}
```

- `extends` 키워드를 사용해서 인터페이스의 타입을 상속받아 확장하여 사용할 수 있다.

## 인터페이스를 상속할 때 참고 사항

인터페이스를 상속할 때 주의해야 할 점이 있다.

1. 상위 인터페이스의 타입과 호환이 되어야 한다.
	- 여기에서 호환이 된다는 것은 상위 클래스에서 정의된 타입을 사용해야 한다는 의미다.

```ts
interface User {
	name: string;
	age: number;
}

interface Developer extends User {
	name: number;
}
```

- 이 코드는 에러를 발생한다.

- 인터페이스를 상속하여 사용할 때는 부모 인테페이스에 정의된 타입을 자식 인터페이스에서 보장해 주어야 한다.

2. 상속을 여러 번 할 수 있다.

```ts
interface Hero {
	power: boolean;
}

interface User extends Hero {
	name: string;
	age: number;
}

interface Developer extends User {
	skill: string;
}

let man Developer = {
	name: 'man',
	age: 21,
	skill: '코딩',
	power: false
}
```

# 6. 인터페이스를 이용한 인덱싱 타입 정의

인덱싱이란 다음과 같이 객체의 특정 속성을 접근하거나 배열의 인덱스로 특정 요소에 접근하는 동작을 의미한다.

```ts
let user = {
	name: '사용자',
	admin: true
}

console.log(user['name']);

let companies = ['삼성', '네이버', '구글'];
console.log(companies[0]);
```

`user['name']` 형태로 객체의 특정 속성에 접근하거나 `companies[0]` 형태로 배열의 특정 요소에 접근하는 것을 **인덱싱**이라고 한다.

## 배열 인덱싱 타입 정의

배열을 인덱싱할 때 인터페이스로 인덱스와 요소의 타입을 정의할 수 있다.

```ts
interface StringArray {
	[index:number]: string;
}

let companies: StringArray = ['삼성', '네이버', '구글']
```

인터페이스의 속성에 `[index: number]`라는 코드가 등장했다.

이 코드는 어떤 숫자든 모두 속성이 이름이 될 수 있다는 의미다.

- 속성 이름은 숫자고 그 속성 값으로 문자열 타입이 와야 한다.

## 객체 인덱싱 타입 정의

```ts
interface Coding {
	[level: string]: number;
}

let my = Coding = {
	junior: 100
}
```

`Coding` 인터페이스는 속성 이름이 문자열 타입이고 속성 값이 숫자 타입인 모든 속성 이름/속성 값 쌍을 허용하겠다는 의미다.

- 객체의 속성에 접근할 때 `객체['속성 이름']` 형태로 접근했다.

> 객체의 속성에 접근하는 방법은 `객체['속성 이름']`과 `객체.속성 이름` 모두 사용 가능

## 인덱스 시그니처란?

```ts
interface Coding {
	[level: string]: number;
}
```

정확히 속성 이름을 명시하지 않고 속성 이름의 타입과 속성 값의 타입을 정의하는 문법을 **인덱스 시그니처**라고 한다.

인덱스 시그너처는 단순히 객체와 배열을 인덱싱할 때 활용될 뿐만 아니라 객체의 속성 타입을 유연하게 정의할 때도 사용된다.

```ts
interface Coding {
	[level: string]: number;
}

let salary: Coding = {
	junior: '100원',
	mid: '400원',
	senior: '700원'
}
```

## 인덱스 시그니처는 언제 쓸까?

객체의 속성 이름과 개수가 구체적으로 정의되어 있다면 인터페이스에서 속성이름과 속성 값의 타입을 명시하는 것이 더 효과적이다.

- 객체의 속성 이름과 속성 값이 정해져 있는 경우에는 속성 이름과 속성 값 타입을 명시해서 정의
- 속성 이름은 모르지만 속성 이름의 타입과 값의 타입을 아는 경우에는 인덱스 시그니처를 활용한다.
