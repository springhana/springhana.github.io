---
layout: post
related_posts:
  - /study/typescript/2024-05-02-연산자를 사용한 타입 정의.markdown
title: 타입 별칭
categories:
  - study
  - typescript
image: /assets/img/typescript/typescript_logo.png
permalink: '/:categories/:year/:month/:day/:title/'
description: >
  캡틴 판교의 쉽게 시작하는 타입스크립트, 07장 타입 별칭
published : false
---

* toc
{:toc}

# 1. 타입 별칭이란?

**타입 별칭(type alias)** 특징은 타입이나 인터페이스 등을 참조할 수 있는 타입 변수를 의미한다.

- 타입에 의미를 부여해서 별도의 이름으로 부르는 것이다.

⭐ 반복되는 코드를 다음과 같이 타입 별칭으로 줄일 수 있다.

```ts
function MyMessage = string | number;
function logMessage(message: MyMessage) {
	//...
}

var message: MyMessage = "안녕"
logMessage(message)
```

# 2. 타입 별칭과 인터페이스의 차이점

## 코드 에디터에서 표기 방식 차이

타입을 정의하고 사용하는 관점에서 가장 먼저 쉽게 구분되는 점은 코드 에디터에 표시되는 정보이다.

## 사용할 수 있는 타입의 차이

타입 별칭과 인터페이스를 구분 짓는 또 다른 차이점은 정의할 수 있는 타입 종류에 있다.

- 인터페이스는 주로 객체의 타입을 정의하는 데 사용
- 타입 별칭은 다음과 같이 일반 타입에 이름을 짓는 데 사용하거나 유니언 타입, 인터섹션 타입 등에도 사용할 수 있다.
	- 제네릭이나 유틸리티 타입 등 다양한 타입에 사용할 수 있다.

타입 확장이라는 관점에서 서로 다른 특징이 있다.

## 타입 확장 관점에서 차이

타입 확장이란 이미 정의되어 있는 타입들을 조합해서 더 큰 의미의 타입을 생성하는 것을 의미한다.

타입 별칭과 인터페이스는 타입을 확장하는 방식이 다르다.

- 인터페이스는 타입을 확장할 때 상속이라는 개념을 이용한다.

- 타입 정의를 & 연산자를 사용한 인터섹션 타입을 사용한다.

작성된 타입을 어떻게 조합하는냐에 따라 인터페이스를 쓰기도 하고 때로는 타입 별칭을 사용할 수 있다.

- 인터페이스의 **선언 병합(declaration merging)** 성질이 있다.

⭐ 인터페이스는 동일한 이름으로 인터페이스를 선언하면 인터페이스 내용을 합치는 특징이 있다.

```ts
interface Person {
	name: string;
	age: number;
}

interface Person {
	address: string;
}

var seho: Person {
	nmae: '사람',
	age: 20,
	address: '서울'
}
```

동일한 이름으로 인터페이스를 여러 번 선언했을 때 해당 인터페이스의 타입 내용을 합치는 것을 선언 병합이라고 한다.

# 3. 타입 별칭은 언제 쓰는 것이 좋을 까?

> 타입스크립트 공식 문서에서는 '좋은 소프트웨어는 확장이 용이해야 한다.(open-closed principle)' 는 관점에서 타입 별칭보다 인터페이스의 사용을 권장했다.

인터페이스를 주로 사용해보고 타입 별칭이 필요할 때 타입 별칭을 쓰라고 안내한다.

> 'open-closed principle'은 객체 지향 프로그래밍에서 소프트웨어를 구성하는 요소는 언제든 확장하기 쉽고 내부 구현 사항은 변경하기 어려워야 한다는 소프트웨어 설계 원칙이다.


## 타입 별칭으로만 정의할 수 있는 타입들

타입 별칭으로만 정의할 수 있는 타입은 주요 데이터 타입이나 인터섹션, 유니언 타입이다.

인터페이스는 객체 타입을 정의할 때 사용하는 타입이기 때문에 다음 타입은 인터페이스로 정의할 수 없다.

```ts
type MyString = string;
type StringOrNumber = string | number;
type Admin = Person & Developer
```

타입 별칭은 뒤에서 배울 제네릭(genric), 유틸리티 타입(unility type), 맵드 타입(mapped type)과도 연동하여 사용할 수 있다.

## 백엔드와의 인테페이스 정의

인터페이스는 타입스크립트의 인터페이스가 아니라 영역 간 접점을 서로 맞추는 작업을 의미한다.

- 유연하게 타입을 확장하는 관점에서는 타입 별칭보다 인터페이스가 더 유리하다.