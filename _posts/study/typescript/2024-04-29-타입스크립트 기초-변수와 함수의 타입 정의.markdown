---
layout: post
related_posts:
  - /study/typescript/2024-04-29-첫 번째 프로젝트-할 일 관리 앱.markdown
title: 타입스크립트 기초 - 변수와 함수의 타입 정의
categories:
  - study
  - typescript
image: /assets/img/typescript/typescript_logo.png
permalink: '/:categories/:year/:month/:day/:title/'
description: >
  캡틴 판교의 쉽게 시작하는 타입스크립트, 03장 타입스크립트 기초 - 변수와 함수의 타입 정의
---

* toc
{:toc}

# 1. 변수에 타입을 정의하는 방법

`name` 변수에 타입을 선언하고 싶다면 다음과 같이 변수 뒤에 `: 타입이름`을 추가한다.

```ts
const name: string = 'typescript';
```

콜론 (`:`)을 **타입 표기(type annotaion)** 라고 한다. 

- 함수에도 사용할 수 있다.

---

# 2. 기본 타입

## 문자열 타입: string

`string`은 문자열을 취급하는 타입이다.

```ts
const str: string = 'hello';
```

## 숫자 타입: number

`number`은 숫자를 취급하는 타입이다.

```ts
const num: number = 10;
```

## 진위 타입: boolean

`boolean`은 진위 값을 취급하는 타입이다.

```ts
var isLogin: boolean = false;
```

## 객체 타입: object

`object`은 객체 유형의 데이터를 취급하는 타입이다.

```ts
var hero: object = { name: 'typescript', age: 100 };
```

> 타입스크립트의 장점을 극대화하려면 가급적 타입을 최대한 구체적으로 선언해야 한다.

## 배열 타입: Array

배열 타입은 다음 두 가지 방법으로 선언할 수 있다.

```ts
var companies: Array<string> = ['네이버', '삼성', '인프런']
var companies: string[] = ['네이버', '삼성', '인프런']
```

문자열 배열이라는 의미의 `Array<string>`과 `string[]` 타입 표기 방식을 사용했다.

배열의 타입을 정의할 때는 다음 문법으로 타입을 정의할 수 있다.

```ts
Array<배열의 데이터 타입>
배열의 데이터 타입[]
```

- `Array<T>` 형태는 제네릭을 의미한다.

## 튜플 타입: tuple

튜플(`tuple`)은 특정 형태를 갖는 배열을 의미한다.

> <strong class="orange_">튜플</strong>
> 배열 길이가 고정되고 각 요소 타입이 정의된 배열


```ts
const address: [string, number] = ['봄', 40];
```

## any

`any` 타입은 아무 데이터나 취급하겠다는 의미다.

- 타입스크립트에서 자바스크립트의 유연함을 취하려고 할 때 사용하는 타입이다.

```ts
var myName: any = 'spring'
myName = 100;
```

## null과 undefined

- `null`은 빈 값을 의미한다.

- `undefined`는 변수를 선언할 때 값을 할당하지 않으면 기본적으로 할당되는 초기값이다.

```ts
var empty: null = null;
var init: undefined;
```

---

# 3. 함수에 타입을 정의하는 방법

## 함수란?

```ts
function sayHi() {
	return 'hi';
}
```

`function`이라는 **예약어**라는 함수 이름으로 함수를 선언할 수 있고, 함수 본문에 `return`을 추가해서 값을 반환하거나 함수 실행을 종료할 수 있다.

- 함수는 입력 값에 따라 출력 값이 달라진다.

```ts
function sayHi(text) {
	return text;
}
```

`text`는 함수의 **파라미터(매개변수)** 라고 합니다.

- 함수를 호출할 때 넘겨준 입력 값을 받는 역할을 한다.

```ts
sayHi('hello')
```

함수를 호출할 때 넘긴 문자열 `'hello'`를 **인자**라고 한다.

## 함수의 타입 정의: 파라미터와 반환값

```ts
function sayHi(text:string): string {
	return text
}
```

- 함수의 반환값 타입은 위와 같이 함수 이름 오른쪽에 `: 타입이름`으로 지정할 수 있다.
- 파라미터 오른쪽에 `: 타입이름`을 넣으면 타입이름의 타입이 정의된다.

---

# 4. 타입스크립트 함수의 인자 특징

타입스크립트에서는 파라미터와 인자의 개수가 다르면 에러가 발생한다.

---

# 5. 옵셔널 파라미터

함수의 파라미터를 선택적으로 사용하고 싶을 때는 **옵셔널 파라미터(optional parameter)** 사용한다.

```ts
function sayMyName(first: string, last?: string): string {
	return first + last
}
```

옵셔널 파라미터는 `?`로 표기한다.

- 선택적으로 사용하고 싶은 파라미터의 오른쪽에 다음과 같이 `?`를 붙이면 된다.