---
layout: post
related_posts:
  - _posts/study/coding/2024-03-15-02.그리디 문제편.markdown
title: 04.1 DFS/BFS (설명)
categories:
  - study
  - coding
image: /assets/img/coding/이것이 코딩테스트다. 파이썬.png
permalink: '/:categories/:year/:month/:day/:title/'
description: >

 이것이 코딩 테스트다. with 파이썬 - 04.1 DFS/BFS 설명
---

* toc
{:toc}

# 탐색(Search)

탐색이란 많은 양의 데이터 중에서 원하는 데이터를 찾는 과정을 의미한다.

프로그래밍에서는 그래프, 트리 등의 자료구조 안에서 탐색을 하는 문제를 자주 다룬다.

대표적으로 DFS / BFS 가 있다.

---

# 자료구조(Data Structure)

자료구조란 데이터를 표현하고 관리하고 처리하기 위한 구조를 의미한다.

그중 스택과 큐는 자료 구조의 기초 개념으로 다음의 두 핵심적인 함수로 구성된다.

- 삽입(Push): 데이터를 삽입한다.
- 삭제(Pop): 데이터를 삭제한다.

실제로 스택과 큐를 사용할 때는 삽입과 삭제 외에도 오버플로와 언더플로를 고민해야 한다.

- 오버플로는 특정한 자료구조가 수용할 수 있는 데이터의 크기를 이미 가득 찬 상태에서 삽입 연산을 수행할 때 발생
- 언더플로는 데이터가 전혀 들어 있지 않은 상태에서 삭제 연산을 수행하면 데이터가 전혀 없는 상태를 말한다.

---

# 👉 스택(Stack)

스택은 박스 쌓기에 비유할 수 있다. 흔히 박스는 아래에서 부터 위로 차곡차곡 쌓는다. 그리고 아래에 있는 박스를 치우기 위해서 위에 있는 박스를 먼저 내려야 한다.  이러한 구조를 선입후출(First In Last Out) 구조 또는 후입선출(Last In First Out) 구조라고 한다.

> 먼저 들어 온 데이터가 나중에 나가는 형식(선입후출)의 자료구조이다

- 선입후출(First In Last Out) - FILO
- 후입선출(Last In First Out) - LIFO

```python
stack = []
# 삽입(5) - 삽입(2) - 삽입(3) - 삽입(7) -삭제() - 삽입(1) - 삽입(4) -삭제()
stack.append(5)
stack.append(2)
stack.append(3)
stack.append(7)
stack.pop()
stack.append(1)
stack.append(4)
stack.pop()

print(stack) # 최하단 원소부터 출력
print(stack[::-1] # 최상단 원소부터 출력
```

---

# 👉 큐(Queue)

큐는 대기 줄에 비유할 수 있다. 우리가 흔히 놀이공원에 입장하기 위해 줄을 설 때, 먼저 온 사람은 먼저 들어가게 된다. 물론 새치기가 없다고 가정한다. 나중에 온 사람일수록 나중에 들어가기 때문에 흔히 ‘공정한’ 자료구조라고 비유된다. 이러한 구조를 선입선출(First In First Out)구조라고 한다. 

> 먼저 들어 온 데이터가 먼저 나가는 형식(선입선출)의 자료구조이다

- 선입선출(First In First Out) - FIFO

```python
from collections import deque

#큐(Queue) 구현을 위해 deque 라이브러리 사용
queue= deque()

# 삽입(5) - 삽입(2) - 삽입(3) - 삽입(7) -삭제() - 삽입(1) - 삽입(4) -삭제()
queue.append(5)
queue.append(2)
queue.append(3)
queue.append(7)
queue.popleft()
queue.append(1)
queue.append(4)
queue.popleft()

print(queue)      # 최하단 원소부터 출력
queue.reverse()   # 다음 출력을 위해 역순으로 바꾸기
print(queue] # 최상단 원소부터 출력
```

파이썬으로 큐를 구현할 때는 collections 모듈에서 제공하는 deque 자료구조를 활용하자!!

---

# 👉 재귀 함수(Recursive Function)

재귀 함수란 자기 자신을 다시 호출하는 함수를 의미한다.

- 간단한 재귀 함수
    
    ```python
    def recursive_function():
    	print("재귀 함수를 호출합니다.")
    	recursive_function() # 재귀 
    
    recursive_function()
    ```
    
    이 코드를 실행하면 ‘재귀 함수를 호출합니다.’ 라는 문자열을 무한히 호출한다.
    
> 👉 RecursionError : maximum recursion depth exceeded while pickling an object
> <br/>
> 이 오류는 재귀의 최대 깊이를 초과했다는 내용이다. 보통 파이썬 인터프리터는 호출 횟수 제한이 있는데 이 한계를 벗어났기 때문이다. 따라서 무한히 재귀 호출을 진행할 수는 없다.

재귀 함수를 문제 풀이에서 사용할 때는 재귀 함수가 언제 끝날지, 종료 조건을 꼭 명시해야 한다.

재귀 함수 초반에 등장하는 `if`문이 종료 조건 역할을 수행한다.

- 재귀 함수를 이용하는 대표적 예제로 팩토리얼
    
    ```python
    def factorial_recursive(n):
    	# n이 1 이하인 경우 1을 반환
    	if n <= 1:
    		return 1:
    	# n! = n * (n-1)를 그대로 코드를 작성하기
    	return n * factorial_recursive(n-1)
    ```
    

# 👉 그래프

그래프는 노드(Node)와 간선(Edge)으로 표현하며 이때 노드를 정점(Vertex) 이라고도 말한다.
그래프 탐색이란 하나의 노드를 시작으로 다수의 노드를 방문하는 것을 말한다. 또한 두 노드가 간선으로 연결되어 있다면 ‘두 노드는 인접하다’ 라고 표현한다.

프로그래밍에서 그래프는 크게 2가지 방식으로 표현할 수 있는데 코딩 테스트에서는 이 두 방식 모두 필요하다.

- 인접 행렬(Adjacency Matrix) :  2 차원 배열로 그래프의 연결 관계를 표현하는 방식
    
    ```python
    INF = 999999999 # 무한의 비용 선언
    
    # 2차원 리스트를 이용해 인접 행렬 표현
    graph = [
    	[0, 7, 5],
    	[7, 0, INF],
    	[5, INF, 0]
    ]
    print(graph)
    ```
    
    메모리 측면에서 보자면 인접 행렬 방식은 모든 관계를 저장하므로 노드 개수가 많을수록 메모리가 불필요하게 낭비된다.
    
- 인접 리스트(Adjacency List) : 리스트로 그래프의 연결 관계를 표현하는 방식
    
    ```python
    # 행(Row)이 3개인 2차원 리스트로 인접 리스트 표현
    graph = [[] for _ in range(3)]
    
    # 노드 0에 연결된 노드 정보 저장(노드, 거리)
    graph[0].append((1,7))
    graph[0].append((2,5))
    
    # 노드 1에 연결된 노드 정보 저장(노드, 거리)
    graph[1].append((0,7))
    
    # 노드 2에 연결된 노드 정보 저장(노드, 거리)
    graph[2].append((0,5))
    
    print(graph)
    ```
    
    메모리 측면에서 보자면 연결된 정보 만을 저장하기 때문에 메모리를 효율적으로 사용한다.
    
---

# DFS


DFS는 Depth-First-Search, 깊이 우선 탐색이라고도 부르며, 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘이다.

---

DFS는 깊이 우선 탐색 알고리즘이다. 특정한 경로로 탐색하다가 특정한 상황에서 최대한 깊숙이 들어가서 노드를 방문한 후, 다시 돌아가 다른 경로로 탐색하는 알고리즘이다.

1. 탐색 시작 노드를 스택에 삽입하고 방문 처리를 한다.
2. 스택의 최상단 노드에 방문하지 않은 노드가 있으면 그 인접 노드를 스택에 넣고 방문 처리를 한다. 방문하지 않은 인접 노드가 없으면 스택 최상단에 노드를 꺼낸다.
3. 2번 과정을 더 이상 수행할 수 없을 때까지 반복한다.

---

1. 시작 노드인 ‘1’ 을 스택에 삽입하고 방문 처리를 한다.
2. 스택의 최상단 노드인 ‘1’ 에 방문하지 않은 인접 노드 ‘2’, ‘3’, ‘8’ 이 있다. 이 중에서 가장 작은 노드인 ‘2’ 를 스택에 놓고 방문 처리를 한다.
3. 스택의 최상단 노드인 ‘2’ 에 방문하지 않은 인접 노드 ‘7’ 이 있다. 따라서 ‘7’ 번 노드를 스택에 넣고 방문 처리를 한다.
4. 스택의 최상단 노드인 7’ 에 방문하지 않은 인접 노드 ‘6’ 과 ‘8’ 이 있다. 이 중에서 가장 작은 노드인 ‘6’ 을 스택에 넣고 방문 처리를 한다.
5. 스택의 최상단 노드인 ‘6’ 에 방문하지 않은 인접 노드가 없다. 따라서 스택에서 ‘6’ 번 노드를 꺼낸다.
6. 스택의 최상단 노드인 ‘7’에 방문하지 않은 인접 노드 ‘8’ 번 노드를 스택에 넣고 방문 처리를 한다.
7. 스택의 최상단 노드인 ‘8’ 에 방문하지 않은 인접 노드가 없다. 따라서 스택에서 ‘8’번 노드를 꺼낸다.
8. 스택의 최상단 노드인 ‘7’ 에 방문하지 않은 인접 노드가 없다. 따라서 스택에서 ‘7’번 노드를 꺼낸다.
9. 스택의 최상단 노드인 ‘2’ 에 방문하지 않은 인접 노드가 없다. 따라서 스택에서 ‘2’번 노드를 꺼낸다.
10. 스택의 최상단 노드인 ‘1’ 에 방문하지 않은 인접 노드 ‘3’ 을 스택에 넣고 방문 처리를 한다.
11. 스택의 최상단 노드인 ‘3’ 에 방문하지 않은 인접 노드 ‘4’ 와 ‘5’ 가 있다. 이 중에서 가장 작은 노드인 ‘4’ 를 스택에 넣고 방문 처리를 한다.
12. 스택의 최상단 노드인 ‘4’ 에 방문하지 않은 인접 노드 ‘5’ 와 ‘5’ 가 있다. 이 중에서 가장 작은 노드인 ‘5’ 를 스택에 넣고 방문 처리를 한다.
13. 남아 있는 노드에 방문하지 않은 인접 노드가 없다. 따라서 모든 노드를 차례대로 꺼낸다.

<img src="/assets/img/coding/DFS.png" />

> 1 → 2 → 7 → 6 → 8 → 3 → 4 → 5  

- DFS 예제
    
    ```python
    # DFS 메서드 정의
    def dfs(graph, v, visited):
        # 현재 노드를 방문 처리
        visited[v] = True
        print(v, end=' ')
        # 현재 노드와 연결된 다른 노드를 재귀적으로 방문
        for i in graph[v]:
            if not visited[i]:
                dfs(graph, i, visited)
    
    # 각 노드가 연결된 정보를 표현 (2차원 리스트)
    graph = [
        [],
        [2, 3, 8],
        [1, 7],
        [1, 4, 5],
        [3, 5],
        [3, 4],
        [7],
        [2, 6, 8],
        [1, 7]
    ]
    
    # 각 노드가 방문된 정보를 표현 (1차원 리스트)
    visited = [False] * 9  # 노드 1번을  사용하지 않기 때문에
    
    # 정의된 DFS 함수 호출
    dfs(graph, 1, visited)
    ```
    


---

# BFS


BFS(Breadth First Search) 알고리즘은 ‘너비 우선 탐색’ 이라는 의미를 가진다.
쉽게 말해 가까운 노드부터 탐색하는 알고리즘이다.

---

BFS 구현에서는 선입선출 방식인 큐 자료구조를 이용하는 것이 정석이다. 인접한 노드를 반복적으로 큐에 넣도록 알고리즘을 작성하면 자연스럽게 먼저 들어온 것이 먼저 나가게 되어, 가까운 노드부터 탐색을 진행하게 된다.

1. 탐색 시작 노드를 큐에 삽입하고 방문 처리를 한다.
2. 큐에서 노드를 꺼내 해당 노드의 인접 노드 중에서 방문하지 않은 노드를 모두 큐에 삽입하고 방문 처리를 한다.
3. 2번 과정을 더 이상 수행할 수 없을 때까지 반복한다.


---

1. 시작 노드인 ‘1’ 을 큐에 삽입하고 방문 처리를 한다. 
2. 큐에서 노드 ‘1’ 을 꺼내고 방문하지 않은 인접 노드 ‘2’. ‘3’, ‘8’ 을 모두 큐에 삽입하고 방문 처리를 한다.
3. 큐에서 노드 ‘2’ 를 꺼내고 방문하지 않은 인접 노드 ‘7’ 을 큐에 삽입하고 방문 처리를 한다.
4. 큐에서 노드 ‘3’ 을 꺼내고 방문하지 않은 인접 노드 ‘4’ 와 ‘5’ 를 모두 큐에 삽입하고 방문 처리를 한다.
5. 큐에서 노드 ‘8’ 을 꺼내고 방문하지 않은 인접 노드가 없으므로 무시한다.
6. 큐에서 노드 ‘7’ 을 꺼내고 방문하지 않은 인접 노드 ‘6’ 을 큐에 삽입하고 방문 처리를 한다.
7. 남아 있는 노드에 방문하지 않은 인접 노드가 없다. 따라서 모든 노드를 차례대로 꺼낸다.

<img src="/assets/img/coding/BFS.png" / >

> 1 → 2 → 3 → 8 → 7 → 4 → 5 → 6

- BFS 예제
    
    ```python
    from collections import deque
    
    # BFS 메서드 정의
    def bfs(graph, start, visited):
        # 큐 (Queue) 구현을 위해 deque 라이브러리 사용
        queue = deque([start])
        # 현재 노드를 방문 처리
        visited[start] = True
        # 큐가 빌 때까지 반복
        while queue:
            # 큐에서 하나의 원소를 뽑아 출력하기
            v = queue.popleft()
            print(v, end=' ')
            # 아직 방문하지 않은 인접한 원소들을 큐에 삽입
            for i in graph[v]:
                if not visited[i]:
                    queue.append(i)
                    visited[i] = True
    
    # 각 노드가 연결된 정보를 표현 (2차원 리스트)
    graph = [
        [],
        [2, 3, 8],
        [1, 7],
        [1, 4, 5],
        [3, 5],
        [3, 4],
        [7],
        [2, 6, 8],
        [1, 7]
    ]
    
    # 각 노드가 방문된 정보를 표현 (1차원 리스트)
    visited = [False] * 9  # 노드 1번을  사용하지 않기 때문에
    
    # 정의된 DFS 함수 호출
    bfs(graph, 1, visited)
    ```