---
layout: post
related_posts:
  - _posts/study/react/2024-02-21-리액트 개발을 위해 꼭 알아야 할 자바스크립트 (2).markdown
  - _posts/study/react/2024-02-21-리액트 개발을 위해 꼭 알아야 할 자바스크립트 (3).markdown
title: 리액트 개발을 위해 꼭 알아야 할 자바스크립트 (1)
categories:
  - study
  - react
image: /assets/img/react/modern-react-book.png
permalink: '/:categories/:year/:month/:day/:title/'
description: >
  모던 리액트 Deep Dive: 리액트의 핵심 개념과 동작 원리부터 Next.js까지, 리액트의 모든 것 - 01장 리액트 개발을 위해 꼭 알아야 할 자바스크립트
---

* toc
{:toc}

# 1. 자바스크립트의 동등 비교

## **🛠️ 참고**

<ul class="related-posts">
  <li class="h6">
    <div>
      <a href="https://springhana.github.io/study/javascript/2024/02/11/%EC%9B%90%EC%8B%9C-%EA%B0%92%EA%B3%BC-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EB%B9%84%EA%B5%90/" class="flip-title">
        <span>원시 값과 객체의 비교</span>
      </a>
    </div>
  </li>
   <li class="h6">
    <div>
      <a href="https://springhana.github.io/study/javascript/2024/01/31/%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85/" class="flip-title">
        <span>데이터 타입</span>
      </a>
    </div>
  </li>
</ul>

## **자바스크립트의 데이터 타입**

자바스크립트의 모든 값은 데이터 타입을 갖고 있으며, 이 데이터 타입은 원시 타입과 객체 타입으로 나눈다.

<strong style="color:skyblue">원시 타입(primitive type)</strong>

- boolean
- null
- undefined
- number
- string
- symbol
- bigint

<strong style="color:skyblue">원시 타입(primitive type)</strong>

- object

<br>

<strong class="p_">원시 타입</strong>

자바스크립트에서 원시 타입이란 간단히 정의하자면 객체가 아닌 다른 모든 타입을 의미한다. 객체가 아니므로 이러한 타입들은 메서드를 갖지 않는다. 최신 자바스크립트에서는 총 7개의 원시 타입이 있다.

<strong class="purple_">undefined</strong>

undefined는 선언한 후 값을 할당하지 않은 변수 또는 값이 주어지짖 않은 인수에 자동으로 할당되는 값이다.

```jsx
let foo

type foo === 'undefined' // true

function bar(hello) {
  return hello
}

typeof bar() === 'undefined' // true
```

후술한 원시값 중 null과 undefined는 오직 각각 null과 undefined라는 값만 가질 수 있으며, 그 밖의 타입을 가질 수 있는 값이 두 개 이상(boolean의 true, false와 같이)존재한다.

<br>

<strong class="purple_">null</strong>

아직 값이 없거나 비어 있는 값을 표현할 때 사용한다.

```js
typeof null === 'object' // true?
```

null이 가지고 있는 특별한 점 하나는 다른 원시값과 다르게 typeof로 null을 확인했을 때 해당 타입이 아닌 'object'라는 결과가 반환된다는 것이다.

**undefined는 '선언됐지만 할당되지 않은 값' 이고, null은 '명시적으로 비어 있음을 나타내는 값'으로 사용하는 것이 일반적이다.**

<br>

<strong class="purple_">Boolean</strong>

참(true)과 거짓(false)만을 가질 수 있는 데이터 타입이다.

한 가지 주목할 만한 점은 true, false와 같은 boolean 형의 값 외에도 조건문에서 마치 true와 false처럼 취급되는 truthy, falsy 값이 존재한다는 것이다.

- falsy: 조건문 내부에서 flase로 취급되는 값을 말한다.

  |값|타입|설명|
  |:---|:---|:---|
  |false|Boolean|false는 대표적인 falsy한 값이다.|
  |0, -0, 0n, 0x0n|Number, BigInt|0은 부호나 소수점 유무에 상관없이 falsy한 값이다.|
  |NaN|Number|Number가 아니라는 것을 뜻하는 NaN(Not a Number)은 falsy한 값이다.|
  |'', "", ``|String|문자열이 falsy하기 위해서는 반드시 공백이 없는 빈 문자열이어야 한다.|
  |null|null|null이 falsy한 값이다.|
  |undefined|undefined|undefined는 falsy한 값이다.|

- truthy: 조건문 내부에서 true로 취급되는 값, 앞아서 언급한 falsy로 취급되는 값 이외에는 모두 true로 취급된다.

  객체와 배열에 값이 존재하는지 여부와 상관없이 truthy로 취급된다는 것이다. 즉, {}, [] 모두 truthy한 값이다.

  ```js
  if (1) {
    // true
  }

  if (0) {
    // false
  }

  if (NaN) {
    // false
  }

  // 조건문 외에도 truthy와 falsy를 Boolean()을 통해 확인할 수도 있다.
  Boolean(1) // true
  Boolean(2) // false
  Boolean(true) // true
  ```

<br>

<strong class="purple_">Number</strong>

정수와 실수를 구분해 저장하는 다른 언어와 다르게, 자바스크립트는 모두 숫자를 하나의 타입에 저장했었다. 

```js
const a = 1;

const maxInteger = Math.pow(2, 53);
maxInteger - 1 === Number.MAX_SAFE_INTEGER // true

const minInteger = -(Math.pow(2, 53) - 1);
minInteger === Number.MIN_SAFE_INTEGER // true
```

또한 2진수, 8진수, 16진수 등의 빌드 데이터 타입을 제공하지 않으므로 각 진수별로 값을 표현해도 모두 10진수로 해석되어 동일한 값으로 표시된다.

```js
const 이진수_2 = 0b10; // 2진수(binary) 2
이진수_2 === (2).toString(2); // true(2)를 괄호로 선언한 이유는 .2뒤에 점이 있으면 소수점으로 인식하기 때문

const 팔진수_8 = 0o10; // 8진수 (octal) 8
팔진수_8 === (8).toString(8) // true

10 === (10).toString(10); // true

const 십육진수_16 = 0x10 // 16진수 (hexadecimal) 16
십육진수_16 == (16).toString(16) // true
```

<br>

<strong class="purple_">Bigint</strong>

최대 2^53 - 1을 저장할 수 있는 number의 한계를 넘어서 더 큰 숫자를 저장할 수 있게 해준다.

```js
// 기존 number의 한계
9007199254740992 === 9007199254740993 // 마지막 숫자는 다른데 true가 나온다. 이는 더 이상 다룰 수 없는 크기이기 때문이다.

const maxInteger = Number.MAX_SAFE_INTEGER;
console.log(maxInteger + 5 === maxInteger + 6) // true??
const bigInt1 = 9007199254740995n // 끝에 n을 붙이거나
const bigInt2 = BigInt('9007199254740995') // BigInt 함수를 사용하면 된다.

const number = 9007199254740992;
const bigint = 9007199254740992n;

typeof number; // number
typeof bigint; // bigint

number == bigint;  // true
number === bigint; // false (타입이 달라서 false가 반환된다.)
```

<br>

<strong class="purple_">String</strong>

string은 텍스트 타입의 데이터를 저장하기 위해 사용된다. 한 쌍의 작음따옴표 `'` 나 큰따옴표 `"`. 또는 내장 표현식을 허용하는 문자열 리터럴 표현 방식인 백틱 ` ` ` 으로도 표현할 수 있다.

백틱을 사용해서 표현한 문자열을 템플릿 리터럴(template literal)이라고 하는데, 같은 문자열을 반환하지만 줄바꿈이 가능하고, 문자열 내부에 표현식을 쓸 수 있다는 차이가 있다.

```js
// '\n안녕하세요.\n'
const longText = `
안녕하세요.
`

//Uncaught SyntaxError: Invalid or unexpected token
const longText = "
안녕하세요.
"
```

자바스크립트는 문자열의 특징 중 하나는 문자열이 원시 타입이며 변경 불가능하다는 것이다. 이것은 한번 문자열이 생성되면 그 문자열을 변경할 수 없음을 의미한다.

```js
const foo = 'bar'

console.log(foo[0]) // 'b'

// 앞 글자를 다른 글자로 변경해 보았다.
foo[0] = 'a'

// 이는 반영되지 않는다.
console.log(foo) // bar
```

<br>

<strong class="purple_">Symbol</strong>

Symbol은 중복되지 않는 어떠한 고유한 값을 나타내기 위해 만들어졌다. 

심벌은 함수를 이용해서만 만들 수 있다. 즉, 심벌을 생성하려면 반드시 Symbol()을 사용해야만 한다.

```js
// Symbol 함수에 같은 인수를 넘겨주더라도 이는 동일한 값으로 인정되지 않는다.
// 심벌 함수 내부에 넘겨주는 값을 Symbol 생성에 영향을 미치지 않는다 (Symbol.for 제외)
const key = Symbol('key');
const key2 = Symbol('key')

key === key2 // false

// 동일한 값을 사용하기 위해서는 Symbol.for을 활용한다.
Symbol.for('hello') === Symbol.for('hello') // true
```

<br>

<strong class="p_">객체 타입</strong>

객체 타입을 간단하게 정의하면 앞서 7가지 원시 타입 이외의 모든 것, 즉 자바스크립트를 이루고 있는 대부분의 타입이 바로 객체 타입이다. 여기에는 배열, 함수, 정규식, 클래스 등이 포함된다.

```js
typeof [] === 'object' // true
typeof {} === 'object' // true

function hello() {}

typeof hello === 'function' // true

const hello1 = function() {
}

const hello2 = function() {
}

// 객체인 함수의 내용이 육안으로는 같아 보여도 참조가 다르기 때무에 false가 반환된다.

hello1 === hello2 // false
```

<br>

## **값을 저장하는 방식의 차이**

원시 타입과 객체 타입의 가장 큰 차이점으라고 한다면. 바로 값을 저장하는 방식의 차이다. 이 값을 저장하는 방식의 차이가 동등 비교를 할 때 차이를 만드는 원이이 된다.

- 먼저 원시 타입은 불편 형태의 값으로 저장된다. 그리고 이 값은 변수 할당 시점에 메모리 영역을 차지하고 저장한다.

  ```js
  let hello = 'hello world'
  let hi = hello

  console.log(hello === hi) // true
  ```

  두 값을 비교하면 true가 나온다. 이는 hello의 hello world라는 값이 hi에 복사해 전달됐기 때문이다. 값을 비교하기 때문에, 값을 전달하는 방식이 아닌 각각 선언하는 방식으로도 동일한 결과를 볼 수 있다.

  ```js
    let hello = 'hello world'
  let hi = 'hello world'

  console.log(hello === hi) // true
  ```
  
반면 객체는 프로퍼티를 삭제, 추가, 수정할 수 있으므로 원시 값과 다르게 변경 가능한 형태로 저장되며, 값을 복사할 때도 값이 아닌 참조를 전달하게 된다. 다음 예제 코드를 살펴보자.

```js
// 다음 객체는 완벽하게 동일한 내용을 가지고 있다.
var hello = {
  greet: 'hello, world',
}

var hi = {
  greet: 'hello, world',
}

// 그러나 동등 비교를 하면 false가 나온다.
console.log(hello === hi) // false

// 원시값이 내부 속성값을 비교하면 동일하다.
console.log(hello.greet === hi.greet) // true
```

객체는 값을 저장하는게 아니라 참조를 저장하기 때문에 앞서 동일하게 선언했던 객체라 하더라도 저장하는 순산 다른 참조를 바라보기 때문에 false를 반환하게 된다.

즉, 값은 같았을지언정 참조하는 곳이 다른 셈이다. 반면 참조를 전달하는 경우에는 이전에 원시값에서 했던 것과 같은 결과를 기대할 수 있다.

- hello와 hi 변수는 변수명 및 각 변수명의 주소가 서로 다르지만 **value가 가리키는 주소가 동일하다.**

  ```js
  var hello = {
    greet: 'hello, world',
  }

  var hi = hello

  console.log(hi === hello) // true
  ```

<br>

자바스크립트 개발자는 항상 객체 간에 비교가 발생하면, 이 객체 간의 비교는 우리가 이해하는 내부의 값이 같다하더라도 결과는 대부분 true가 아닐 수 있다는 것을 인지해야 한다.

<br>

## **자바스크립트의 또 다른 비교 공식, Object.is**

Object.is는 두 개인 인수를 받으며, 이 인수 두개가 동일한지 확인하고 반환하는 메서드다.

- `==` vs `Object.is` : `==` 비교는 같음을 비교하기 전에 양쪽이 같은 타입이 아니라면 비교할 수 있도록 강제로 형변환(type casting)을 한 후에 변경한다. 하지만 Object.is는 이러한 작업을 하지 않고 ===와 동일하게 타입이 다르면 그냥 false다.

- `===` vs `Object.is` : 이 방법에도 차이가 있다. `Object.is` 가 좀 더 개발자가 기대하는 방식으로 정확히 비교한다.

  ```js
  -0 === +0; // true
  Object.is(-0, +0) // false

  Number.NaN === NaN; // false
  Objectis(Number.NaN, NaN) // true

  NaN === 0 / 0 // false
  Object.is(NaN, 0 / 0) // true
  ```

주의 할 점은, `Object.is`를 사용한다 하더라도 객체 비교에는 별 차이가 없다는 것이다.

```js
Object.is({}, {}) // false

const a = {
  hello: 'hi,
}

const b = a;

Object.is(a, b); // true
a === b // true
```

`Object.is`는 위와 같이 몇 가지 특별한 사항에서 동등 비교 `===`가 가지는 한계를 극복하기 위해 만들어졌다. 

그러나 여전히 객체 간 비교에 있어서는 자바스크립트의 특징으로 인해 `===`와 동일하게 동작하는 것을 알 수 있다.

<br>

## **리액트에서의 동등 비교**

리액트에서 사용하는 동등 비교는 `==`나 `===`가 아닌 이 `Object.is`다. `Object.is`는 ES6에서 제공하는 기능이기 때문에 리액트에서는 이를 구현한 폴리필(Polyfill)을 할께 사용한다.

```js
// flow로 구현돼 있어 any가 추가돼 있다. 
//flow에서 any는 타입스크립트와 동일하게 어떠한 값도 받을 수 있는 타입을 의미한다.

function is(x: any, y: any) {
  return (
    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare
  )
}

// 런타임에 Object.is가 있다면 그것을 사용하고, 아니라면 위 함수를 사용한다.
// Object.is는 인터넷 익스플로러 등에 존재하지 않기 때문에 폴리필을 넣어준 것으로 보인다.
const objectIs: (x: any, y: any) => boolean =
  typeof Object.is === 'function' ? Object.is : is;

export default objectIs;
```
© https://github.com/facebook/react/blob/main/packages/shared/objectIs.js

<br>

리액트에서는 이 ObjectIs를 기반으로 동등 비교를 하는 shallowEqual이라는 함수를 만들어 사용한다. 이 shallowEqual은 의존성 비교 등 리액트의 동등 비교가 필요한 다양한 곳에서 사용된다.

```js
import is from './objectIs';
// 다음 코드는 Object.prototype.hasOwnProperty다.
// 이는 객체에 특정 프로퍼티가 있는지 확인하는 메서드다.
import hasOwnProperty from './hasOwnProperty';

/**
 * 주어진 객체의 키를 순회하면서 두 값이 엄격한 동등성을 자니는지를 확인하고,
 * 다른 값이 있다면 false를 반환한다. 만약 두 객체 간에 모두 키와 값이 동일하다면
 * true를 반환한다.
 * */

// 단순히 Object.is를 수행하는 것뿐만 아니라 객체 간의 비교도 추가돼 있다.
function shallowEqual(objA: mixed, objB: mixed): boolean {
  if (is(objA, objB)) {
    return true;
  }

  if (
    typeof objA !== 'object' ||
    objA === null ||
    typeof objB !== 'object' ||
    objB === null
  ) {
    return false;
  }

  // 각 키 배열을 꺼낸다.
  const keysA = Object.keys(objA);
  const keysB = Object.keys(objB);

  // 배열의 길이가 다르다면 false
  if (keysA.length !== keysB.length) {
    return false;
  }

  // A의 키를 기준으로, B에 같은 키가 있는지, 그리고 그 값이 같은지 확인한다. 
  for (let i = 0; i < keysA.length; i++) {
    const currentKey = keysA[i];
    if (
      !hasOwnProperty.call(objB, currentKey) ||
      !is(objA[currentKey], objB[currentKey])
    ) {
      return false;
    }
  }

  return true;
}

export default shallowEqual;
```
© https://github.com/facebook/react/blob/main/packages/shared/shallowEqual.js

<br>

리액트에서의 비교를 요약하자면 `Object.is`로 먼저 비교를 수행한 다음에 `Object.is`에서 수행하지 못하는 비교, 즉 객체 간 얕은 비교를 한 번 더 수행하는 것을 알 수 있다.

객체 간 얕은 비교란 객체의 첫 번째 깊이에 존재하는 값만 비교한다는 것을 의미한다.

```js
// Object.is는 참조가 다른 객체에 대해 비교가 불가능하다.
Object.is({hello: 'world'}, {hello: 'world'}) // false

// 반면 리액트 팀에서 구현한 shallowEqual은  객체의 1 depth까지는 비교가 가능하다.
shallowEqual({hello: 'world'}, {hello: 'world'}) // true

// 그러나 2 depth까지 가면 이를 비교할 방법이 없으므로 false를 반환한다.
shallowEqual({hello: {hi: 'world'}}, {hello: {hi: 'world'}}) // false
```

이렇게 객체의 얕은 비교까지만 구현한 이유는 리액트에서 사용하는 JSX props는 객체이고, 그리고 여기에 있는 props만 일차적으로 비교하면 되기 때문이다.

```ts
type Props = {
  hello: string
}
function HelloComponent(props:Props) {
  return <h1>{hello}</h1>
}
// ...

function App() {
  return <HelloComponent hello="hi!" />
}
```

위 코드에서 props는 객체다. 그리고 기본적으로 **리액트는 props에서 꺼내온 값을 기준으로 렌더링을 수행하기 때문에 일반적인 케이스에서는 얕은 비교로 충분할 것이다.** 이러한 특성을 안다면 props에 또 다른 객체를 넘겨준다면 리액트 렌더링이 예상치 못하게 작동한다는 것을 알 수 있다.

```jsx
import {memo, useEffect, useState } from "react"

type Props = {
  counter: number
}

const Component = memo((props: Props) => {
  useEffect(()=>{
    console.log('Component has been readered!')
  })

  return <h1>{props.counter}</h1>
})

type DeeperProps = {
  counter: {
    counter: number
  }
}

const DeeperComponents = memo((props: DeeperProps) => {
  useEffect(()=> {
    console.log('Deeper Components has been redered!')
  })

  return <h1>{props.counter.counter}</h1>
})

export default function App() {
  const [, setCouner] = useState(0)

  function handleClick() {
    setCounter((prev) => prev + 1)
  }

  return (
    <div className="App">
      <Component counter={100} />
      <DeeperComponent counter={{counter: 100}} />
      <button onClick={handleClick}>+</button>
    </div>
  )
}
```

이와 같이 props가 깊어지는 경우, 즉 한 객체 안에 또다른 객체가 있을 경우 React.memo는 컴포넌트에 실제로 변경된 값 없음에도 불구하고 메모이제이션된 컴포넌트를 반환하지 못한다.

즉, Component는 props.counter가 존재하지만, DeeperComponent는 props.counter.counter에 props가 존재한다.

상위 컴퍼넌트인 App에서 버튼을 클릭해서 강제로 렌더링을 일으킬 경우, shallowEqual을 사용하는 Component 함수는 위 로직에 따라 정확히 객체 간 비교를 수행해서 렌더링을 방지해 주었지만 DeepComponent 함수는 제대로 비교하지 못해 memo가 작동하지 않는 모습을 볼 수 있다.

<br>

--- 

# 2. 함수

## **🛠️ 참고**

<ul class="related-posts">
  <li class="h6">
    <div>
      <a href="https://springhana.github.io/study/javascript/2024/02/14/%ED%95%A8%EC%88%98/" class="flip-title">
        <span>함수</span>
      </a>
    </div>
  </li>
</ul>


## **함수란 무엇인가?**

자바스크립트에서 함수란 작업을 수행하거나 값을 계산하는 등의 과정을 표현하고, 이를 하나의 블록으로 감싸서 실행 단위로 만들어 놓은 것을 의미한다.

```js
function sum(a, b) {
  return a + b
}

sum(10, 24) // 34
```

먼저 `function`으로 시작해 `}`로 끝나는 부분까지가 함수를 정의한 부분이다. 

- `function` 뒤에 오는 것이 **함수명**

- 함수의 입력값으로 받는 a, b를 각각 **매개변수**

- `return`으로 작성된 것이 **반환값**이다.

- sum 뒤에 넘겨준 두 개의 값 10과 24를 **인자**라고 한다.

<br>

리액트에서 컴포넌트를 만드는 함수도 이러한 기초적인 형태를 따르는 것을 알 수 있다.

```tsx
function Component(props) {
  return <div>{props.hello}</div>
}
```

Component라고 하는 함수를 선언하고 매개변수로는 일반적으로 props라고 부르는  단일 객체를 받으면 return 문으로 JSX를 반환한다.

<br>

## **함수를 정의하는 4가지 방법**

<strong class="p_">함수 선언문</strong>

자바스크립트에서 함수를 선언할 때 가장 일반적으로 사용하는 방식이다.

```js
function add(a, b) {
  return a + b
}
```

함수 선언문은 표현식이 아닌 일반 문(statement)으로 분류한다. 표현식이란 무언가 값을 산출하는 구문을 의미한다. 즉, 앞선 함수 선언으로는 어떠한 값도 표현되지 않았으므로 표현식이 아닌 문으로 분류된다.

<br>

```js
const sum = function sum(a, b) {
  return a + b
}

sum(10, 24) // 34
```

자바스크립트 엔진이 코드의 문맥에 따라 동일한 함수를 문이 아닌 표현식으로 해석하는 경우가 있기 때문이다. 위와 같은 이름을 가진 형태의 함수 리터럴은 코드 문맥에 따라 전자와 같은 선언문으로도, 후자와 같은 표현식으로도 사용될 수 있음을 알고 있어야 한다.

<br>

<strong class="p_">함수 표현식</strong>

프로그래밍 세계에서 일급 객체란 다른 객체들에 일반적으로 적용 가능한 연산을 모두 지원하는 객체를 의미한다. 

자바스크립트에서 함수는 일급 객체다.

함수는 다른 함수의 매개변수가 될 수도 있고, 반환값이 될 수도 잇으며, 앞에서 본 것처럼 할당도 가능하므로 일급 객체가 되기 위한 조건을 모두 갖추고 있다.

```js
const sum = function add(a, b) {
  // 함수 몸통에서 현재 실행 중인 함수를 참조하는 데 사용할 수 있다.
  // 이는 단순히 코드에 대한 이해를 돕기 위한 예제 코드고,
  // 실제 프로덕션 코드에서는 절대로 사용해서는 안 된다.
  console.log(arguments.callee.name)
  return a + b
}

sum(10, 24)

//add
add(10, 24) // Uncaught TypeError: add is not defined
```

실제로 함수를 호출하기 위해서는 사용된 것은 sum임을 알 수 있다. 그리고 add는 식제 함수 내부에서만 유효한 식별자일 뿐, 함수를 외부에서 호출하는 데에는 사용할 수 없는 식별자다.

<br>

<strong class="p_">함수 표현식과 선언 식의 차이</strong>

**함수 표현식과 함수 선언 식의 가장 큰 차이점은 호이스팅(hoising)이다.**

> **호이스팅**<br>
> 함수의 호이스팅이라 함은, 함수 선언문이 마치 코드 맨 앞단에 작성된 것처럼 동작하는 자바스크립트의 특징을 의미한다. 

```js
hello() // hello

function hello() {
  console.log('hello')
}

hello() // hello
```

**함수의 호이스팅은 함수에 대한 선언을 실행 전에 미리 메모리에 등록하는 적업을 의미한다.** 이러한 함수의 호이스팅이라는 특징 덕분에 함수 선언문이 미리 메모리에 등록됐고, 코드의 순서에 상관없이 정상적으로 함수를 호출할 수 있게 된 것이다.

반면 함수 표현식은 함수를 변수에 할당했다. 변수도 마찬가지로 호이스팅이 일어난다. 

그러나 함수의 호이스팅과는 다르게, 호이스팅되는 시점에서 var의 경우에는 undefined로 초기화한다는 차이가 있다.

```ts
console.log(typeof hello === 'undefined') // true

hello() // Uncaught TypeError: hello is not a function

var hello = function () {
  console.log('hello')
}

hello()
```

함수와 다르게 변수는, **런타임 이전에 undefined로 초기화되고, 할당문이 실행되는 시점, 런타임 시점에 함수가 할당되어 작동한다는 것을 알 수 있다.**

함수를 자유롭게 선언하고 어디서든 자유롭게 호출하고 싶거나, 변수 선언과 다르게 명시적으로 함수를 구별하고 싶을 때는 함수 선언문이 더 좋을 수 있다. 함수 선언문은 함수가 선언된 위치에 상관없이 함수 호이스팅의 특징을 살리면 어디서든 호출할 수 있고, 또 변수 선언과 뚜렷하게 구별되는 차이점이 있다

<br>

<strong class="p_">Function 생성자</strong>

```js
const add = new Function('a', 'b', 'return a + b')

add(10, 24) // 34
```

코드 작성 관점에서만 보더라도 매개변수, 그리고 함수의 몸통을 모두 문자열로 작성해야 한다.

생성자 함수 방식을 함수를 만드는 것은 권장되지 않는다.

<br>

<strong class="p_">화살표 함수</strong>

function이라는 키워드 대신 `=>` 라는 화살표를 활용해서 함수를 만든다.

```js
const add = (a, b) => {
  return a + b
}

const add = (a, b) => a + b
```

화살표 함수는 앞서 언급한 함수 생성 방식과 몇 가지 차이점이 있다.

- 화살표 함수에서는 constructor를 사용할 수 없다. 즉, 생성자 함수로 화살표 함수를 사용하는 것은 불가능하다.

    ```js
    const Car = (name) => {
      this.name = name
    }

    // uncaught TypeError: Car is not a constructor
    const myCar = new Car('하이')
    ```

- 화살표 함수에서는 arguments가 존재하지 않는다.

    ```js
    function hello() {
      console.log(arguments)
    }

    // Argument(3) [1, 2, 3, callee: f, Symbol (Symbol.iterator): f]
    hello(1, 2, 3)

    const hi = () => {
      console.log(arguments)
    }

    // Uncaught ReferenceError: arguments is not defined
    hi(1, 2, 3)
    ```

- 화살표 함수에서는 함수 자체의 바인딩을 갖지 않는다.

  화살표 함수 내부에서 this를 참조하면 상위 스코프인 this를 그대로 따르게 된다.

  ```js
  class Component extends React.Component {
    constructor(props) {
      super(props)
      this.state = {
        conter: 1,
      }
    }

    functionCountUp() {
      console.log(this) // undefined
      this.setState((prev) => ({counter: prev.counter + 1}))
    }

    ArrorFunctionCountUp = () => {
      console.log(this) // class Component
      this.setState((prev) => ({counter: prev.counter + 1}))
    }

    render() {
      return (
        <div>
          {/* Cannot read properties of undefined (reading 'setState') */}
          <button onClick={this.functionCountUp}>일반 함수</button>
          {/* 정상적으로 작동한다. */}
          <button onClick={this.ArrorFunctionCountUp}>화살표 함수</button>
        </div>
      )
    }
  }
  ```

> **this** <br>
> 자신이 속한 객체나 자신이 생성할 인스턴스를 가리키는 값이다. <br>
> 이 this는 화살표 함수 이전까지는 함수를 정의할 대 결정되는 것이 아니라, 함수가 어떻게 호출되느냐에 따라 동적으로 결정된다. 만역 함수가 일반 함수로서 호출된다면, 그 내부의 this는 전역 객체를 가리키게 된다.

<br>

별도의 작업을 추가로 하지 않고 this를 접근할 수 있는 방법이 바로 화살표 함수인 것이다. 이러한 차이점은 바벨에서도 확인할 수 있다.

```js
// before:
const hello = () => {
  console.log(this)
}

function hi() {
  console.log(this)

}

// after: 바벨에서는 이렇게 변환한다.
var _this = void 0

var hello = function hello() {
  // 바벨에서 화살표 함수 내부의 _this 자체를 undefined로 바꿔버린다.
  console.log(_this)
}

function hi() {
  console.log(this)
}
```

화살표 함수는 this가 선언되는 시점에 이미 상위 스코프로 결정돼 있어 미리 _this를 받아서 사용하는 모습과 다르게, 일반 함수는 호출하는 런타임 시점에 결정되는 this를 그대로 따르는 모습이다.

<br>

## **다양한 함수 살펴보기**

<strong class="p_">즉시 실행 함수</strong>

즉시 실행 함수는 말 그래도 함수를 정의하고 그 순간 즉시 실행되는 함수를 의미한다. 단 한번만 호출되고, 다시금 호출할 수 없는 함수다.

```js
(function (a, b) {
  return a + b
})(10, 24); // 34

((a, b) => {
  return a + b
},
)(10, 24) // 34
```

즉시 실행 함수는 한 번 선언하고 호출된 이후부터는 더 이상 재호출이 불가능하다. 그래서 일반적으로는 즉시 실행 함수에 이름을 붙이지 않는다.

이러한 즉시 실행 함수의 특성을 활용하면 글로벌 스코프를 오명시키지 않는 독립적인 함수 스코프를 운영할 수 있다는 장점을 얻을 수 있다.

<br>

<strong class="p_">고차 함수</strong>

앞서 언급했듯이 자바스크립트 함수가 일급 객체라는 특징을 할용하면 함수를 인수로 받거나 결과로 새로운 함수를 반환시킬 수 있다. 이런 역할을 하는 함수를 고차 함수(Higher Order Function)라고 한다. 

```js
// 함수를 매개변수로 받는 대표적인 고차 함수, Arror.prototype.map
const doubledArray = [1, 2, 3].map((item) => item * 2)

doubledArray // [2, 4, 6]

// 험수를 반환하는 고차 함수의 예
const add = function(a) {
  // a가 존재하는 클로저를 생성
  return function (b) {
    // b를 인수로 받아 두 합을 반환하는 또 다른 함수를 생성
    return a + b
  }
}

add(1)(3) // 4
```

이러한 특징을 활용해 추후에 다룰 함수형 컴포넌트를 인수로 받아 새로운 함수형 컴포넌트를 반환하는 고차 함수를 만들 수 있다.

이런 컴포넌트를 고차 함수와 유사하게 고차 컴포넌트(Higher Order Component)라고 부르는데, 고차 함수형 컴포넌트를 만들면 컴포넌트 내부에서 공통으로 괸리되는 로직을 분리해 관리할 수 있어 효율적으로 리팩토링 할 수 있다.

<br>

## **함수를 만들 때 주의해야 할 사항**

<strong class="p_">함수의 부수 효과를 최대한 억제하라</strong>

함수의 부수 효과(side-effect)란 함수 내의 작동으로 인해 함수가 아닌 함수 외부에 영향을 끼치는 것을 의미한다.

- 부수 효과가 없는 함수를 순수 함수

- 부수 효과가 존재하는 함수를 비순수 함수

순수 함수는 부수 효과가 없고, 언제 어디서 어떠한 상황에서도 동일한 인수를 받으면 동일한 결과를 반환해야 한다. 그리고 이러한 작동 와중에 외부에 어떠한 영향도 미쳐서는 안 된다.

```jsx
function PureComponent(props) {
  const {a, b} = props
  return <div>{a + b}</div>
}
```

부수 효과는 웹 애플리케이션 개발에 있어 피할 수 없는 요소 중 하나다.

부수 효과를 만드는 것은 애플리케이션을 만들면서 피할 수 없는 요소지만 이러한 부수 효과를 최대한 억제할 수 있는 방향으로 함수를 설계해야 한다. 리액트의 관점에서 본다면 부수 효과를 처리하는 훅인 useEffect의 작동을 최소화하는 것이 그 일환이라 할 수 있다. 

useEffect의 사용은 피할 수 없지만 최소한의 줄임으로써 함수의 역할을 좁히고, 버그를 줄이며, 컴포넌트의 안정성을 높일 수 있다.

<br>

<strong class="p_">가능한 한 함수를 작게 만들어라</strong>

ESLint에는 max_lintes-per-function이라는 규칙이 있다.

함수당 코드의 길이가 길어질수록 코드 냄새(문제를 일으킬 여지가 있는 코드)가 날 확률이 커지고, 내부에서 무슨 일이 일어나는지 추적하기 어려워진다. 이 규칙에서는 기본값으로 50줄 이상이 넘어가면 과독하게 커진 함수로 분류하고 경고 메시지를 출력한다.

하나의 함수에서 너무나 많은 일을 하지 않게 하는 것이다.

함수는 하나의 일을, 그 하나만 잘하면 된다.(Do One Thing and Do It Well). 그것이 함수의 원래 목적인 재사용성을 높일 수 있는 방법이다.

<br>

<strong class="p_">누구나 이해할 수 있는 이름을 붙여라</strong>

함수나 변수에 이름을 붙이는 건 시간이 갈수록 어려워지는 문제다. 나만 보고 이해하는 프로젝트를 만들 때 혹은 프로젝트 첫 삽을 뜨고 얼마 되지 않았을 때에는 크게 문제가 되지 않지만, 점차 코드가 커지고 비즈니스 로직이 들어가는 코드가 많아질수록 더욱 어려움에 빠지게 된다.

가능한 한 함수 이름은 간결하고 이해하기 쉽게 붙이는 것이 좋다.

또한, 리액트에서 사용하는 `useEffect`나 `useCallback` 등의 혹에 넘겨주는 콜백 함수에 네이밍을 붙여준다면 가독성에 도움이 된다.

```tsx
useEffect(function apiRequest() {
 // ... do something
}, [])
```

useEffect의 콜백 함수에 이름을 붙여준다고 한들 apiRequest()와 같은 형태로 호출하거나 접근할 수 있는 것은 아니다. 

그러나 useEffect 같은 부수 효과를 일으키는 함수가 많아질수록 굳이 useEffect 코드를 유심히 살표보지 않더라도 어떤 일을 하는지, 도 어떻게 작동하는지를 단번에 알아채는데 도움이 될 것이다.
