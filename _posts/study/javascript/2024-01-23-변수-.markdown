---
layout: post
related_posts:
  - /study/javascript
title: 변수
categories:
  - study
  - javascript
image: /assets/img/javascript/modern-javascript-book.png
permalink: '/:categories/:year/:month/:day/:title/'
description: >
  모던 자바스크립트 Deep Dive: 자바스크립트의 기본 개념과 동작 원리 - 04장 변수
---

* toc
{:toc}

# 1. 변수란 무엇인가? 왜 필요한가?
- <span style="color:red">변수</span>는 프로그래밍 언에에서 데이터를 관리하기 위한 핵심 개념이다. 
<br/>
- 자바스크립트 코드를 `계산(평가,evaluation)`하려면 먼저 10, 20, + 라는 `기호(리터럴,literal과 연산자,operator)`의 의미를 알고 있어야 하며, 10 * 20이라는 `식(표현식,expression)`의 의미도 `해석(파싱,parsion)`할 수 있어야 한다.

> 메모리(memory)는 데이터를 저장할 수 있는 메모리 셀(memory)의 집합체다.

<br/>

<img src="/assets/img/javascript/memory_cell.png" />

<br/>


메모리 셀 하나의 크기는 1바이트(8비트)이며, 컴퓨터는 메모리 셀의 크기, 즉 1바이트 단위로 데이터를 저장(write)하거나 읽어(read)들인다.

각 셀은 고유의 메모리 주소(memory address)를 갖는다. 메모리 주소는 메모리 공간의 위치를 나타내며, 0부터 시작해서 메모리의 크기만큼 정수로 표현된다. 

컴퓨터는 모든 데이터를 2진수로 처리한다. 따라서 메모리에 저장되는 데이터는 데이터의 종류(숫자, 텍스트, 이미지, 동영상 등)와 상관없이 모두 2진수로 저장된다.

성공적으로 연산이 끝났고 연산 결과도 메모리에 저장되어있지만 문제가 있다. CPU가 연산해서 만들어낸 숫자 값을 재사용할 수 없다는 것이다.

**메모리 주소를 통해 값에 직접 접근하는 것은 치명적 오류를 발생시킬 가능성이 높은 매우 위험한 일이다.** 만약  실수로 운영체제가 사용하고 있는 값을 변경하면 시스템을 멈추게 하는 치명적인 오류가 발생할 수도 있다. 따라서 **자바스크립트는 개발자의 직접적인 메모리 제어를 허용하지 않는다.**

값이 저장될 메모리 주소는 코드는 코드가 실행될 대 메모리의 상황에 따라 임의로 결정된다. **따라서 메모리 주소를 통해 값에 직접 접근하려는 시도는 올바른 방법이 아니다.**

<br>

> **변수**는 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 도는 그 메모리 공간을 식별하기 위해 붙인 이름을 말한다.

<br>

변수는 프로그래밍 언어에서 값을 저장하고 참조하는 메커니즘으로, **값의 위치를 가리키는 상징적인 이름**이다. 따라서 개발자가 직접 메모리 주소를 통해 값을 저장하고 참조할 필요가 없고 변수를 통해 안전하게 값에 접근할 수 있다.

<br/>

```javascript
// 변수는 하나의 값을 저장하기 위한 수단이다.
var userId = 1;
var userName = 'Lee';

// 객체나 배열 같은 자료구조를 사용하면 여러 개의 값을 하나로 그룹화해서 하나의 값처럼 사용할 수 있다.
var user = { id: 1, name: 'Lee' };
var users =  [
  { id: 1, name: 'Lee' },
  { id: 2, name: 'Kim' }
];
```

<br/>

<img src="/assets/img/javascript/memory_cell.png" />

<br/>

- 메모리 공간에 저장된 값을 식별할 수 있는 고유한 이름을 **변수 이름**
- 변수에 저장된 값을 **변수 값**
- 변수에 값을 저장하는 것을 **할당(assignment,대입,저장)**
- 변수에 저장된 값을 읽어 들이는 것을 **참조(reference)**

- - -

# 2. 식별자

> 변수 이름을 **식별자(identifier)**라고도 한다. **식별자는 어떤 값을 구별해서 식별할 수 있는 고유한 이름을 말한다.**

<br/>

- **식별자는 값이 아니라 메모리 주소를 기억하고 있다.**
- 식별자로 값을 구별해서 식별한다는 것은 식별자가 기억하고 있는 메모리 주소를 통해 메모리 공간에 저장된 값에 접근할 수 있다는 의미다.

<br>

식별자라는 용어는 이름에만 국한해서 사용하지 않는다. 예를 들어 변수, 함수, 클래스 등의 이름은 모두 식별자다.

- 변수이름으로는 메모리 상에 존재하는 변수 값을 식별할 수 있다.
- 함수이름으로는 메모리 상에 존재하는 함수(자바스크립트에서 함수는 값이다)를 식별할 수 있다.

즉, 메모리 상에 존재하는 어떤 값을 식별할 수 있는 이름은 모두 식별자라고 한다.

- - -

# 3. 변수 선언

>변수 선언(variable declaration)이란 변수를 생성하는 것을 말한다.

<br/>

값을 저장하기 위한 메모리 공간을 확보(allocate)하고 변수 이름과 확보된 메모리 공간의 주소를 연결(name binding)해서 값을 저장할 수 있게 준비하는 것이다.

**변수를 선언할 때는 `var`, `let`, `const` 키워드를 사용한다.**

## var 키워드의 단점

- 블록 스코프(block-level scope)를 지원하지 않고 함수 레벨 스코프(function-level scope)를 지원한다는 것이다.

이로 인해 의도치 않게 전역 변수가 선언되어 심각한 부작용이 발생하기도 한다.

## 변수 선언
```javascript
var score; // 변수 선언(변수 선언문)
```

<br>

<img src="/assets/img/javascript/variable.png"/>

<br>

**자바스크립트 엔진의 변수 선언 단계**

1. **선언 단계** : 변수 이름을 등록해서 자바스크립트 엔진에 변수의 존재를 알린다.
2. **초기화 단계** : 값을 저장하기 위해 메모리 공간을 확보하고 암묵적으로 undefined를 할당해 초기화한다.

만약 초기화 단계를 거치지 않으면 확보된 메모리 공간에는 이전에 다른 애플리케이션이 사용했던 값을 **쓰레기 값(garbage value)**이라 한다.

만약 선언하지 않은 식별자에 접근하면 **ReferenceError(참조 에러)**가 발생한다.

> **ReferenceError(참조 에러)**<br>
> 식별자를 통해 값을 참조하려 했지만 자바스크립트 엔진이 등록된 식별자를 찾을 수 없을 때 발생하는 에러다.