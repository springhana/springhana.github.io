---
layout: post
related_posts:
  - _posts/study/javascript/2024-07-16-RegExp.markdown
title: String
categories:
  - study
  - javascript
image: /assets/img/javascript/modern-javascript-book.png
permalink: '/:categories/:year/:month/:day/:title/'
description: >
  모던 자바스크립트 Deep Dive: 자바스크립트의 기본 개념과 동작 원리 - 32장 String
---

* toc
{:toc}

# 1. String 생성자 함수

표준 빌트인 객체인 `String` 객체는 생성자 함수 객체다. `new` 연산자와 함께 호출하여 `String` 인스턴스를 생성할 수 있다.

인수를 전달하지 않고 `new` 연산자와 함께 호출하면 `[[StringData]]` 내부 슬롯에 빈 문자열을 할당한 `String` 레퍼 객체를 생성한다.

```js
const strObj = new String();
console.log(strObj); // String {length: 0, [[PrimitiveValue]]: ""}
```

- ES5에서는 `[[StringData]]`를 `[[PrimitiveValue]]`라 불렀다.

`String` 생성자 함수의 인수로 문자열로 전달하면서 `new` 연산자와 함께 호출하면 `[[StringData]]` 내부 슬롯에 인수로 전달받은 문자열을 할당한 `String` 레퍼 객체를 생성한다.

```js
const strObj = new String('Lee');
console.log(strObj);
// String {0: "L", 1: "e", 2: "e", length: 3, [[PrimitiveValue]]: "Lee"}
```

배열과 유사하게 인덱스를 사용하여 각 문자에 접근할 수 있다.

```js
console.log(strObj[0]); // L
```

문자열은 원시 값이므로 변경할 수 없다.

```js
// 문자열은 원시값이므로 변경할 수 없다. 이때 에러가 발생하지 않는다.
strObj[0] = 'S';
console.log(strObj); // 'Lee'
```

인수로 문자열이 아닌 값을 전달하면 인수를 문자열로 강제 변환한 후, `[[StringData]]` 내부 슬롯에 변환된 문자열을 할당한 `String` 레퍼 객체를 생성한다.

```js
let strObj = new String(123);
console.log(strObj);
// String {0: "1", 1: "2", 2: "3", length: 3, [[PrimitiveValue]]: "123"}

strObj = new String(null);
console.log(strObj);
// String {0: "n", 1: "u", 2: "l", : "l", length: 4, [[PrimitiveValue]]: "null"}
```

`new` 연산자를 사용하지 않고 `String` 생성자 함수를 호출하면 `String` 인스턴스가 아닌 문자열을 반환한다. 

- 이를 이용하면 명시적으로 타입을 반환하기도 한다.

```js
// 숫자 타입 => 문자열 타입
String(1);        // -> "1"
String(NaN);      // -> "NaN"
String(Infinity); // -> "Infinity"

// 불리언 타입 => 문자열 타입
String(true);  // -> "true"
String(false); // -> "false"
```

---
# 2. length 프로퍼티

`length` 프로퍼티는 문자열의 문자 개수를 반환한다.

```js
'Hello'.length;    // -> 5
'안녕하세요!'.length; // -> 6
```

인덱스를 나타내는 숫자를 프로퍼티 키로, 각 문자를 프로퍼티 값으로 가지므로 String 래퍼 객체는 유사 배열 객체다.

---
# 3. String 메서드

`String` 객체에는 원본 `String` 래퍼 객체를 직접 변경하는 메서드는 존재하지 않기 때문에 언제나 새로운 문자열을 반환한다.

- 문자열은 변경 불가능한 원시 값이기 때문에 **String 래퍼 객체도 읽기 전용 객체로 제공한다.**

```js
const strObj = new String('Lee');

console.log(Object.getOwnPropertyDescriptors(strObj));
/* String 래퍼 객체는 읽기 전용 객체다. 즉, writable 프로퍼티 어트리뷰트 값이 false다.
{
  '0': { value: 'L', writable: false, enumerable: true, configurable: false },
  '1': { value: 'e', writable: false, enumerable: true, configurable: false },
  '2': { value: 'e', writable: false, enumerable: true, configurable: false },
  length: { value: 3, writable: false, enumerable: false, configurable: false }
}
*/
```

## String.prototype.indexOf

`indexOf` 메서드는 대상 문자열에서 인수로 전달받은 문자열을 검색하여 첫 번째 인덱스를 반환한다. 

- 검색에 실패하면 `-1`을 반환한다.

```js
const str = 'Hello World';

// 문자열 str에서 'l'을 검색하여 첫 번째 인덱스를 반환한다.
str.indexOf('l'); // -> 2


// 문자열 str에서 'or'을 검색하여 첫 번째 인덱스를 반환한다.
str.indexOf('or'); // -> 7

// 문자열 str에서 'x'를 검색하여 첫 번째 인덱스를 반환한다. 검색에 실패하면 -1을 반환한다.
str.indexOf('x'); // -> -1
```

2번째 인수로 검색을 시작할 인덱스를 전달할 수 있다.

```js
// 문자열 str의 인덱스 3부터 'l'을 검색하여 첫 번째 인덱스를 반환한다.
str.indexOf('l', 3); // -> 3
```

## String.prototype.search

`search` 메서드는 대상 문자열에서 인수로 전달받은 정규 표현식과 매치하는 문자열을 검색하여 일치하는 문자열의 인덱스를 반환한다.

- 검색에 실패하면 `-1`을 반환한다.

```js
const str = 'Hello world';

// 문자열 str에서 정규 표현식과 매치하는 문자열을 검색하여 일치하는 문자열의 인덱스를 반환한다.
str.search(/o/); // -> 4
str.search(/x/); // -> -1
```

## String.prototype.includes

ES6에서 도입된 `includes` 메서드는 대상 문자열에 인수로 전달받은 문자열이 포함되어 있는지 확인한다.

- 결과를 `true`  또는 `false`로 반환한다.

```js
const str = 'Hello world';

str.includes('Hello'); // -> true
str.includes('');      // -> true
str.includes('x');     // -> false
str.includes();        // -> false
```

2번째 인수로 검색을  시작할 인덱스를 전달할 수 있다.

```js
const str = 'Hello world';

// 문자열 str의 인덱스 3부터 'l'이 포함되어 있는지 확인
str.includes('l', 3); // -> true
str.includes('H', 3); // -> false
```

## String.prototype.startsWith

ES6에서 도입된 `startWith` 메서드는 대상 문자열이 인수로 전달받은 문자열로 시작하는지 확인한다.

- 결과를 `true`  또는 `false`로 반환한다.

```js
const str = 'Hello world';

// 문자열 str이 'He'로 시작하는지 확인
str.startsWith('He'); // -> true
// 문자열 str이 'x'로 시작하는지 확인
str.startsWith('x'); // -> false
```

2번째 인수로 검색을 시작할 인덱스를 전달할 수 있다.

```js
// 문자열 str의 인덱스 5부터 시작하는 문자열이 ' '로 시작하는지 확인
str.startsWith(' ', 5); // -> true
```

## String.prototype.endWith

ES6에서 도입된 `endsWith` 메서드는 대상 문자열이 인수로 전달받은 문자열로 끝나는지 확인한다.

- 결과를 `true`  또는 `false`로 반환한다.

```js
const str = 'Hello world';

// 문자열 str이 'ld'로 끝나는지 확인
str.endsWith('ld'); // -> true
// 문자열 str이 'x'로 끝나는지 확인
str.endsWith('x'); // -> false
```

2번째 인수로 검색할 문자열의 길이를 전달할 수 있다.

```js
// 문자열 str의 처음부터 5자리까지('Hello')가 'lo'로 끝나는지 확인
str.endsWith('lo', 5); // -> true
```

## String.prototype.charAt

`charAt` 메서드는 대상 문자열에서 인수로 전달받은 인덱스에 위치한 문자를 검색하여 반복한다.

```js
const str = 'Hello';

for (let i = 0; i < str.length; i++) {
  console.log(str.charAt(i)); // H e l l o
}
```

인덱스는 문자열의 범위(0 ~ 문자열 길이-1) 사이의 정수이어야 한다.

- 벗어나면 빈 문자열을 반환한다.

```js
// 인덱스가 문자열의 범위(0 ~ str.length-1)를 벗어난 경우 빈문자열을 반환한다.
str.charAt(5); // -> ''
```

## String.prototype.substring

`substring` 메서드는 대상 문자열에서 첫 번째 인수로 전달받은 인덱스에 위치하는 문자부터 두 번째 인수로 전달받은 인덱스에 위치하는 문자의 바로 이전 문자까지의 부분 문자열을 반환한다.

```js
const str = 'Hello World';

// 인덱스 1부터 인덱스 4 이전까지의 부분 문자열을 반환한다.
str.substring(1, 4); // -> ell
```

메서드의 두 번째 인수는 생략할 수 있다. (마지막 문자까지 반환)

```js
const str = 'Hello World';

// 인덱스 1부터 마지막 문자까지 부분 문자열을 반환한다.
str.substring(1); // -> 'ello World'
```

첫 번째 인수는 두 번째 인수보다 작은 정수이어야 정상이지만 다음과 같은 인수를 전달하여도 정상 동작한다.

1. 첫 번째 인수 > 두 번째 인수인 경우 두 인수는 교환
2. 인수 < 0 또는 NaN인 경우 0으로 취급
3. 인수 > 문자열의 길이인 경우 인수는 문자열의 길이로 취급

```js
const str = 'Hello World'; // str.length == 11

// 첫 번째 인수 > 두 번째 인수인 경우 두 인수는 교환된다.
str.substring(4, 1); // -> 'ell'

// 인수 < 0 또는 NaN인 경우 0으로 취급된다.
str.substring(-2); // -> 'Hello World'

// 인수 > 문자열의 길이(str.length)인 경우 인수는 문자열의 길이(str.length)으로 취급된다.
str.substring(1, 100); // -> 'ello World'
str.substring(20); // -> ''
```

## String.prototype.slice

`slice` 메서드는 `substring` 메서드와 동일하게 동작하지만 `slice`는 음수인 인수를 전달할 수 있다.

음수인 인수를 전달하면 대상 문자열의 가장 뒤에서부터 시작하여 문자열을 잘라내어 반환한다.

```js
const str = 'hello world';

// substring과 slice 메서드는 동일하게 동작한다.
// 0번째부터 5번째 이전 문자까지 잘라내어 반환
str.substring(0, 5); // -> 'hello'
str.slice(0, 5); // -> 'hello'

// 인덱스가 2인 문자부터 마지막 문자까지 잘라내어 반환
str.substring(2); // -> 'llo world'
str.slice(2); // -> 'llo world'

// 인수 < 0 또는 NaN인 경우 0으로 취급된다.
str.substring(-5); // -> 'hello world'
// slice 메서드는 음수인 인수를 전달할 수 있다. 뒤에서 5자리를 잘라내어 반환한다.
str.slice(-5); // ⟶ 'world'
```

## String.prototype.toUpperCase

`toUpperCase` 메서드는 대상 문자열을 모두 대문자로 변경한 문자열을 반환한다.

```js
const str = 'Hello World!';

str.toUpperCase(); // -> 'HELLO WORLD!'
```

## String.prototype.toLowerCase

`toLowerCase` 메서드는 대상 문자열을 모두 소문자로 변경한 문자열을 반환한다.

```js
const str = 'Hello World!';

str.toLowerCase(); // -> 'hello world!'
```

## String.prototype.trim

`trim` 메서드는 대상 문자열 앞뒤에 공백 문자가 있을 경우 이를 제거한 문자열을 반환한다.

```js
const str = '   foo  ';

str.trim(); // -> 'foo'
```

`String.prototype.trimStart`과 `String.prototype.trimEnd`를 사용하면 대상 문자열 앞 또는 뒤에 공백 문자가 있을 경우 이를 제거한 문자열을 반환한다.

```js
const str = '   foo  ';

// String.prototype.{trimStart,trimEnd} : Proposal stage 4
str.trimStart(); // -> 'foo  '
str.trimEnd();   // -> '   foo'
```

## String.prototype.repeat

ES6에서 도입된 `repeat` 메서드는 대상 문자열을 인수로 전달받은 정수만큼 반복해 연결한 새로운 문자열을 반환한다.

- 인수로 전달받은 정수가 0이면 빈 문자열을 반환하고, 음수이면 `RangeError`를 발생한다.
- 기본값은 0이다.

```js
const str = 'abc';

str.repeat();    // -> ''
str.repeat(0);   // -> ''
str.repeat(1);   // -> 'abc'
str.repeat(2);   // -> 'abcabc'
str.repeat(2.5); // -> 'abcabc' (2.5 → 2)
str.repeat(-1);  // -> RangeError: Invalid count value
```

## String.prototype.replace

`replace` 메서드는 대상 문자열에서 첫 번째 인수로 전달받은 문자열 또는 정규표현식을 검색하여 두 번째 인수로 전달한 문자열로 치환한 문자열을 반환한다.

```js
const str = 'Hello world';

// str에서 첫 번째 인수 'world'를 검색하여 두 번째 인수 'Lee'로 치환한다.
str.replace('world', 'Lee'); // -> 'Hello Lee'
```

검색된 문자열이 여럿 존재할 경우 첫 번째로 검색된 문자열만 치환한다.

```js
const str = 'Hello world world';

str.replace('world', 'Lee'); // -> 'Hello Lee world'
```

## String.prototype.split

`split` 메서드는 대상 문자열에서 첫 번째 인수로 전달한 문자열 또는 정규 표현식을 검색하여 문자열을 구분한 후 분리된 각 문자열로 이루어진 배열을 반환한다.

- 빈 문자열로 전달하면 각 문자를 모두 분리
- 인수를 생략하면 대상 문자열 전체를 단일 요소로 하는 배열을 반환

```js
const str = 'How are you doing?';

// 공백으로 구분(단어로 구분)하여 배열로 반환한다.
str.split(' '); // -> ["How", "are", "you", "doing?"]

// \s는 여러 가지 공백 문자(스페이스, 탭 등)를 의미한다. 즉, [\t\r\n\v\f]와 같은 의미다.
str.split(/\s/); // -> ["How", "are", "you", "doing?"]

// 인수로 빈 문자열을 전달하면 각 문자를 모두 분리한다.
str.split(''); // -> ["H", "o", "w", " ", "a", "r", "e", " ", "y", "o", "u", " ", "d", "o", "i", "n", "g", "?"]

// 인수를 생략하면 대상 문자열 전체를 단일 요소로 하는 배열을 반환한다.
str.split(); // -> ["How are you doing?"]
```

두 번째 인수로 배열의 길이를 지정할 수 있다.

```js
// 공백으로 구분하여 배열로 반환한다. 단, 배열의 길이는 3이다
str.split(' ', 3); // -> ["How", "are", "you"]
```