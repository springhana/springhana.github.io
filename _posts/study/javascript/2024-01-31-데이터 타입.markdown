---
layout: post
related_posts:
  - _posts/study/javascript/2024-01-31-표현식과 문.markdown
  - _posts/study/javascript/2024-02-01-연산자.markdown
title: 데이터 타입
categories:
  - study
  - javascript
image: /assets/img/javascript/modern-javascript-book.png
permalink: '/:categories/:year/:month/:day/:title/'
description: >
  모던 자바스크립트 Deep Dive: 자바스크립트의 기본 개념과 동작 원리 - 06장 데이터 타입
---

* toc
{:toc}

**데이터 타입**(data type)(줄여서 '타입'이라고도 한다)은 **값의 종류**를 말한다.

데이터 타입은
- 원시 타입(primitive type)
- 객체 타입(object/reference type)

으로 분류 된다.

<br>

<table>
  <tr>
    <td>구분</td> 
    <td>데이텉 타입</td>
    <td>설명</td>
  </tr>

  <tr>
    <td rowspan="6">원시 타입</td>
    <td>숫자(number) 타입</td>
    <td>숫자, 정수와 실수 구분 없이 하나의 숫자 타입만 존재</td>
  </tr>

  <tr>
    <td>문자(string) 타입</td>
    <td>문자열</td>
  </tr>

  <tr>
    <td>불리언(boolean) 타입</td>
    <td>논리적 참(true)과 거짓(false)</td>
  </tr>

  <tr>
    <td>undefined 타입</td>
    <td>var 키워드로 선언된 변수에 암죽적으로 할당되는 값</td>
  </tr>

  <tr>
    <td>null 타입</td>
    <td>값이 없다는 것을 의도적으로 명시할 때 사용하는 값</td>
  </tr>

  <tr>
    <td>심벌(Symbol) 타입</td>
    <td>ES6에서 추가된 7번째 타입</td>
  </tr>  

  <tr>
    <td colspan="2">객체 타입</td>
    <td>객체, 함수, 배열 등</td>
  </tr>
</table>

<br>

# 1. **숫자 타입**

> 자바스크립트는 독특하게 **하나의 숫자 타입**만 존재한다. 

```js
// 모든 숫자 타입이다.
var integer = 10;   // 정수
var double = 10.12; // 실수
var negative = -20; // 음의 정수
```

**모든 수를 실수로 처리**하며, 정수만 표현하기 위한 테이터 타입이 별도로 존재하지 않는다.

<br>

```js
var binary = 0b01000001;
var octal = 0o101;
var hex = 0x41;

// 표기법만 다를 뿐 모두 같은 값이다.
console.log(binary); // 2진수
console.log(octal);  // 8진수
console.log(hex);    // 16진수
console.log(binary === octal); // true
console.log(octal === hex);    // true
```

자바스크립트의 숫자 타입은 정수만을 위한 타입이 없고 **모든 수를 실수로 처리한다.**

숫자 타입은 추가적으로 세가지 특별한 값도 표현할 수 있다.

- `Infinity`: 양의 무한대
- `-Infinity`: 음의 무한대
- `NaN`: 산술 연산 불가(not-a-number)

- - -

# 2. **문자열 타입**

> 문자열(string)타입은 텍스트 데이터를 나타내는 데 사용한다. 

문자열은
- 작은따옴표 ('')
- 큰따옴표 ("")
- 백틱 (``)

으로 텍스트를 감싼다.

```js
// 문자열 타입
var string;
string = '문자열' // 작은따옴표
string = "문자열" // 큰따옴표
string = `문자열` // 백틱(ES6)

string  = '작은따옴표로 감싼 문자열 내의 "큰따옴표"는 문자열로 인식된다.'
string  = '큰따옴표로 감싼 문자열 내의 "작은따옴표"는 문자열로 인식된다.'
```

문자열을 따옴표로 감싸는 이유는 키워드나 식별자 같은 토큰을 구분하기 위해서다.

- 만약 문자열을 따옴표로 감싸지 않으면 자바스크립트 엔진은 키워드나 식별자 같은 `토큰`으로 인식한다.

- 자바스크립트의 문자열은 원시 타입이며, 변경 불가능한 값(immutable value)이다.

- - -

# 3. **템플릿 리터럴**

>ES6부터 템플릿 리터럴(template literal)이라고 하는 새로운 문자열 표기법이 도입되었다.

- 멀티라인 문자열(multi-line string)
- 표현식 삽입(expression interpolation)
- 태그드 템플릿(tegged template)

**템플릿 리터럴은 런타임에 일반 문자열로 변환되어 처리된다.**

>템플릿 리터럴은 백틱 (``)을 사용해 표현한다.

## **멀티라인 템플릿**

템플릿 리터럴 내에서는 이스케이프 시퀀스를 사용하지 않고도 **줄바꿈이 허용된다**.

```js
var template =`<ul>
  <li><a href="#">Home</a></li>
</ul>`

console.log(template)

// template 출력
//<ul>
//  <li><a href="#">Home</a></li>
//</ul>
```

## **표현식 삽입**

문자열은 문자열 연산자 `+`를 사용해 연결할 수 있다. <br>
`+` 연산자는 피연사자 중 하나 이상이 문자열인 경우 문자열 연결 연산자로 동작한다.

```js
var first = 'Ung-mo'
var last = 'Lee'

// ES5: 문자열 연결
console.log('My name is ' + frist + ' ' + last + '.'); // My name is Ung-mo Lee.
```

**템플릿 리터럴 내에서는 표현식 삽입(expression interpolation)을 통해 간단히 문자열을 삽입할 수 있다.**

```js
var first = 'Ung-mo'
var last = 'Lee'

// ES6: 표현식 삽입
console.log(`My name is ${frist} ${last}.`); // My name is Ung-mo Lee.
```

표현식 삽입은 **반드시 템플릿 리터럴 내에서 사용**해야 한다. 

- - -

# 4.**불리언 타입**

> 불리언 타입의 값은 논리적 참, 거짓을 나타내는 true와 false뿐이다.

```js
var foo = true;
console.log(foo); // true

foo = false;
console.log(foo) // false
```

- - -

# 5. **undefined 타입**

>undefined 타입의 값은 undefined가 유일하다.

`var` 키워드로 선언한 변수는 암묵적으로 `undefined`로 초기화된다.

변수 선언에 의해 확보된 메모리 공간을 처음 할당이 이뤄질 때까지 빈 상태(대부분 비어 있지 않고 쓰레기 값(garbage value)로 내버려두지 않고 자비스크립트 엔진이 `undefined`로 초기화한다.

```js
var foo;
console.log(foo); // undefined
```

이처럼 `undefined`는 개발자가 의도적으로 할당하기 위한 값이 아니라 자바스크립트 엔진이 변수를 초기화할 때 사용하는 값이다.

**변수에 값이 없다는 것을 명시하고 싶을 때는 `undefined`를 할당한느 것이 아니라 `null`을 할당한다.**

# 6. **null 타입**

> null 타입의 값은 null이 유일하다.

프로그래밍 언어에서 null은 변수에 값이 없다는 것을 의도적으로 명시(의도적 부재(intentional absence))할 때 사용한다. **변수에 null을 할당하는 것은 변수가 이전에 참조하던 값을 더 이상 참조하지 않겠다는 의미다.**

```js
var foo = 'Lee';

// 이전 참조를 제거. foo 변수는 더 이상 'Lee'를 참조하지 않는다.
// 유용해 보이지는 않는다. 변수의 스코프를 좁게 만들어 변수 자체를 재빨리 소멸시키는 편이 낮다.
foo = null
```

함수가 유효한 값을 반환할 수 없는 경우 null을 반환하기도 한다.

- - -

# 7.  **심벌 타입**

>심벌(Symbol)은 변경 불가능한 원시 타입의 값이다. <br>
>심벌 값은 다른값과 중복되지 않는 유일무이한 값이다. 따라서 주로 이름이 충돌한 위험이 없는 객체의 유일한 프로퍼티 키를 만들기 위해 사용한다.

<br>

심벌 이외의 원시 값은 리터럴을 통해 생성하지만 심벌은 Symbol 함수를 호출해 생성한다.

```js
// 심벌 값 생성
var key = Symbol('key');
console.log(typeof key); // symbol

// 객체 생성
var = obj = {};

// 이름이 충돌할 위험이 없는 유일무이한 값이 심벌을 프로퍼티 키로 사용한다.
obj[key] = 'value';
console.log(obj[key]); // value
```

- - -

# 8. **객체 타입**

자바스크립트의 데이터 타입은 크게 원시 타입과 객체 타입으로 분류한다.

>자바스크립트는 객체 기반의 언어이며, 자바스크립트를 이루고 있는 거의 모든 것이 객체라는 것이다.

- - -

# 9. **데이터 타입의 필요성**

## **데이터 타입에 의해 메모리 공간의 확보와 참조**

값은 메모리에 저장하고 참조할 수 있어야 한다. 메모리에 값을 저장하려면 확보해야 할 메모리 공간의 크기를 결정해야 한다. 

## **데이터 타입에 의한 값의 해석**

모든 값은 데이터 타입을 가지며, 메모리에 2진수, 즉 비트의 나열로 저장된다. 메모리에 저장된 값은 데이터 타입에 따라 다르게 해석될 수 있다.

데이터 타입이 필요한 이유

- 값을 저장할 때 확보해야 하는 메모리 공간의 크기를 결정하기 위해
- 값을 참조할 때 한 번에 읽어 들여야 할 메모리 공간의 크기를 결정하기 위해
- 메모리에서 읽어 들인 2진수를 어떻게 해석할지 결정하기 위해

<br>

- - -

# 10. **동적 타이핑**

## **동적 타입 언어와 정적 타입 언어**
C나 자바 같은 **정적 타입(static/strong type) 언어**는 변수를 선언할 때 변수에 할당할 수 있는 값의 종류, 즉 데이터 타입을 사전에 선언해야 한다. 이를 **명시적 타입 선언(explicit type declaration)** 이라 한다.

```java
// c 변수에는 1바이트 정수 타입의 값(-128 ~ 127)만 할당할 수 있다.
char c;

// num 변수에는 4바이트 정수 타입의 값(-2,124,483,648 ~ 2,124,483,647)만 할당할 수 있다.
int num;
```

정적 타입 언어는 변수의 타입을 변경할 수 없으며, 변수에 선언한 타입에 맞는 값만 할당할 수 있다. 정적 타입 언어는 컴파일 시점에 **타입 체크**(선언한 데이터 타입에 맞는 값을 할당했는지 검사하는 처리)를 수행한다.

자바스크립트는 정적 타입 언어와 다르게 변수를 선언할 대 타입을 선언하지 않는다.

자바스크립트의 변수는 정적 타입 언어와 같이 미리 선언한 데이터 타입의 값만 할당할 수 있는 것이 아니다.

**typeof** 연산자는 연산자 뒤에 위치한 피연산자의 데이터 타입을 문자열로 반환한다.

```js
var foo;
console.log(typeof foo);  // undefined

foo = 3;
console.log(typeof foo);  // number

foo = 'Hello';
console.log(typeof foo);  // string

foo = true;
console.log(typeof foo);  // boolean

foo = null;
console.log(typeof foo);  // object

foo = Symbol(); // 심벌
console.log(typeof foo);  // symbol

foo = {}; // 객체
console.log(typeof foo);  // object

foo = []; // 배열
console.log(typeof foo);  // object

foo = function () {}; // 함수
console.log(typeof foo);  // function
```

**typeof** 연산자로 변수를 연산하면 변수의 데이터 타입을 반환한다. 정확히 말하면 변수의 데이터 타입을 반환하는 것이 아니라 변수에 할당된 값의 데이터 타입을 반환하는 것이다.

**자바스크립트의 변수는 선언이 아닌 할당에 의해 타입이 결정(타입 추록(type inference))된다. 그리고 재할당에 의해 변수의 타입은 언제든지 동적으로 변할 수 있다.**

이러한 특징을 **동적 타이핑(dynamic typing)** 이라 한다.


자바스크립트를 정적 타입 언어와 구별하기 위해 **동적 타입(dynamic/week type) 언어**라 한다.

## **동적 타입 언어와 변수**

동적 타입 언어는 변수에 어떤 데이터 타입의 값이라도 자유롭게 할당할 수 있다.

변수 값은 언제든지 변경될 수 있기 때문에 복잡한 프로그램에서는 변화하는 변수 값을 추적하기 어려울 수 있다. 

그 뿐만 아니라 변수의 타입이 고정되어 있지 않고 동적으로 변하는 동적 타입 언어의 변수는 값의 변경에 의해 타입도 언제든지 변경될 수 있다. 따라서 동적 타입 언어의 변수는 **값을 확인하기 전에는 타입을 확실할 수 없다.**