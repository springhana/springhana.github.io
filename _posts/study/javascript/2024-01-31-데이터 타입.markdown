---
layout: post
related_posts:
  - _posts/study/javascript/2024-01-31-표현식과 문.markdown
  - _posts/study/javascript/2024-02-01-연산자.markdown
title: 데이터 타입
categories:
  - study
  - javascript
image: /assets/img/javascript/modern-javascript-book.png
permalink: '/:categories/:year/:month/:day/:title/'
description: >
  모던 자바스크립트 Deep Dive: 자바스크립트의 기본 개념과 동작 원리 - 06장 데이터 타입
---

* toc
{:toc}

**데이터 타입**(data type)(줄여서 '타입'이라고도 한다)은 **값의 종류**를 말한다.

자바스크립트(ES6)는 7개의 데이터 타입을 제공한다.

데이터 타입은
- 원시 타입(primitive type)
- 객체 타입(object/reference type)

으로 분류 된다.

<br>

<table>
  <tr>
    <td>구분</td> 
    <td>데이텉 타입</td>
    <td>설명</td>
  </tr>

  <tr>
    <td rowspan="6">원시 타입</td>
    <td>숫자(number) 타입</td>
    <td>숫자, 정수와 실수 구분 없이 하나의 숫자 타입만 존재</td>
  </tr>

  <tr>
    <td>문자(string) 타입</td>
    <td>문자열</td>
  </tr>

  <tr>
    <td>불리언(boolean) 타입</td>
    <td>논리적 참(true)과 거짓(false)</td>
  </tr>

  <tr>
    <td>undefined 타입</td>
    <td>var 키워드로 선언된 변수에 암죽적으로 할당되는 값</td>
  </tr>

  <tr>
    <td>null 타입</td>
    <td>값이 없다는 것을 의도적으로 명시할 때 사용하는 값</td>
  </tr>

  <tr>
    <td>심벌(Symbol) 타입</td>
    <td>ES6에서 추가된 7번째 타입</td>
  </tr>  

  <tr>
    <td colspan="2">객체 타입</td>
    <td>객체, 함수, 배열 등</td>
  </tr>
</table>

<br>

# 1. **숫자 타입**
> 자바스크립트는 독특하게 **하나의 숫자 타입**만 존재한다. <br>
> C나 자바의 경우, 정수(소수점 아하가 없는 숫자)와 실수(소수점 이하가 있는 숫자)를 구분해서 int, long, float, double 등과 같은 다양한 숫자 타입을 제공한다.

<br>

```js
// 모든 숫자 타입이다.
var integer = 10;   // 정수
var double = 10.12; // 실수
var negative = -20; // 음의 정수
```

ECMAScript 사양에 따르면 숫자 타입의 값은 배정밀도 64비트 부동소수점 형식을 따른다. 즉, **모든 수를 실수로 처리**하며, 정수만 표현하기 위한 테이터 타입(integer type)이 별도로 존재하지 않는다.

<br>

```js
var binary = 0b01000001;
var octal = 0o101;
var hex = 0x41;

// 표기법만 다를 뿐 모두 같은 값이다.
console.log(binary); // 2진수
console.log(octal);  // 8진수
console.log(hex);    // 16진수
console.log(binary === octal); // true
console.log(octal === hex);    // true
```

자바스크립트의 숫자 타입은 정수만을 위한 타입이 없고 **모든 수를 실수로 처리한다.**

숫자 타입은 추가적으로 세가지 특별한 값도 표현할 수 있다.
- `Infinity`: 양의 무한대
- `-Infinity`: 음의 무한대
- `NaN`: 산술 연산 불가(not-a-number)

<br>

- - -

# 2. **문자열 타입**

> 문자열(string)타입은 텍스트 데이터를 나타내는 데 사용한다. 문자열은 0개 이상의 16비트 유니코드 문자(UTF-16)의 집합으로 전 세계 대부분의 문자를 표현할 수 있다.

<br>

문자열은
- 작은따옴표 `('')`
- 큰따옴표 `("")`
- 백틱 `(``)`

으로 텍스트를 감싼다.

<br>

```js
// 문자열 타입
var string;
string = '문자열' // 작은따옴표
string = "문자열" // 큰따옴표
string = `문자열` // 백틱(ES6)

string  = '작은따옴표로 감싼 문자열 내의 "큰따옴표"는 문자열로 인식된다.'
string  = '큰따옴표로 감싼 문자열 내의 "작은따옴표"는 문자열로 인식된다.'
```

다른 타입의 값과 달리 문자열을 따옴표로 감싸는 이유는 키워드나 식별자 같은 토큰을 구분하기 위해서다.

- 만약 문자열을 따옴표로 감싸지 않으면 자바스크립트 엔진은 키워드나 식별자 같은 `토큰`으로 인식한다.

- C는 문자열 타입을 제고하지 않고 문자의 배열로 문자열을 표현하고, 자바는 문자열을 객체로 표현한다.

- 그러나 자바스크립트의 문자열은 원시 타입이며, 변경 불가능한 값(immutable value)이다.

<br>

- - -

# 3. **템플릿 리터럴**
>ES6부터 템플릿 리터럴(template literal)이라고 하는 새로운 문자열 표기법이 도입되었다.

템플릿 리터럴은 
- 멀티라인 문자열(multi-line string)
- 표현식 삽입(expression interpolation)
- 태그드 템플릿(tegged template)

등 편리한 문자열 처리 기능을 제공한다.

**템플릿 리터럴은 런타임에 일반 문자열로 변환되어 처리된다.**

>템플릿 리터럴은 백틱 `(``)`을 사용해 표현한다.

<br>

## **멀티라인 템플릿**
일반 문자열 내에서는 줄바꿈(개행)이 허용되지 않는다.

따라서 일반 문자열 내에서 줄바꿈 등의 공백(while space)을 표현하려면 백슬래시(\)로 시작하는 이스케이프 시퀀스(escape sequence)을 사용해야 한다.

|이스케이프 시퀀스|의미|
|---|---|
|\0|Null|
|\b|백스페이스|
|\f|폼 피드(From Feed): 프린터로 출력할 경우 다음 페이지의 시작지점으로 이동한다.|
|\n|개행(LF, Linte Feed): 다음 행으로 이동|
|\r|개행(CR, Carriage Return): 커서를 처음으로 이동|
|\t|탭(수평)|
|\v|탭(수직)|
|\uXXXX|유니코드, 예를 들어 '\u0041'은 'A'|
|\'|작은따옴표|
|\"|큰따옴표|
|\\|백슬래시|

> 개행(newline) 문자는 텍스트의 한 줄이 끝남을 표시하는 문자 또는 문자열이다. 개행 문자에는 라인 피드와 캐리지 리턴이 있다.<br>
> - 라인 피드(Line Feed) <br>
> (\n)는 커서를 정지한 상태에서 종이를 한 줄 올리는 것
> - 캐리지 리턴(Carriage Return) <br>
> (\r)은 종이를 움직이지 않고 커서를 맨 앞줄로 이동하는 것
>

<br>

```js
var template = `<ul>\n\t<li><a href="#">Home</a></li>\n</ul>`;

console.log(template);

// template 출력
//<ul>
//  <li><a href="#">Home</a></li>
//</ul>
```

일반 문자열과 달리 템플릿 리터럴 내에서는 이스케이프 시퀀스를 사용하지 않고도 **줄바꿈이 허용된다**.

```js
var template =`<ul>
  <li><a href="#">Home</a></li>
</ul>`

console.log(template)

// template 출력
//<ul>
//  <li><a href="#">Home</a></li>
//</ul>
```

<br>

## **표현식 삽입**
문자열은 문자열 연산자 `+`를 사용해 연결할 수 있다. <br>
`+` 연산자는 피연사자 중 하나 이상이 문자열인 경우 문자열 연결 연산자로 동작한다.

```js
var first = 'Ung-mo'
var last = 'Lee'

// ES5: 문자열 연결
console.log('My name is ' + frist + ' ' + last + '.'); // My name is Ung-mo Lee.
```

<br>

**템플릿 리터럴 내에서는 표현식 삽입(expression interpolation)을 통해 간단히 문자열을 삽입할 수 있다.**

```js
var first = 'Ung-mo'
var last = 'Lee'

// ES6: 표현식 삽입
console.log(`My name is ${frist} ${last}.`); // My name is Ung-mo Lee.
```

표현식 삽입은 **반드시 템플릿 리터럴 내에서 사용**해야 한다. 

<br>

- - -

# 4.**불리언 타입**
> 불리언 타입의 값은 논리적 참, 거짓을 나타내는 true와 false뿐이다.

<br>

```js
var foo = true;
console.log(foo); // true

foo = false;
console.log(foo) // false
```
불리언 타입의 값은 참과 거짓으로 구분되는 조건에 의해 프로그램의 흐름을 제어하는 조건문에서 자주 사용한다.

<br>

- - -

# 5. **undefined 타입**
>undefined 타입의 값은 undefined가 유일하다.

<br>

`var` 키워드로 선언한 변수는 암묵적으로 `undefined`로 초기화된다.

변수 선언에 의해 확보된 메모리 공간을 처음 할당이 이뤄질 때까지 빈 상태(대부분 비어 있지 않고 쓰레기 값(garbage value)로 내버려두지 않고 자비스크립트 엔진이 `undefined`로 초기화한다.

따라서 변수를 선언한 이후 값을 할당하지 않은 변수를 참조하면 `undefined`가 반환된다.

```js
var foo;
console.log(foo); // undefined
```

이처럼 `undefined`는 개발자가 의도적으로 할당하기 위한 값이 아니라 자바스크립트 엔진이 변수를 초기화할 때 사용하는 값이다.

**변수에 값이 없다는 것을 명시하고 싶을 때는 `undefined`를 할당한느 것이 아니라 `null`을 할당한다.**

>ECMAScript 사양에서는 변수는 '선언한다'라고 표현하고, 함수는 '정의한다'라고 표현한다.

<br>

# 6. **null 타입**
> null 타입의 값은 null이 유일하다.

<br>

프로그래밍 언어에서 null은 변수에 값이 없다는 것을 의도적으로 명시(의도적 부재(intentional absence))할 때 사용한다. **변수에 null을 할당하는 것은 변수가 이전에 참조하던 값을 더 이상 참조하지 않겠다는 의미다.**

```js
var foo = 'Lee';

// 이전 참조를 제거. foo 변수는 더 이상 'Lee'를 참조하지 않는다.
// 유용해 보이지는 않는다. 변수의 스코프를 좁게 만들어 변수 자체를 재빨리 소멸시키는 편이 낮다.
foo = null
```
함수가 유효한 값을 반환할 수 없는 경우 명시적으로 null을 반환하기도 한다.

<br>

- - -

# 7.  **심벌 타입**
>심벌(Symbol)은 ES6에서 추가된 7번재 타입으로, 변경 불가능한 원시 타입의 값이다. <br>
>심벌 값은 다른값과 중복되지 않는 유일무이한 값이다. 따라서 주로 이름이 충돌한 위험이 없는 객체의 유일한 프로퍼티 키를 만들기 위해 사용한다.

<br>

심벌 이외의 원시 값은 리터럴을 통해 생성하지만 심벌은 Symbol 함수를 호출해 생성한다.

```js
// 심벌 값 생성
var key = Symbol('key');
console.log(typeof key); // symbol

// 객체 생성
var = obj = {};

// 이름이 충돌할 위험이 없는 유일무이한 값이 심벌을 프로퍼티 키로 사용한다.
obj[key] = 'value';
console.log(obj[key]); // value
```

<br>

- - -

# 8. **객체 타입**
자바스크립트의 데이터 타입은 크게 원시 타입과 객체 타입으로 분류한다.

>자바스크립트는 객체 기반의 언어이며, 자바스크립트를 이루고 있는 거의 모든 것이 객체라는 것이다.

<br>

- - -

# 9. **데이터 타입의 필요성**

## **데이터 타입에 의해 메모리 공간의 확보와 참조**
값은 메모리에 저장하고 참조할 수 있어야 한다. 메모리에 값을 저장하려면 확보해야 할 메모리 공간의 크기를 결정해야 한다. 

다시 말해, 몇 바이트의 메모리 공간을 사용해야 낭비와 손실 없이 값을 저장할 수 있는지 알아야 한다.

<br>

### **확보**

```js
var score = 100;
```
위 코드가 실행되면 

1. 메모리 공간을 확보
2. 확보한 메모리에 숫자 값 100을 2진수로 저장

이 순서로 처리하기 위해서는 메모리 공간의 크기를 알아야 한다.

자바스크립트 엔진은 데이터 타입, 즉 값의 종류에 따라 정해진 크기의 메모리 공간을 확보한다. 즉, **변수에 할당되는 값의 데이터 타입에 따라 확보해야 할 메모리 공간의 크기가 결정**된다.

<br>

<img src="/assets/img/javascript/memory_value.png"/>

<br>

위 예제의 경우 자바스크립트 엔진은 

1. 리터럴 100을 숫자 타입의 값으로 해석
2. 8바이트의 메모리 공간을 확보
3. 100을 2진수로 저장

자바스크립트는 숫자 타입의 값을 생성할 때 배정밀도 64비트 부동소수점 형식을 사용한다. 따라서 실제로 메모리에 저장되는 2진수 값은 위 그림과 다르다. 지금은 간단히 양의 정수로 저장된다고 생각하자.

<br>

### **참조**
식별자 score를 통해 숫자 타입의 값 100이 저장되어 있는 메모리 공간의 주소를 찾아갈 수 있다. 정확히 말하면 숫자 값 100이 저장되어 있는 메모리 공간의 선두 메모리 셀의 주소를 찾아갈 수 있다.

이때 값을 참조하려면 한 번에 읽어 들여야 할 메모리 공간의 크기, 즉 메모리 셀의 개수(바이트 수)를 알아야 한다. score 변수의 경우, 저장되어 있는 값이 숫자 타입이므로 8바이트 단위로 읽어 들이지 않으면 값이 훼손된다.

변수에는 숫자 타입의 값이 할당되어 있으므로 자바스크립트 엔진은 score 변수를 숫자 타입으로 인식한다.

숫자 타입은 8바이트 단위로 저장되므로 score 변수를 참조하면 8바이트 단위로 메모리 공간에 저장된 값을 읽어 들인다.

<br>

## **데이터 타입에 의한 값의 해석**

모든 값은 데이터 타입을 가지며, 메모리에 2진수, 즉 비트의 나열로 저장된다. 메모리에 저장된 값은 데이터 타입에 따라 다르게 해석될 수 있다.

예를 들어, 메모리에 저장된 값 0100 0001을 숫자로 해석하면 65지만 문자열로 해석하면 'A' 다.

<br>

데이터 타입이 필요한 이유

- 값을 저장할 때 확보해야 하는 메모리 공간의 크기를 결정하기 위해
- 값을 참조할 때 한 번에 읽어 들여야 할 메모리 공간의 크기를 결정하기 위해
- 메모리에서 읽어 들인 2진수를 어떻게 해석할지 결정하기 위해

<br>

- - -

# 10. **동적 타이핑**

## **동적 타입 언어와 정적 타입 언어**
C나 자바 같은 **정적 타입(static/strong type) 언어**는 변수를 선언할 때 변수에 할당할 수 있는 값의 종류, 즉 데이터 타입을 사전에 선언해야 한다. 이를 **명시적 타입 선언(explicit type declaration)** 이라 한다.

<br>

```java
// c 변수에는 1바이트 정수 타입의 값(-128 ~ 127)만 할당할 수 있다.
char c;

// num 변수에는 4바이트 정수 타입의 값(-2,124,483,648 ~ 2,124,483,647)만 할당할 수 있다.
int num;
```

정적 타입 언어는 변수의 타입을 변경할 수 없으며, 변수에 선언한 타입에 맞는 값만 할당할 수 있다. 정적 타입 언어는 컴파일 시점에 **타입 체크**(선언한 데이터 타입에 맞는 값을 할당했는지 검사하는 처리)를 수행한다.

대표적인 정적 타입 언어는 C, C++, 자바, 코틀린, 하스켈, 고, 러스트, 스칼라 등이 있다.

자바스크립트는 정적 타입 언어와 다르게 변수를 선언할 대 타입을 선언하지 않는다.

>`var`, `let`, `const` 키워드를 사용해 변수를 선언할 뿐이다.

<br>

자바스크립트의 변수는 정적 타입 언어와 같이 미리 선언한 데이터 타입의 값만 할당할 수 있는 것이 아니다.

>어떠한 데이터 타입의 값이라도 자유롭게 할당할 수 있다.

<br>

**typeof** 연산자는 연산자 뒤에 위치한 피연산자의 데이터 타입을 문자열로 반환한다.

```js
var foo;
console.log(typeof foo);  // undefined

foo = 3;
console.log(typeof foo);  // number

foo = 'Hello';
console.log(typeof foo);  // string

foo = true;
console.log(typeof foo);  // boolean

foo = null;
console.log(typeof foo);  // object

foo = Symbol(); // 심벌
console.log(typeof foo);  // symbol

foo = {}; // 객체
console.log(typeof foo);  // object

foo = []; // 배열
console.log(typeof foo);  // object

foo = function () {}; // 함수
console.log(typeof foo);  // function
```

**typeof** 연산자로 변수를 연산하면 변수의 데이터 타입을 반환한다. 정확히 말하면 변수의 데이터 타입을 반환하는 것이 아니라 변수에 할당된 값의 데이터 타입을 반환하는 것이다.


자바스크립트에서는 값의  할당하는 시점에 변수의 타입이 동적으로 결정되고 변수의 타입을 언제든지 자유롭게 변경할 수 있다.

**자바스크립트의 변수는 선언이 아닌 할당에 의해 타입이 결정(타입 추록(type inference))된다. 그리고 재할당에 의해 변수의 타입은 언제든지 동적으로 변할 수 있다.**

이러한 특징을 **동적 타이핑(dynamic typing)** 이라 한다.


자바스크립트를 정적 타입 언어와 구별하기 위해 **동적 타입(dynamic/week type) 언어**라 한다.

대표적인 동적 타입 언어로는 자바스크립트, 파이썬, PHP, 루비, 리스프, 펄 등이 있다.

## **동적 타입 언어와 변수**
동적 타입 언어는 변수에 어떤 데이터 타입의 값이라도 자유롭게 할당할 수 있다. 하지만 **무감각해질 정도로 편리하다는 것이다.**

모든 소프트웨어 아키텍처에는 트레이드오프(trade-off)가 존재하며, 모든 애플리케이션에 적합한 은 탄환(silver bullet)은 없듯이 동적 타입 언어 또한 구조적인 단점이 있다.

변수 값은 언제든지 변경될 수 있기 때문에 복잡한 프로그램에서는 변화하는 변수 값을 추적하기 어려울 수 있다. 그 뿐만 아니라 변수의 타입이 고정되어 있지 않고 동적으로 변하는 동적 타입 언어의 변수는 값의 변경에 의해 타입도 언제든지 변경될 수 있다. 따라서 동적 타입 언어의 변수는 **값을 확인하기 전에는 타입을 확실할 수 없다.**

자바스크립트는 개발자의 의도와는 상관없이 자바스크립트 엔진에 의해 암묵적으로 타입이 자동으로 변환되기도 한다. 즉, 숫자 타입의 변수일 것이라고 예측했지만 사실은 문자열 타입의 변수일 수도 있다는 말이다.

>결국 동적 타입 언어는 유연성은 높지만 신뢰성이 떨어진다.

