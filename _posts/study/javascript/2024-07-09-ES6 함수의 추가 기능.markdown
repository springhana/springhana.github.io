---
layout: post
related_posts:
  - _posts/study/javascript/2024-04-15-클래스 (2).markdown
  - _posts/study/javascript/2024-07-12-배열 (1).markdown
title: ES6 함수의 추가 기능
categories:
  - study
  - javascript
image: /assets/img/javascript/modern-javascript-book.png
permalink: '/:categories/:year/:month/:day/:title/'
description: >
  모던 자바스크립트 Deep Dive: 자바스크립트의 기본 개념과 동작 원리 - 26장 ES6 함수의 추가 기능
---

* toc
{:toc}

# 1. 함수의 구분

**ES6 이전의 모든 함수는 일반 함수로서 호출할 수 있는 것은 물론 생성자 함수로서 호출할 수 있다.**

```js
var foo = function () {
  return 1;
};

// 일반적인 함수로서 호출
foo(); // -> 1

// 생성자 함수로서 호출
new foo(); // -> foo {}

// 메서드로서 호출
var obj = { foo: foo };
obj.foo(); // -> 1
```

즉, ES6 이전의 모든 함수는 callable(**호출할 수 있는 함수 객체**) 이면서 constructor(**인스턴스를 생성할 수 있는 함수 객체**)이다.

```js
var foo = function () {};

// ES6 이전의 모든 함수는 callable이면서 constructor다.
foo(); // -> undefined
new foo(); // -> foo {}
```

- 메서드라고 부르던 객체에 바인딩된 함수도 마찬가지다.

---
# 2. 메서드

**ES6 사양에서 메서드는 메서드 축약 표현으로 정의된 함수만을 의미한다.** 

```js
const obj = {
  x: 1,
  // foo는 메서드이다.
  foo() { return this.x; },
  // bar에 바인딩된 함수는 메서드가 아닌 일반 함수이다.
  bar: function() { return this.x; }
};

console.log(obj.foo()); // 1
console.log(obj.bar()); // 1
```

ES6 사양에서 정의한 메서드는 **인스턴스를  생성할 수 없는** non-constructor이다.

```js
new obj.foo(); // -> TypeError: obj.foo is not a constructor
new obj.bar(); // -> bar {}
```

- 인스턴스를 생성할 수 없으니 prototype 프로퍼티도 없고 생성되지 않는다.
- 표준 빌트인 객체가 제공하는 프로토타입 메서드와 정적 메서드는 모두 non-contructor이다.

**ES6 메서드는 자신을 바인딩한 객체를 가리키는 내부 슬롯 `[[HomeObject]]`를 갖는다.**

- `[[HomeObject]]`를 갖는 ES6 메서드는 `super` 키워드를 사용할 수 있다. (`super` 참조는 `[[HomeObject]]`를 사용해서 참조)

```js
const base = {
  name: 'Lee',
  sayHi() {
    return `Hi! ${this.name}`;
  }
};

const derived = {
  __proto__: base,
  // sayHi는 ES6 메서드다. ES6 메서드는 [[HomeObject]]를 갖는다.
  // sayHi의 [[HomeObject]]는 sayHi가 바인딩된 객체인 derived를 가리키고
  // super는 sayHi의 [[HomeObject]]의 프로토타입인 base를 가리킨다.
  sayHi() {
    return `${super.sayHi()}. how are you doing?`;
  }
};

console.log(derived.sayHi()); // Hi! Lee. how are you doing?
```

ES6 메서드는 본연의 기능을 추가하고 의미적으로 맞지 않는 기능을 제거했다.

---
# 3. 화살표 함수

`function` 키워드 대신 화살표(`=>`)를 사용하여 기존의 함수 정의 방식보다 더 간략하게 함수를 정의할 수 있다.

- 화살표 함수는 콜백 함수 내부에서 `this`가 전역 객체를 가리키는 문제를 해결하기 위한 대안으로 유용하다.

## 화살표 함수 정의

<span class="green_">함수 정의</span>

함수 표현식으로만 정의해줘야 한다. 

```js
const multiply = (x, y) => x * y;
multiply(2, 3); // -> 6
```

<span class="green_">매개변수 선언</span>

```js
const arrow = (x, y) => { ... };
const arrow = x => { ... };
const arrow = () => { ... };
```

매개변수가 
1. 여러 개인 경우 소괄호 `()`에 선언
2. 한 개인 경우 소괄호 `()` 생략 가능
3. 없는 경우 소괄호 `()` 생략 불가능

<span class="green_">함수 몸체 정의</span>

🎈함수 몸체가 하나의 문으로 구성된다면 함수를 몸체를 감싸는 중괄호 `{}` 생략할 수 있다.

```js
// concise body
const power = x => x ** 2;
power(2); // -> 4

// 위 표현은 다음과 동일하다.
// block body
const power = x => { return x ** 2; };
```

🎈함수 몸체를 감싸는 중괄호 `{}`를 생략한 경우 함수 몸체 내부의 문이 표현식이 아닌 문이라면 에러가 발생한다.

```js
const arrow = () => const x = 1; // SyntaxError: Unexpected token 'const'

// 위 표현은 다음과 같이 해석된다.
const arrow = () => { return const x = 1; };
```

🎈함수 몸체의 문이 표현식이 아닌 문이라면 중괄호를 생략할 수 없다.

```js
const arrow = () => { const x = 1; };
```

🎈**객체 리터럴 반환 시** 소괄호 `()`로 감싸 줘야 한다.

```js
const create = (id, content) => ({ id, content });
create(1, 'JavaScript'); // -> {id: 1, content: "JavaScript"}

// 위 표현은 다음과 동일하다.
const create = (id, content) => { return { id, content }; };
```

- 소괄호 `()`를 감싸지 않으면 중괄호 `{}`를 함수 몸체를 감싸는 중괄호 `{}`로 해석이 잘못될 수 있다.

🎈함수 몸체가 여러 개의 문이라면 중괄호 `{}`를 생략할 수 없다.

```js
const sum = (a, b) => {
  const result = a + b;
  return result;
};
```

🎈즉시 실행 함수로 사용할 수 있다.

```js
const person = (name => ({
  sayHi() { return `Hi? My name is ${name}.`; }
}))('Lee');

console.log(person.sayHi()); // Hi? My name is Lee.
```

🎈고차 함수에 인수로 전달할 수 있다.

```js
// ES5
[1, 2, 3].map(function (v) {
  return v * 2;
});

// ES6
[1, 2, 3].map(v => v * 2); // -> [ 2, 4, 6 ]
```

## 화살표 함수와 일반 함수의 차이

1. 화살표 함수는 인스턴스를 생성할 수 없는 non-constructor이다.

```js
const Foo = () => {};
// 화살표 함수는 생성자 함수로서 호출할 수 없다.
new Foo(); // TypeError: Foo is not a constructor
Foo.hasOwnProperty('prototype'); // -> false
```

2. 중복된 매개변수 이름을 선언할 수 없다.

일반 함수는 중복된 매개변수 이름 선언해도 에러 발생하지 않는다.

```js
function normal(a, a) { return a + a; }
console.log(normal(1, 2)); // 4
```

화살표 함수는 중복된 매개변수 이름 선언하면 에러가 발생한다.

```js
const arrow = (a, a) => a + a;
// SyntaxError: Duplicate parameter name not allowed in this context
```

3. 화살표 함수는 함수 자체의 `this`, `argument`, `super`, `new.target` 바인딩을 갖지 않는다.

참조하면 스코프 체인을 통해 상위 스코프를 참조한다.

# 3. this

화살표 함수가 일반 함수와 구별되는 가장 큰 특징은 `this`다.

- 콜백 함수 내부의 `this`가 외부 함수의 `this`와 다르기 때문에 발생하는 문제를 해결하기 위해 의도적으로 설계된 것

```js
class Prefixer {
  constructor(prefix) {
    this.prefix = prefix;
  }

  add(arr) {
    // add 메서드는 인수로 전달된 배열 arr을 순회하며 배열의 모든 요소에 prefix를 추가한다.
    // ①
    return arr.map(function (item) {
      return this.prefix + item; // ②
      // -> TypeError: Cannot read property 'prefix' of undefined
    });
  }
}

const prefixer = new Prefixer('-webkit-');
console.log(prefixer.add(['transition', 'user-select']));
```

고차 함수의 인수로 전달되어 고차 함수 내부에서 호출되는 콜백 함수도 중첩 함수라고 할 수 있다.

②에서 `undefined`를 가리키는 이유는 `Array.prototype.map` 메서드가 콜백 함수를 일반 함수로서 호출하기 때문이다.

콜백 함수의 `this`(②) 와 외부 함수의 `this`(①)가 서로 다른 값을 가리키고 있기 때문에 TypeError가 발생한다.

ES6 이전에는 `Function.prototype.bind`을 사용해서 바인딩 했다.

```js
...
add(arr) {
  return arr.map(function (item) {
    return this.prefix + ' ' + item;
  }.bind(this)); // this에 바인딩된 값이 콜백 함수 내부의 this에 바인딩된다.
}
...
```

**화살표 함수는 함수 자체의 `this` 바인딩을 갖지 않는다.**

**따라서 화살표 함수 내부에서 `this`를 참조하면 상위 스코프의 `this`를 그대로 참조한다. 이를 lexical this라고 한다.**

```js
// 화살표 함수는 상위 스코프의 this를 참조한다.
() => this.x;

// 익명 함수에 상위 스코프의 this를 주입한다. 위 화살표 함수와 동일하게 동작한다.
(function () { return this.x; }).bind(this);
```

화살표 함수와 화살표 함수가 중첩이 되면 상위 스코프 체인 상에서 가장 가까운 상위 함수 중에서 화살표 함수가 아닌 함수의 `this`를 참조한다.

```js
// 중첩 함수 foo의 상위 스코프는 즉시 실행 함수다.
// 따라서 화살표 함수 foo의 this는 상위 스코프인 즉시 실행 함수의 this를 가리킨다.
(function () {
  const foo = () => console.log(this);
  foo();
}).call({ a: 1 }); // { a: 1 }

// bar 함수는 화살표 함수를 반환한다.
// bar 함수가 반환한 화살표 함수의 상위 스코프는 화살표 함수 bar다.
// 하지만 화살표 함수는 함수 자체의 this 바인딩을 갖지 않으므로 bar 함수가 반환한
// 화살표 함수 내부에서 참조하는 this는 화살표 함수가 아닌 즉시 실행 함수의 this를 가리킨다.
(function () {
  const bar = () => () => console.log(this);
  bar()();
}).call({ a: 1 }); // { a: 1 }
```

화살표 함수가 전역 함수라면 화살표 함수의 `this`는 전역 객체를 가리킨다.

```js
// 전역 함수 foo의 상위 스코프는 전역이므로 화살표 함수 foo의 this는 전역 객체를 가리킨다.
const foo = () => console.log(this);
foo(); // window
```

프로퍼티에 할당한 화살표 함수도 마찬가지다.

```js
// increase 프로퍼티에 할당한 화살표 함수의 상위 스코프는 전역이다.
// 따라서 increase 프로퍼티에 할당한 화살표 함수의 this는 전역 객체를 가리킨다.
const counter = {
  num: 1,
  increase: () => ++this.num
};

console.log(counter.increase()); // NaN
```

화살표 함수는 `Function.prototype.call`, `Function.prototype.apply`, `Function.prototype.bind` 메서드를 사용해도 화살표 함수 내부의 `this`를 교체할 수 없다.

```js
window.x = 1;

const normal = function () { return this.x; };
const arrow = () => this.x;

console.log(normal.call({ x: 10 })); // 10
console.log(arrow.call({ x: 10 }));  // 1
```

호출할 수 없다는 의미가 아닌 `this` 바인딩을 갖지 않기 때문에 교체할 수 없다는 의미다.

```js
const add = (a, b) => a + b;

console.log(add.call(null, 1, 2));    // 3
console.log(add.apply(null, [1, 2])); // 3
console.log(add.bind(null, 1, 2)());  // 3
```

메서드로 사용할 때 역시 화살표 함수의 this는 상위 스코프를 가리키므로 사용하지 않는 것이 좋다.

🎈대신 메서드를 정의할 때 ES6 메서드 축약 표현으로 정의한 ES6 메서드를 사용하는 것이 좋다.

```js
// Good
const person = {
  name: 'Lee',
  sayHi() {
    console.log(`Hi ${this.name}`);
  }
};

person.sayHi(); // Hi Lee
```

🎈프로토타입 객체의 프로퍼티에 화살표 함수를 할당하는 경우도 동일한 문제가 발생한다.

```js
// Bad
function Person(name) {
  this.name = name;
}

Person.prototype.sayHi = () => console.log(`Hi ${this.name}`);

const person = new Person('Lee');
// 이 예제를 브라우저에서 실행하면 this.name은 빈 문자열을 갖는 window.name과 같다.
person.sayHi(); // Hi
```

🎈프로퍼티를 동적으로 추가할 때는 일반 함수를 할당해야 한다.

```js
// Good
function Person(name) {
  this.name = name;
}

Person.prototype.sayHi = function () { console.log(`Hi ${this.name}`); };

const person = new Person('Lee');
person.sayHi(); // Hi Lee
```

🎈ES6 메서드를 동적 추가하고 싶다면 객체 리터럴을 바인딩하고 프로토타입의 `constructor` 프로퍼티와 생성자 함수 간의 연결을 재설정한다.

```js
function Person(name) {
  this.name = name;
}

Person.prototype = {
  // constructor 프로퍼티와 생성자 함수 간의 연결을 재설정
  constructor: Person,
  sayHi() { console.log(`Hi ${this.name}`); }
};

const person = new Person('Lee');
person.sayHi(); // Hi Lee
```

🎈 클래스 필드 정의 제안을 사용하여 클래스 필드에 화살표 함수를 할당할 수도 있다.

```js
// Bad
class Person {
  // 클래스 필드 정의 제안
  name = 'Lee';
  sayHi = () => console.log(`Hi ${this.name}`);
}

const person = new Person();
person.sayHi(); // Hi Lee
```

`sayHi` 클래스 필드에 할당한 화살표 함수 내부에서 `this`를 참조하면 상위 스코프의 `this` 바인딩을 참조한다.

`sayHi` 클래스 필드는 인스턴스 프로퍼티이므로 다음과 같다.

```js
class Person {
  constructor() {
    this.name = 'Lee';
    // 클래스가 생성한 인스턴스(this)의 sayHi 프로퍼티에 화살표 함수를 할당한다.
    // sayHi 프로퍼티는 인스턴스 프로퍼티이다.
    this.sayHi = () => console.log(`Hi ${this.name}`);
  }
}
```

`sayHi` 클래스 필드에 할당한 화살표 함수의 상위 스코프는 사실 클래스 외부이며 `this`는 클래스가 생성할 인스턴스를 참조하기 때문에 constructor 내부의 `this` 내부 바인딩과 같다.

하지만 클래스 필드에 할당된 화살표 함수는 프로토타입 메서드가 아니라 인스턴스 메서드가 된다. 따라서 메서드를 정의할 때는 ES6 메서드 축약 표현으로 정의하는 것이 좋다.

```js
// Good
class Person {
  // 클래스 필드 정의
  name = 'Lee';

  sayHi() { console.log(`Hi ${this.name}`); }
}
const person = new Person();
person.sayHi(); // Hi Lee
```

## super

화살표 함수는 함수 자체의 `super` 바인딩을 갖지 않기 때문에 상위  스코프의 `super`를 참조한다.

```js
class Base {
  constructor(name) {
    this.name = name;
  }

  sayHi() {
    return `Hi! ${this.name}`;
  }
}

class Derived extends Base {
  // 화살표 함수의 super는 상위 스코프인 constructor의 super를 가리킨다.
  sayHi = () => `${super.sayHi()} how are you doing?`;
}

const derived = new Derived('Lee');
console.log(derived.sayHi()); // Hi! Lee how are you doing?
```

## arguments

화살표 함수의 `arguments`도 마찬가지로 상위 스코프의 `arguments`를 참조한다.

```js
(function () {
  // 화살표 함수 foo의 arguments는 상위 스코프인 즉시 실행 함수의 arguments를 가리킨다.
  const foo = () => console.log(arguments); // [Arguments] { '0': 1, '1': 2 }
  foo(3, 4);
}(1, 2));

// 화살표 함수 foo의 arguments는 상위 스코프인 전역의 arguments를 가리킨다.
// 하지만 전역에는 arguments 객체가 존재하지 않는다. arguments 객체는 함수 내부에서만 유효하다.
const foo = () => console.log(arguments);
foo(1, 2); // ReferenceError: arguments is not defined
```

---
# 4. Rest 파라미터

## 기본 문법

매개변수 이름 앞에 세게의 점 `...`을 붙여서 정의한 매개변수를 의미한다.

**Rest 파라미터는 함수에 전달된 인수들의 목록을 배열로 전달받는다.**

```js
function foo(...rest) {
  // 매개변수 rest는 인수들의 목록을 배열로 전달받는 Rest 파라미터다.
  console.log(rest); // [ 1, 2, 3, 4, 5 ]
}

foo(1, 2, 3, 4, 5);
```

🎈 일반 매개변수와도 함께 사용할 수 있다.

```js
function foo(param, ...rest) {
  console.log(param); // 1
  console.log(rest);  // [ 2, 3, 4, 5 ]
}

foo(1, 2, 3, 4, 5);

function bar(param1, param2, ...rest) {
  console.log(param1); // 1
  console.log(param2); // 2
  console.log(rest);   // [ 3, 4, 5 ]
}

bar(1, 2, 3, 4, 5);
```

🎈반드시 마지막 파라미터이어야 한다.

```js
function foo(...rest, param1, param2) { }

foo(1, 2, 3, 4, 5);
// SyntaxError: Rest parameter must be last formal parameter
```

🎈 단 하나만 선언할 수 있다.

```js
function foo(...rest1, ...rest2) { }

foo(1, 2, 3, 4, 5);
// SyntaxError: Rest parameter must be last formal parameter
```

🎈 함수 객체의 `length` 프로퍼티에 영향을 주지 않는다.

```js
function foo(...rest) {}
console.log(foo.length); // 0

function bar(x, ...rest) {}
console.log(bar.length); // 1

function baz(x, y, ...rest) {}
console.log(baz.length); // 2
```

## Rest 파라미터와 arguments 객체

`arguments` 객체는 함수 호출 시 전달된 인수들의 정보를 담고 있는 순회 가능한 유사 배열 객체이다.

- 함수 내부에서 지역 변수처럼 사용할 수 있다.

```js
// 매개변수의 개수를 사전에 알 수 없는 가변 인자 함수
function sum() {
  // 가변 인자 함수는 arguments 객체를 통해 인수를 전달받는다.
  console.log(arguments);
}

sum(1, 2); // {length: 2, '0': 1, '1': 2}
```

🎈Rest 파라미터는 가변 인자 함수의 인수 목록을 배열로 직접 전달 받을 수 있다.

```js
function sum(...args) {
  // Rest 파라미터 args에는 배열 [1, 2, 3, 4, 5]가 할당된다.
  return args.reduce((pre, cur) => pre + cur, 0);
}
console.log(sum(1, 2, 3, 4, 5)); // 15
```

화살표 함수로 가변 인자를 구현해야 할 때는 반드시 Rest 파라미터를 사용해야 한다.

---
# 5. 매개변수 기본값

함수를 호출할 때 매개변수의 개수만큼 인수를 전달받지 않는 경우에 에러가 발생하지 않는다. 자바스크립트 엔진이 매개변수와 개수와 인수의 개수를 체크하지 않기 때문이다.

ES6 이전에는 다음과 같이 방어 코드를 추가했다.

```js
function sum(x, y) {
  // 인수가 전달되지 않아 매개변수의 값이 undefined인 경우 기본값을 할당한다.
  x = x || 0;
  y = y || 0;

  return x + y;
}

console.log(sum(1, 2)); // 3
console.log(sum(1));    // 1
```

ES6 이후에서는 더 간소화할 수 있다.

```js
function sum(x = 0, y = 0) {
  return x + y;
}

console.log(sum(1, 2)); // 3
console.log(sum(1));    // 1
```

Rest 파라미터에는 기본값을 지정할 수 없다.

```js
function foo(...rest = []) {
  console.log(rest);
}
// SyntaxError: Rest parameter may not have a default initializer
```

매개변수 기본값은 함수 객체의 `length` 프로퍼티와 `arguments` 객체에 아무런 영향이 없다.

```js
function sum(x, y = 0) {
  console.log(arguments);
}

console.log(sum.length); // 1

sum(1);    // Arguments { '0': 1 }
sum(1, 2); // Arguments { '0': 1, '1': 2 }
```