---
layout: post
related_posts:
  - _posts/study/javascript/2024-07-09-ES6 함수의 추가 기능.markdown
  - _posts/study/javascript/2024-07-12-배열 (2).markdown
title: 배열 (1)
categories:
  - study
  - javascript
image: /assets/img/javascript/modern-javascript-book.png
permalink: '/:categories/:year/:month/:day/:title/'
description: >
  모던 자바스크립트 Deep Dive: 자바스크립트의 기본 개념과 동작 원리 - 27장 배열 (1)
---

* toc
{:toc}

# 1. 배열이란?

배열은 여러 개의 값을 순차적으로 나열한 자료구조다.

```js
const arr = ['apple', 'banana', 'orange']
```

배열이 가지고 있는 값을 **요소**(element)라고 하며 자바스크립트의 모든 값은 배열의 요소가 될 수 있다.

배열의 요소는 배열에서 자신의 위치를 나타내는 0 이상의 정수인 **인덱스**(index)를 갖는다.

요소에 접근할 때는 대괄호 `[]` 표기법을 사용하며 접근하고 싶은 요소의 인덱스를 지정해서 사용할 수 있다.

```js
arr[0] // -> 'apple'
arr[1] // -> 'banana'
arr[2] // -> 'orange'
```

배열의 요소 개수(길이)를 나타내는 **length 프로퍼티**를 갖는다.

```js
arr.length // -> 3
```

자바스크립트에 배열이라는 타입은 존재하지 않는다. **배열은 객체 타입이다.**

```js
typeof arr // -> object
```

배열의 생성자 함수는 Array이며, 배열의 프로토타입은 Array.prototype이다.

```js
const arr = [1, 2, 3];

arr.constructor === Array // -> true
Object.getPrototypeOf(arr) === Array.prototype // -> true
```

일반 객체와 배열을 구분하는 차이는 **값의 순서**와 **length 프로퍼티**다.

---
# 2. 자바스크립트 배열은 배열이 아니다.

자료구조에서 말하는 배열은 동일한 크기의 메모리 공간이 빈틈없이 연속적으로 나열된 자료구조를 말한다.

배열의 요소는 하나의 데이터 타입으로 통일되어 있으며 서로 연속적으로 인접해 있는 배열을 **밀집 배열**이라 한다.

- 각 요소가 동일한 데이터 크기, 빈틈없이 연속적으로 이어져 있으므로 단 한번의 연산으로 임의의 요소에 접근(임의 접근, 시간복잡도O(1)) 할 수 있다.

만약 정렬되지 않은 배열에서 특정한 요소를 검색하는 경우 배열의 모든 요소를 처음부터 특정 요소를 발견할 때까지 차례대로 검색(선형 검색, 시간복잡도(O(n))해야 한다.

```js
// 선형 검색을 통해 배열(array)에 특정 요소(target)가 존재하는지 확인한다.
// 배열에 특정 요소가 존재하면 특정 요소의 인덱스를 반환하고, 존재하지 않으면 -1을 반환한다.
function linearSearch(array, target) {
  const length = array.length;

  for (let i = 0; i < length; i++) {
    if (array[i] === target) return i;
  }

  return -1;
}

console.log(linearSearch([1, 2, 3, 4, 5, 6], 3)); // 2
console.log(linearSearch([1, 2, 3, 4, 5, 6], 0)); // -1
```

자바스크립트의 배열은 일반적인 배열이 아니라 배열의 요소를 위한 각각의 메모리 공간은 동일한 크기를 갖지 않아도 되며, 연속적으로 이어져 있지 않을 수도 있는 배열을 **희소 배열**이라 한다.

- **자바스크립트의 배열은 일반적인 배열의 동작을 흉내 낸 특수한 객체다.**

자바스크립트 배열은 인덱스를 나타내는 문자열을 프로퍼티 키로 가지며, length 프로퍼티를 갖는 특수한 객체이다.

- 자바스크립트 배열의 요소는 사실 프로퍼티 값이다. 자바스크립트에서 사용할 수 있는 모든 값은 객체의 프로퍼티 값이 될 수 있으므로 어떤 타입의 값이라도 배열의 요소가 될 수 있다.

```js
const arr = [
  'string',
  10,
  true,
  null,
  undefined,
  NaN,
  Infinity,
  [ ],
  { },
  function () {}
];
```

자바스크립트 배열은 해시 테이블로 구현된 객체이므로 인덱스로 요소에 접근하는 경우 일반적인 배열보다 성능적인 면에서 느릴 수 밖에 구조적인 단점이 있다.

- 배열 요소에 접근하는 경우에는 일반적인 배열보다 느리지만 요소를 삽입 또는 삭제하는 경우에는 일반적인 배열보다 빠르다.

인덱스로 배열 요소에 접근할 때 일반적인 배열보다 느릴 수밖에 없는 구조적인 단점을 보완하기 위해 대부분의 모던 자바스크립트 엔진은 배열을 일반 객체와 구별하여 좀 더 배열처럼 동작하도록 최적화하여 구현했다.

```js
const arr = [];

console.time('Array Performance Test');

for (let i = 0; i < 10000000; i++) {
  arr[i] = i;
}
console.timeEnd('Array Performance Test');
// 약 340ms

const obj = {};

console.time('Object Performance Test');

for (let i = 0; i < 10000000; i++) {
  obj[i] = i;
}

console.timeEnd('Object Performance Test');
// 약 600ms
```

---
# 3. length 프로퍼티와 희소 배열

length 프로퍼티는 요소의 개수(길이)를 나타내는 0 이상의 정소를 값으로 갖는다.

```js
[].length        // -> 0
[1, 2, 3].length // -> 3
```

length 프로퍼티의 값은 배열의 요소를 추가하거나 삭제하면 자동 갱신된다.

```js
const arr = [1, 2, 3];
console.log(arr.length); // 3

// 요소 추가
arr.push(4);
// 요소를 추가하면 length 프로퍼티의 값이 자동 갱신된다.
console.log(arr.length); // 4

// 요소 삭제
arr.pop();
// 요소를 삭제하면 length 프로퍼티의 값이 자동 갱신된다.
console.log(arr.length); // 3
```

임의의 숫자 값을 명시적으로 할당할 수도 있다.

```js
const arr = [1, 2, 3, 4, 5];

// 현재 length 프로퍼티 값인 5보다 작은 숫자 값 3을 length 프로퍼티에 할당
arr.length = 3;

// 배열의 길이가 5에서 3으로 줄어든다.
console.log(arr); // [1, 2, 3]
```

length 프로퍼티 값보다 큰 숫자 값을 할당하는 경우 프로퍼티 값은 변경되지만 실제로 배열의 길이가 늘어나지 않는다.

```js
const arr = [1];

// 현재 length 프로퍼티 값인 1보다 큰 숫자 값 3을 length 프로퍼티에 할당
arr.length = 3;

// length 프로퍼티 값은 변경되지만 실제로 배열의 길이가 늘어나지는 않는다.
console.log(arr.length); // 3
console.log(arr); // [1, empty × 2]
```

- length 프로퍼티 값은 변경되지만 실제 배열에는 변화가 없으며, 값 없이 비어 있는 요소를 위해 메모리 공간을 확보하지 않으며 빈 요소를 생성하지도 않는다.

배열의 요소가 연속적으로 위치하지 않고 일부가 비어 있는 배열을 희소 배열이라 한다. (문법적으로 허용)

- 일반적인 배열의 length는 배열의 요소의 개수(길이)와 **일치**
- 희소 배열은 length와 배열의 요소의 개수(길이)가 **불일치** (실제 요소 개수보다 크다.)

> 희소 배열은 사용하지 않는 것이 좋다. 희소 배열은 연속적인 값의 집합이라는 배열의 기본적인 개념과 맞지 않으며, 성능에도 좋지 않는 영향을 준다.

---
# 4. 배열 생성

## 배열 리터럴

배열 리터럴은 0개 이상의 요소를 쉼표 `,`로 구분하여 대괄호 `[]`로 묶는다.

- 프로퍼티 키가 없고 값만 존재한다.

```js
const arr = [];
console.log(arr.length); // 0
```

배열 리터럴에 요소를 하나도 추가하지 않으면 빈 배열이 된다.

```js
const arr = [];
console.log(arr.length); // 0
```

배열 리터럴에 요소를 생략하면 희소 배열이 된다.

```js
const arr = [1, , 3]; // 희소 배열

// 희소 배열의 length는 배열의 실제 요소 개수보다 언제나 크다.
console.log(arr.length); // 3
console.log(arr);        // [1, empty, 3]
console.log(arr[1]);     // undefined
```

`arr[1]`이 `undefined`인 이유는 존재하지 않기 때문에

## Array 생성자 함수

Array 생성자 함수를 통해 배열을 생성할 수도 있다. 

- 전달된 인수의 개수에 따라 다르게 동작한다.

전달된 인수가 1개이고 숫자인 경우 length 프로퍼티 값이 인수인 배열을 생성한다.

```js
const arr = new Array(10);

console.log(arr); // [empty × 10]
console.log(arr.length); // 10
```

- 생성된 배열은 희소 배열이다.

배열의 요소를 최대 4,294,967,295개를 가질 수 있다. 전달된 인수가 범위를 벗어나면 RangeError가 발생한다.

```js
// 배열은 요소를 최대 4,294,967,295개 가질 수 있다.
new Array(4294967295);

// 전달된 인수가 0 ~ 4,294,967,295를 벗어나면 RangeError가 발생한다.
new Array(4294967296); // RangeError: Invalid array length

// 전달된 인수가 음수이면 에러가 발생한다.
new Array(-1); // RangeError: Invalid array length
```

전달된 인수가 없는 경우 빈 배열을 생성한다.  (배열 리터럴과 같음)

```js
new Array(); // -> []
```


전달된 인수가 2개 이상이거나 숫자가 아닌 경우 인수를 요소로 갖는 배열을 생성한다.

```js
// 전달된 인수가 2개 이상이면 인수를 요소로 갖는 배열을 생성한다.
new Array(1, 2, 3); // -> [1, 2, 3]

// 전달된 인수가 1개지만 숫자가 아니면 인수를 요소로 갖는 배열을 생성한다.
new Array({}); // -> [{}]
```

Array 생성자 함수는 `new` 연산자와 함께 호출하지 않더라도, 배열을 생성하는 생성자 함수로 동작한다.

- Array 생성자 함수 내부에서 `new.target`을 확인하기 때문이다.

```js
Array(1, 2, 3); // -> [1, 2, 3]
```

## Array.of

ES6에서 도입된 `Array.of`메서드는 전달된 인수를 요소로 갖는 배열을 생성한다.

- 전달된 인수가 1개이고 숫자이더라도 인수를 요소로 갖는 배열을 생성한다.

```js
// 전달된 인수가 1개이고 숫자이더라도 인수를 요소로 갖는 배열을 생성한다.
Array.of(1); // -> [1]

Array.of(1, 2, 3); // -> [1, 2, 3]

Array.of('string'); // -> ['string']
```

## Array.from

ES6에서 도입된 `Array.from` 메서드는 유사 배열 객체 또는 이터러블 객체를 인수로 전달받아 배열로 반환하여 반환한다.

```js
// 유사 배열 객체를 변환하여 배열을 생성한다.
Array.from({ length: 2, 0: 'a', 1: 'b' }); // -> ['a', 'b']

// 이터러블을 변환하여 배열을 생성한다. 문자열은 이터러블이다.
Array.from('Hello'); // -> ['H', 'e', 'l', 'l', 'o']
```

두 번째 인수로 전달된 콜백 함수를 통해 값을 만들면서 요소를 채울 수 있다.

- 두 번째 인수로 전달한 콜백 함수에 첫 번째에 의해 생성된 배열의 요소값과 인덱스를 순차적으로 전달하면서 호출하고, 콜백 함수의 반환값으로 구성된 배열을 반환한다.

```js
// Array.from에 length만 존재하는 유사 배열 객체를 전달하면 undefined를 요소로 채운다.
Array.from({ length: 3 }); // -> [undefined, undefined, undefined]

// Array.from은 두 번째 인수로 전달한 콜백 함수의 반환값으로 구성된 배열을 반환한다.
Array.from({ length: 3 }, (_, i) => i); // -> [0, 1, 2]
```

>유사 배열 객체 : 배열처럼 인덱스로 프로퍼티 값에 접근할 수 있고 length 프로퍼티를 갖는 객체
>
>이터러블 객체 : Symbol.iterator 메서드를 구현하여 `for...of` 문으로 순회할  수 있으며, 스프레드 문법과 배열 디스트릭처럼 할당의 대상으로 사용할 수 있는 객체

## 5. 배열 요소의 참조

배열의 요소를 참조할 때에는 대괄호 `[]` 표기법을 사용한다. 

- 대괄호 안에는 인덱스가 와야 하며 정수로 평가되는 표현식도 가능하다.

```js
const arr = [1, 2];

// 인덱스가 0인 요소를 참조
console.log(arr[0]); // 1
// 인덱스가 1인 요소를 참조
console.log(arr[1]); // 2
```

존재하지 않는 요소에 접근하면 `undefined`가 반환된다.

```js
const arr = [1, 2];

// 인덱스가 2인 요소를 참조. 배열 arr에는 인덱스가 2인 요소가 존재하지 않는다.
console.log(arr[2]); // undefined
```

배열은 사실 인덱스를 나타내는 문자열을 프로퍼티 키로 갖는 객체다. 따라서 존재하지 않는 프로퍼티 키로 객체의 프로퍼티에 접근했을 때 `undefined`를 반환하는 것처럼 배열도 존재하지 않는 요소를 참조하면 `undefined`를 반환한다.

---
# 6. 배열 요소의 추가와 갱신

객체에 프로퍼티를 동적으로 추가할 수 있는 것처럼 배열에도 요소를 동적으로 추가할 수 있다.

존재하지 않는 인덱스를 사용해 값을 할당하면 새로운 요소로 추가된다.

- length 프로퍼티 값은 자동 갱신된다.

```js
const arr = [0];

// 배열 요소의 추가
arr[1] = 1;

console.log(arr); // [0, 1]
console.log(arr.length); // 2
```

현재 배열의 length 프로퍼티 값보다 큰 인덱스로 새로운 요소를 추가하면 희소 배열이 된다.

```js
arr[100] = 100;

console.log(arr); // [0, 1, empty × 98, 100]
console.log(arr.length); // 101
```

- 인덱스로 요소에 접근하여 명시적으로 값을 할당하지 않는 요소는 생성되지 않는다.

이미 요소개 존재하는 요소에 값을 재할당하면 요소값이 갱신된다.

```js
// 요소값의 갱신
arr[1] = 10;

console.log(arr); // [0, 10, empty × 98, 100]
```

- 정수 이외의 값을 인덱스처럼 사용하면 요소가 생성되는 것이 아니라 프로퍼티가 생성된다. 이때 추된 프로퍼티는 length 프로퍼티 값에 영향을 주지 않는다.

```js
const arr = [];

// 배열 요소의 추가
arr[0] = 1;
arr['1'] = 2;

// 프로퍼티 추가
arr['foo'] = 3;
arr.bar = 4;
arr[1.1] = 5;
arr[-1] = 6;

console.log(arr); // [1, 2, foo: 3, bar: 4, '1.1': 5, '-1': 6]

// 프로퍼티는 length에 영향을 주지 않는다.
console.log(arr.length); // 2
```

---
# 7 배열  요소의 삭제

배열은 사실 객체이기 때문에 배열의 요소를 삭제하기 위해 delete 연산자를 사용할 수 있다.

```js
const arr = [1, 2, 3];

// 배열 요소의 삭제
delete arr[1];
console.log(arr); // [1, empty, 3]

// length 프로퍼티에 영향을 주지 않는다. 즉, 희소 배열이 된다.
console.log(arr.length); // 3
```

delete 연산자는 객체의 프로퍼티를 삭제한다.

- 이때 배열은 희소 배열이 되며 length 프로퍼티 값은 변하지 않는다.
- 희소 배열을 만들지 않고 완전히 삭제하려면 `Array.prototype.splice` 메서드를 사용한다.