---
layout: post
related_posts:
  - _posts/study/javascript/2024-02-08-객체 리터럴.markdown
  - _posts/study/javascript/2024-02-14-함수.markdown
title: 원시 값과 객체의 비교
categories:
  - study
  - javascript
image: /assets/img/javascript/modern-javascript-book.png
permalink: '/:categories/:year/:month/:day/:title/'
description: >
  모던 자바스크립트 Deep Dive: 자바스크립트의 기본 개념과 동작 원리 - 11장 원시 값과 객체의 비교
---

* toc
{:toc}

자바스크립트가 제공하는 7가지 데이터 타입(숫자, 문자열, 불리언, null, undefined, 심벌, 객체 타입)은 크게 **원시 타입(primitive type)** 과 객체 타입(object/reference type)으로 구분할 수 있다.

- 원시 타입의 값, 즉 원시 값은 변경 불가능한 값(immutable value)이다.

  - 원시 값을 변수에 할당하면 변수(확보된 메모리 공간)에는 실제 값이 저장된다.

  - 원시 값을 갖는 변수를 다른 변수에 할당하면 원본의 원시 값이 복사되어 전달된다. 이를 **값에 의한 변수(pass by value)** 이라 한다.

- 객체(참조) 타입의 값, 즉 객체는 변경 가능한 값(mutable value)이다.

  - 객체를 변수에 할당하면 변수(확보된 메모리 공간)에는 참조 값이 저장된다.

  - 객체를 가리키는 변수를 다른 변수에 할당하면 원본의 참조 값이 복사되어 전달된다. 이를 **참조에 의한 변수(pass by reference)** 이라 한다.

<h1 style="color:#EF854D;">1. 원시 값</h1>

<h2 style="color:#7CB2DB;">변경 불가능한 값</h2>

>**원시 타입(primitive type)** 의 값, 즉 원시 값은 변경 불가능한 값(immutable value)이다.

<br>

한번 생성된 원시 값은 읽기 전용으로서 변경할 수 없다.

`변수` : 하나의 값을 저장히기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름

`값` : 변수에 저장된 데이터로서 표현식이 평가되어 생성된 결과를 말한다.  변수 불가능하다는 것은 변수가 아니라 값에 대한 진술이다.

- 즉, "원시 값은 변경 불가능하다"는 말은 **원시 값 자체를 변경할 수 없다는 것이지 변수 값을 변경할 수 없다는 것이 아니다.**

<br>

단, **변수는 언제든지 재할당을 통해 변수 값을 변경(교체)** 할 수 있지만 **상수는 단 한 번만 할당이 허용되므로 변수 값을 변경(교체)할 수 없다.**

```js
// const 키워드를 사용해 선언한 변수는 재할당이 금지된다. 상수는 재할당이 금지된 변수일 뿐이다.
const o = {};

// const 키워드를 사용해 선언한 변수에 할당한 원시값(상수)은 변경할 수 없다.
// 하지만 const 키워드를 사용해 선언한 변수에 할당한 객체는 변경할 수 있다.
o.a = 1;
console.log(o); // {a: 1}
```

- 원시 값은 변경 불가능한 값, 즉 읽기 전용 값이다. 원시 값은 어떤 일이 있어도 불변한다. 이러한 원시 값의 특성은 데이터의 신뢰성을 보장한다.

<br>

<strong style="color:orange">값의 할당</strong>

    원시 값을 할당한 변수에 새로운 원시 값을 재할당하면 메모리 공간에 저장되어 있는 재할당 이전의 원시 값을 변경하는 것이 아니라 새로운 메모리 공간을 확보하고 재할당한 원시 값을 저장한 후, 변수는 새롭게 재할당한 원시 값을 가리킨다. 이때 변수가 참조하던 메모리 공간의 주소가 바뀐다.

<br>

변수가 참조하던 메모리 공간의 주소가 변경된 이유는 변수에 할당된 원시 값이 변경 불가능한 값이기 때문이다.

변수 값을 변경하기 위해 원시 값을 재할당하면 새로운 메모리 공간을 확보하고 재할당한 값을 저장한 후, 변수가 참조하던 메모리 공간의 주소를 변경한다. 값의 이러한 특성을 **불변성(immutability)** 이라 한다.

**불별성을 갖는 원시 값을 할당한 변수는 재할당 이외의 변수 값을 변경할 수 있는 방법이 없다.*

<br>

<h2 style="color:#7CB2DB;">문자열과 불변성</h2>

원시 값을 저장하려면 먼저 확보해야 하는 메모리 공간의 크기를 결정해야 한다. 아를 위해 원시 타입별로 메모리 공간의 크기가 미리 정해져 있다고 했다.

- 브라우저 제조사의 구현에 따라 원시 타입의 크기는 다를 수 있다.

<br>

>문자열은 0개 이상의 문자(character)로 이뤄진 집합을 말하며, 1개의 문자는 2바이트의 메모리 공간에 저장된다. 따라서 문자열은 몇 개의 문자로 이뤄졌느냐에 따라 필요한 메모리 공간의 크기가 결정된다.

<br>

```js
// 문자열은 0개 이상의 문자들로 이뤄진 집합이다.
var str1 = '';      // 0개의 문자로 이뤄진 문자열(빈 문자열)
var str2 = 'Hello'; // 5개의 문자로 이뤄진 문자열
```

자바스크립트는 개발자의 편의를 위해 원시 타입인 문자열 타입을 제공한다. 

자바스크립트의 문자열은 원시 타입이며, 변경 불가능하다. 이것은 문자열이 생성된 이후에는 변경할 수 없음을 의미한다.

<br>

```js
var str = 'Hello';
str = 'World';
```

1. 첫 번째 문이 실행되면 'Hello'가 생성되고 식별자 str은 문자열 'Hello'가 저장된 메모리 공간의 첫 번째 메모리 셀 주소를 가리킨다.

2. 두 번째 문이 실행되면 이전에 생성된 문자열 'Hello'를 수정하는 것이 아니라 새로운 문자열 'World'를 메모리에 생성하고 식별자 str은 이것을 가리킨다.

- 이때 문자열 'Hello'와 'World는 모두 메모리에 존재한다.

- 식별자 str은 문자열 'Hello'를 가리키고 있다가 문자열 'World'를 가리키도록 변경되었을 뿐이다.

<br>

**문자열은 유사 배열 객체이면서 이터러블이므로 배열과 유사하게 각 문자에 접근할 수 있다.**

<strong style="color:orange">유사 배열 객체(array-like object)</strong>

    마치 배열처럼 인덱스로 프로퍼티 값에 접근할 수 있고 length 프로퍼티를 갖는 객체를 말한다. 문자열은 마치 배열처럼 인덱스를 통해 각 문자에 접근할 수 있으며, length 프로퍼티를 갖기 때문에 유사 배열 객체이고, for 문으로 순회할 수 있다.

 ```js
var str = 'string';

// 문자열은 유사 배열이므로 배열과 유사하게 인덱스를 사용해 각 문자에 접근할 수 있다.
console.log(str[0]); // s

// 원시 값인 문자열이 객체처럼 동작한다.
console.log(str.length); // 6
console.log(str.toUpperCase()); // STRING
```

<br>

str[0] = 'S' 처럼 이미 생성된 문자열의 일부 문자를 변경해도 반영되지 않는다. 문자열은 변경 불가능한 값이기 때문이다.


```js
var str = 'string';

// 문자열은 유사 배열이므로 배열과 유사하게 인덱스를 사용해 각 문자에 접근할 수 있다.
// 하지만 문자열은 원시값이므로 변경할 수 없다. 이때 에러가 발생하지 않는다.
str[0] = 'S';

console.log(str); // string
```

변수에 새로운 문자열을 재할당하는 것은 가능하다.

<br>

<h2 style="color:#7CB2DB;">값에 의한 전달</h2>

```js
var score = 80;
var copy = score;

console.log(score); // 80
console.log(copy);  // 80

score = 100;

console.log(score); // 100
console.log(copy);  // ?
```

1. score 변수에 숫자 값 80을 할당했다.

2. copy 변수에 score 변수를 할당했다.

3. 그 이후, score 변수에 새로운 숫자 값 100을 재할당해준다.

copy = sore에서 score는 변수 값 80으로 평가되므로 copy 변수에도 80이 할당될 것이다.

**변수에 원시 값을 갖는 변수를 할당받는 변수에는 할당되는 변수의 원시 값이 복사되어 전달된다.** 이를 **값에 의한 전달**이라 한다.

- score 변수와 copy 변수는 숫자 값 80을 갖는다는 것은 동일하지만 score변수와 copy 변수의 값 80은 다른 메모리 공간에 저장된 별개의 값이다.

<br>

score 변수의 값을 변경해 보자

```js
var score = 80;

// copy 변수에는 score 변수의 값 80이 복사되어 할당된다.
var copy = score;

console.log(score, copy);    // 80  80
console.log(score === copy); // true

// score 변수와 copy 변수의 값은 다른 메모리 공간에 저장된 별개의 값이다.
// 따라서 score 변수의 값을 변경해도 copy 변수의 값에는 어떠한 영향도 주지 않는다.
score = 100;

console.log(score, copy);    // 100  80
console.log(score === copy); // false
```

score 변수와 copy 변수의 값 80은 다른 메모리 공간에 저장된 별개의 값이라는 것에 주의하자.

- **변수에는 값이 전달되는 것이 아니라 메모리 주소가 전달된다.**

- 변수와 같은 식별자는 값이 아니라 메모리 주소를 기억하고 있기 때문이다.

<br>

<strong style="color:orange">식별자</strong>

    어떤 값을 구별해서 식별해낼 수 있는 고유한 이름이다. 값의 메모리 공간에 저장되어 있다.

식별자로 값을 구별해서 식별한다는 것은 식별자가 기억하고 있는 메모리 주소를 통해 메모리 공간에 저장된 값에 접근할 수 있다는 것을 의미한다.


```js
var copy = score;
```

위 예제의 경우에는 두 가지 평가 방식이 가능하다.

1. 새로운 값을 생성(복사)해서 메모리 주소를 전달하는 방식. 

    - 할당 시점에 두 변수가 기억하는 메모리 주소가 다르다.

2. score의 변수 값을 메모리 주소를 그대로 전달하는 방식

    - 할당 시점에 두 변수가 기억하는 메모리 주소가 같다.

"값의 의한 전달"도 사실은 값을 전달하는 것이 아니라 메모리 주소를 전달한다. 단, 전달된 메모리 주소를 통해 메모리 공간에 접근하면 값을 참조할 수 있다.

**결국은 두 변수의 원시 값은 서로 다른 메모리 공간에 저장된 별개의 값이 되어 어느 한쪽에서 재할당을 통해 값을 변경하더라도 서로 간섭할 수 없다는 것이다.**

<br>

- - -

<h1 style="color:#EF854D;">2. 객체</h1>

>객체는 프로퍼티의 개수가 정해져 있지 않으며, 동적으로 추가되고 삭제할 수 있다. 또한 프로퍼티의 값에 대한 제약이 없다, 따라서 객체는 원시 값과 같이 확보해야 할 메모리 공간의 크기를 사전에 정해 둘 수 없다.

<br>

객체는 원시 값과 다른 방식으로 동작하도록 설계되어 있다.

<strong style="color:orange;">자바스크립트 객체의 관리 방식</strong>

    자바스크립트 객체는 프로퍼티 키를 인덱스로 사용하는 해시 테이블(hash table)(해시 테이블은 연관 배열, map, dictionary, lookup table이라 부르기도 한다)이라고 생각할 수 있다. 대부분의 자바스크립트 엔진은 해시 테이블과 유사하지만 높은 성능을 위해 해시 테이블보다 나은 방법으로 객체를 구현한다.

    - 자바, C++ 같은 클래스 기반 객체지향 프로그래밍 언어는 사전에 정의된 클래스를 기반으로 객체(인스턴스)를 생성한다. 다시 말해, 객체를 생성하기 이전에 이미 프로퍼티와 메서드가 정해져 있으며 그대로 객체를 생성한다. 객체가 생성된 이후에는 프로퍼티를 삭제하거나 추가할 수 없다.
  
    - 자바스크립트는 클래스 없이 객체를 생성할 수 있으며 객체가 생성된 이후라도 동적으로 프로퍼티와 메서드를 추가할 수 있다. 

    이는 클래스 기반 객체지향 프로그래밍 언어의 객체보다 생성과 프로퍼티 접근에 비용이 더 많이 드는 비효율적인 방식이다.

<br>

<h2 style="color:#7CB2DB;">변경 가능한 값</h2>

> 객체(참조) 타입의 값, 즉 객체는 변경 가능한 값(mutable value)이다.

<br>

```js
var person = {
  name: 'Lee'
};
```

원시 값을 할당한 변수가 기억하는 메모리 주소를 통해 메모리 공간에 접근하면 원시 값에 접근할 수 있다. 즉, 원시 값을 할당한 변수는 원시 값 자체를 값으로 갖는다. 하지만 객체를 할당한 변수가 기억하는 메모리 주소를 통해 메모리 공간에 접근하면 **참조 값(reference value)** 에 접근할 수 있다.

참조 값은 생성된 객체가 저장된 메모리 공간의 주소, 그 자체다.

- 객체를 할당한 변수에는 생성된 객체가 실제로 저장된 메모리 공간의 주소가 저장되어 있다. 이 값을 참조 값이라고 한다. 변수는 이 참조 값을 통해 객체에 접근할 수 있다.

원시 값을 할당한 변수를 참조하면 메모리에 저장되어 있는 원시 값에 접근한다. 하지만 객체를 할당한 변수를 참조하면 메모리에 저장되어 있는 참조 값을 통해 실제 객체에 접근한다.

```js
// 할당이 이뤄지는 시점에 객체 리터럴이 해석되고, 그 결과 객체가 생성된다.
var person = {
  name: 'Lee'
};

// person 변수에 저장되어 있는 참조값으로 실제 객체에 접근해서 그 객체를 반환한다.
console.log(person); // {name: "Lee"}
```

객체를 할당한 변수의 경우 "변수는 객체를 참조하고 있다" 또는 "변수는 객체를 가리키고 있다"라고 표현한다.

객체는 변경이 가능한 값이다. 객체를 할당한 변수는 재할당 없이 객체를 직접 변경할 수 있다. 즉 재할당 없이 프로퍼티를 동적으로 추가할 수도 있고 프로퍼티 값을 갱신할 수도 있으며 프로퍼티 자체를 삭제할 수도 있다.

```js
var person = {
  name: 'Lee'
};

// 프로퍼티 값 갱신
person.name = 'Kim';

// 프로퍼티 동적 생성
person.address = 'Seoul';

console.log(person); // {name: "Kim", address: "Seoul"}
```

객체를 할당한 변쉐 재할당을 하지 않으므로 객체를 할당한 변수의 참조 값은 변경되지 않는다.

객체를 생성하고 괸리하는 방식은 매우 복잡하며 비용이 많이 드는 일이다. 객체를 변경할 때마다 원시 값처럼 이전 값을 복사해서 새롭게 생성한다면 명확하고 신뢰성이 확보되겠지만 객체는 크기가 매우 클 수도 있고, 원시 값처럼 크기가 일정하지도 않으며, 프로퍼티 값이 객체일 수도 있어서 복사해서 생성하는 비용이 많이 든다.

따라서 메모리를 효율적으로 사용하기 위해, 그리고 객체를 복사해 생성하는 비용을 절약하여 성능을 향상 시키기 위해 객체는 변경 가능한 값으로 설계되어 있다.

- **여러 개의 식별자가 하나의 객체를 공유할 수 있다.**

<strong style="color:orange;">얕은 복사와 깊은 복사</strong>

    객체를 프로퍼티 값으로 갖는 객체의 경우 얕은 복사는 한 단계까지만 하는 것을 말하고 깊은 복사는 객체에 중첩되어 있는 객체까지 모두 복사하는 것을 말한다.

```js
// 객체 값일 경우

const o = { x: { y: 1 } };

// 얕은 복사
const c1 = { ...o }; // 35장 "스프레드 문법" 참고
console.log(c1 === o); // false
console.log(c1.x === o.x); // true

// lodash의 cloneDeep을 사용한 깊은 복사
// "npm install lodash"로 lodash를 설치한 후, Node.js 환경에서 실행
const _ = require('lodash');
// 깊은 복사
const c2 = _.cloneDeep(o);
console.log(c2 === o); // false
console.log(c2.x === o.x); // false

// 원시 값일 경우

const v = 1;

// "깊은 복사"라고 부르기도 한다.
const c1 = v;
console.log(c1 === v); // true

const o = { x: 1 };

// "얕은 복사"라고 부르기도 한다.
const c2 = o;
console.log(c2 === o); // true
```

<br>

<h2 style="color:#7CB2DB;">참조에 의한 전달</h2>

```js
var person = {
  name: 'Lee'
};

// 참조값을 복사(얕은 복사)
var copy = person;
```

객체를 가리키는 변수(원본)를 다른 변수(사본)에 할당하면 **원본의 참조 값이 복사되어 전달된다.** 이를 **참조에 의한 전달**이라 한다.

원본 person과 사본 copy 모두 동일한 객체를 가리킨다. 이것은 **두 개의 식별자가 하나의 객체를 공유**한다는 것을 의미한다. 따라서 원본 또는 사본 중 어느 한쪽에서 객체를 변경(변수에 새로운 객체를 재할당하는 것이 아니라 객체의 프로퍼티 값을 변경하거나 프로퍼티를 추가, 삭제)하면 서로 영향을 주고받는다.

```js
var person = {
  name: 'Lee'
};

// 참조값을 복사(얕은 복사). copy와 person은 동일한 참조값을 갖는다.
var copy = person;

// copy와 person은 동일한 객체를 참조한다.
console.log(copy === person); // true

// copy를 통해 객체를 변경한다.
copy.name = 'Kim';

// person을 통해 객체를 변경한다.
person.address = 'Seoul';

// copy와 person은 동일한 객체를 가리킨다.
// 따라서 어느 한쪽에서 객체를 변경하면 서로 영향을 주고 받는다.
console.log(person); // {name: "Kim", address: "Seoul"}
console.log(copy);   // {name: "Kim", address: "Seoul"}
```

결국 **"값에 의한 전달" 과 "참조에 의한 전달" 은 식별자가 기억하는 메모리 공간에 저장되어 있는 값을 복사해서 전달한다는 면에서 동일하다.**

다만 식별자가 기억하는 메모리 공간, 즉 변수에 저장되어 있는 값이 원시 값이냐 참조 값이냐의 차이만 있을 뿐이다. 따라서 **자바스크립트에는 "참조 의한 전달"은 존재하지 않고 "값에 의한 전달"만이 존재한다고 할 수 있다.**