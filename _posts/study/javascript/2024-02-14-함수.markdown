---
layout: post
related_posts:
  - _posts/study/javascript/2024-02-11-원시 값과 객체의 비교.markdown
  - _posts/study/javascript/2024-02-18-스코프.markdown
title: 함수
categories:
  - study
  - javascript
image: /assets/img/javascript/modern-javascript-book.png
permalink: '/:categories/:year/:month/:day/:title/'
description: >
  모던 자바스크립트 Deep Dive: 자바스크립트의 기본 개념과 동작 원리 - 12장 함수
---

* toc
{:toc}

# 1. 함수란?

함수는 "입력(input)"을 받아 "출력(output)"을 내보내는 일련의 과정을 정의한 것이다. 

```js
// f(x, y) = x + y
function add(x, y) {
  return x + y;
}

// f(2, 5) = 7
add(2, 5); // 7
```

>프로그래밍의 언어의 함수는 일련의 과정을 문(statement)으로 구현하고 코드 블록으로 감싸서 하나의 실행 단위로 정의한 것이다.

함수 내부로 

- **입력을 전달받는 변수를 매개 변수(parameter)**
- **입력을 인수(argument)**
- **출력을 반환값(return value)**

이라 한다.

함수는 **함수 정의(function definition)** 를 통해 생성한다. 

```js
// 함수 정의
function add(x, y) {
  return x + y;
}
```

함수 정의만으로 함수가 실행되는 것은 아니다. 인수(argument)를 매개변수를 통해 함수에 전달하면서 함수의 실행을 명시적으로 지시해야 한다.

이를 **함수 호출(function call/invoke)** 라 한다.

```js
// 함수 호출
var result = add(2, 5);

// 함수 add에 인수 2, 5를 전달하면서 호출하면 반환값 7을 반환한다.
console.log(result); // 7
```

---

# 2. 함수를 사용하는 이유

>함수는 필요할 때 여러 번 호출할 수 있다. 실행 시점을 개발자가 결정할 수 있고 몇 번이든 재사용이 가능하다.

동일한 작업을 반복적으로 수행햐야 한다면 미리 정의된 함수를 재사용하는 것이 효율적이다.

코드의 중복을 억제하고 재사용성을 높이는 함수는 **유지보수의 편의성**을 높이고 실수를 줄여 **코드의 신뢰성**을 높이는 효과가 있다.

함수는 객체 타입의 값이다. 따라서 이름(식별자)을 붙일 수 있다. 이는 코드의 가독성을 향상시킨다.

--- 

# 3. 함수 리터럴

자바스크립트의 함수는 객체 타입의 값이다. 따라서 숫자 값을 숫자 리터럴로 생성하고 객체를 객체 리터럴로 생성하는 것처럼 함수도 함수 리터럴로 생성할 수 있다.

```js
// 변수에 함수 리터럴을 할당
var f = function add(x, y) {
  return x + y;
};
```

<table>
<tr>
  <th>구성 요소</th>
  <th>설명</th>
</tr>

<tr>
  <td rowspan="3">함수 이름</td>
  <td>함수 이름은 식별자다. 따라서 식별자 네이밍 규칙을 준수해야 한다.</td>
</tr>
<tr>
  <td>함수 이름은 함수 몸체 내에서만 참조할 수 있는 식별자다.</td>
</tr>
<tr>
  <td>함수 이름은 생략할 수 있다. 이름이 있는 함수를 기명 함수(named function), 이름이 없는 함수를 무명/익명 함수(anonymous function)라 한다.</td>
</tr>

<tr>
  <td rowspan="3">매개변수 목록</td>
  <td>0개 이상의 매개변수를 소괄호로 감싸고 쉼표로 구분한다.</td>
</tr>
<tr>
  <td>각 매개변수에는 함수를 호출할 때 지정한 인수가 순서대로 할당된다. 즉, 매개변수 목록은 순서에 의미가 있다.</td>
</tr>
<tr>
  <td>매개변수는 함수 몸체 내에서 변수와 동일하게 취급된다. 따라서 매개변수도 변수와 마찬가지로 식별자 네이밍 규칙을 준수해야 한다.</td>
</tr>

<tr>
  <td rowspan="2">함수 몸체</td>
  <td>함수가 호출되었을 때 일관적으로 실행될 문들을 하나의 실행 단위로 정의한 코드 블록이다.</td>
</tr>
<tr>
  <td>함수 몸체는 함수 호출에 의해 실행된다.</td>
</tr>
</table>

함수 리터럴도 평가되어 값을 생성하며, 이 값은 객체다. 즉, **함수는 객체다.**

**일반 객체는 호출할 수 없지만 함수는 호출할 수 있다.** 그리고 일반 객체에는 없는 함수 객체만의 고우한 프로퍼티를 갖는다.

--- 

# 4. 함수 정의

>함수 정의란 함수를 호출하기 이전에 인수를 전달받을 매개변수와 실행할 문들, 그리고 반환할 값을 지정하는 것을 말한다. 정의된 함수는 자바스크립트 엔진에 의해 평가되어 함수 객체가 된다.

- 함수 선언문
  ```js
    function add(x, y) {
      return x + y;
    }
    ```

- 함수 표현식
  ```js
    var add = function(x, y){
      return x + y;
    }
    ```

- Function 생성자 함수
  ```js
  var add = new Function('x', 'y', 'return x + y');
  ```

- 화살표 함수(ES6)
  ```js
  var add = (x, y) => x + y;
  ```

## **함수 선언문**

```js
// 함수 선언문
function add(x, y) {
  return x + y;
}

// 함수 참조
// console.dir은 console.log와는 달리 함수 객체의 프로퍼티까지 출력한다.
// 단, Node.js 환경에서는 console.log와 같은 결과가 출력된다.
console.dir(add); // ƒ add(x, y)

// 함수 호출
console.log(add(2, 5)); // 7
```

함수 선언문은 함수 리터럴과 형태가 동일하다. 단, 함수 리터럴은 함수 이름을 생략할 수 있으나 **함수 선언**문은 **함수 이름을 생략할 수 없다.**

```js
// 함수 선언문은 함수 이름을 생략할 수 없다.
function (x, y) {
  return x + y;
}
// SyntaxError: Function statements require a function name
```

함수 선언문은 표현식이 아닌 문이다.

표현식이 아닌 문은 변수에 할당할 수 없다. 함수 선언문도 표현식이 아닌 문이므로 변수에 할당할 수 없다.

```js
// 함수 선언문은 표현식이 아닌 문이므로 변수에 할당할 수 없다.
// 하지만 함수 선언문이 변수에 할당되는 것처럼 보인다.
var add = function add(x, y) {
  return x + y;
};

// 함수 호출
console.log(add(2, 5)); // 7
```

위 예제처럼 사용할 수 이유는 함수 선언문으로 해석하는 경우와 표현식인 문인 함수 리터럴 표현식으로 해석하는 경우가 있기 때문이다. 

{}이 단독으로 존재하면 자바스크립트 엔진은 {}을 블록문으로 해석하며 {}이 값으로 평가되어야 할 문맥(예를 들어, 할당 연산자의 우변)에는 피연산자로 사용되면 자바스크립트 엔진은 {}을 객체로 리터럴을 해석한다.

리터럴을 변수에 할당하거나 피연산자로 사용하면 함수 리터럴 표현식으로 해석한다.

```js
// 기명 함수 리터럴을 단독으로 사용하면 함수 선언문으로 해석된다.
// 함수 선언문에서는 함수 이름을 생략할 수 없다.
function foo() { console.log('foo'); }
foo(); // foo

// 함수 리터럴을 피연산자로 사용하면 함수 선언문이 아니라 함수 리터럴 표현식으로 해석된다.
// 함수 리터럴에서는 함수 이름을 생략할 수 있다.
(function bar() { console.log('bar'); });
bar(); // ReferenceError: bar is not defined
```

함수 리터럴 (foo)은 함수 선언문으로 해석된다. 하지만 그룹 연산자 () 내에 있는 함수 리터럴(bar)은 함수 선언문으로 해석되지 않고 함수 리터럴 표현식으로 해석된다.

**자바스크립트 엔진은 생성된 함수를 호출하기 위해 함수 이름과 동일한 이름의 식별자를 암묵적으로 생성하고, 거기에 함수 객체를 할당한다.**

```js
var add = function add(x, y) {
  return x + y;
};

console.log(add(2, 5)); // 7
```

함수는 함수 이름으로 호출하는 것이 아니라 함수 객체를 가리키는 식별자로 호출한다.

함수 이름과 변수 이름이 일치하므로 함수 이름으로 호출되는 듯하지만 사실은 식별자로 호출된 것이다.

## 함수 표현식

자바스크립트의 함수는 객체 타입의 값이다. 자바스크립트의 함수는 값처럼 변수에 할당할 수도 있고 프로퍼티 값이 될 수도 있으며 배열의 요소가 될 수도 있다. 

값의 설질을 갖는 객체를 **일급 객체**라 한다. 

함수는 일급 객체이므로 함수 리터럴로 생성한 함수 객체를 변수에 할당할 수 있다. 이러한 함수 정의 방식을 함수 표현식(function expression)이라 한다.

```js
// 함수 표현식
var add = function (x, y) {
  return x + y;
};

console.log(add(2, 5)); // 7
```

함수 리터럴의 함수 이름은 생략할 수 있다. 이러한 함수를 익명 함수라 한다. 함수 표현식의 함수 리터럴은 함수 이름을 생략하는 것이 일반적이다.

함수 선언문에서 살펴본 바와 같이 함수를 호출할 때는 함수 이름이 아니라 함수 객체를 가리키는 식별자를 사용해야 한다. 함수 이름은 함수 몸체 내부에서만 유효한 식별자이므로 함수 이름으로 함수를 호출할 수 없다.

```js
// 기명 함수 표현식
var add = function foo (x, y) {
  return x + y;
};

// 함수 객체를 가리키는 식별자로 호출
console.log(add(2, 5)); // 7

// 함수 이름으로 호출하면 ReferenceError가 발생한다.
// 함수 이름은 함수 몸체 내부에서만 유효한 식별자다.
console.log(foo(2, 5)); // ReferenceError: foo is not defined
```

자바스크립트 엔진은 함수 선언문의 함수 이름으로 식별자를 암묵적 생성하고 생성된 함수 객체를 할당하므로 함수 표현식과 유사하게 동작하는 것처럼 보인다. 하지만 함수 선언문과 함수 표현식이 정확히 동일하게 동작하지는 않는다.

함수 선언문은 "표현식이 아닌 문"이고 함수 표현식은 "표현식은 문"이다.


##  **함수 생성 시점과 함수 호이스팅**

```js
// 함수 참조
console.dir(add); // ƒ add(x, y)
console.dir(sub); // undefined

// 함수 호출
console.log(add(2, 5)); // 7
console.log(sub(2, 5)); // TypeError: sub is not a function

// 함수 선언문
function add(x, y) {
  return x + y;
}

// 함수 표현식
var sub = function (x, y) {
  return x - y;
};
```

함수 선언문으로 정의한 함수는 함수 선언문 이전에 호출할 수 있다. 그러나 함수 표현식으로 정의한 함수는 함수 표현식 이전에 호출할 수 없다.

**함수 선언문으로 정의한 함수와 함수 표현식으로 정의한 함수의 생성 시점이 다르기 때문이다.**

함수 선언문으로 함수를 정의하면 런타임 이전에 함수 객체가 먼저 생성된다. 그리고 자바스크립트 엔진은 함수 이름과 동일한 이름의 식별자를 암묵적으로 생성하고 생성된 함수 객체를 할당한다.

즉, 코드가 한 줄씩 순차적으로 실행되기 시작하는 런타임에는 이미 함수 객체가 생성되어 있고 함수 이름과 동일한 식별자에 할당까지 완료한 상태다. 따라서 함수 선언문 이전에 함수를 참조할 수 있으며 호출할 수도 잇다.

**함수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 함수 호이스팅(function hoisting)이라 한다.**

함수 호이스팅과 변수 호이스팅은 미묘한 차이가 있으므로 주의하기 바란다. var 키워드를 사용한 변수 선언문과 함수 선언문은 런타임 이전에 자바스크립트 엔진에 의해 먼저 실행되어 식별자를 생성한다는 점에서 동일하다.

하지만 var 키워드로 선언되 변수는 undefined로 초기화되고, 함수 선언문을 통해 암묵적으로 생성된 식별자는 함수 객체로 초기화된다. 

따라서 var 키워드를 사용한 변수 선언문 이전에 변수를 참조하면 변수 호이스팅에 의해 undefined로 평가되지만 함수 선언문으로 정의한 함수를 함수 선언문 이전에 호출하면 함수 호이스팅에 의해 호출이 가능하다.

함수 표현식은 변수에 할당하는 값이 함수 리터럴인 문이다. 함수 표현식은 변수 선언문과 변수 할당문을 한 번에 기술한 축약 표현과 동일하게 동작한다. 변수 선언은 런타임 이전에 실행되어 undefined로 초기화되지만 **변수 할당문의 값은 할당문이 실행되는 시점, 즉 런터임에 평가되므로 함수 표현식의 함수 리터럴도 할당문이 실행되는 시점에 평가되어 함수 객체가 된다.**

따라서 **함수 표현식으로 함수를 정의하면 함수 호이스팅이 발생하는 것이 아니라 변수 호이스팅이 발생한다.**

## **Function 생성자 함수**

>자바스크립트가 기본 제공하는 빌트인 함수인 Function 생성자 함수에 매개변수 목록과 함수 몸체를 문자열로 전달하려면 new 연산자와 함께 호출하면 함수 객체를 생성해서 반환된다. 사실 new 연산자 없이 호출해도 결과는 동일하다.

<strong style="color:orange">생성자 함수</strong>

    생성자 함수는 객체를 생성하는 함수를 말한다. 객체를 생성하는 방식은 객체 리터럴 이외의 다양한 방법이 있다.

```js
var add = new Function('x', 'y', 'return x + y');

console.log(add(2, 5)); // 7
```

Function 생성자 함수로 생성한 함수는 클로저(closure)를 생성하지 않는 다.

함수 선언문이나 함수 표현식으로 생성한 함수와 다르게 동작한다.

<br>

```js
var add1 = (function () {
  var a = 10;
  return function (x, y) {
    return x + y + a;
  };
}());

console.log(add1(1, 2)); // 13

var add2 = (function () {
  var a = 10;
  return new Function('x', 'y', 'return x + y + a;');
}());

console.log(add2(1, 2)); // ReferenceError: a is not defined
```


## **화상표 함수**
>ES6에서 도입된 화살표 함수(arrow function)는 function키워드 대신 화살표(fat arraw) `=>`를 사용해 좀 더 간략한 방법으로 함수를 선언할 수 있다. 화살표 함수는 항상 익명 함수로 정의한다.

```js
// 화살표 함수
const add = (x, y) => x + y;
console.log(add(2, 5)); // 7
```

화살표 함수는 기존의 함수보다 표현만 간략한 것이 아니라 내부 동작 또한 간략화되어 있다.

화상표 함수는 

- 생성자 함수로 사용할 수 없다.
- 기존 함수와 this 바인딩 방식이 다르다.
- prototype 프로퍼티가 없다.
- arguments 객체를 생성하지 않는다.

---

# 5. 함수 호출

> 함수는 함수를 가리키는 식별자와 한 쌍의 소괄호인 함수 호출 연산자로 호출한다.

함수를 호출하면 현재의 실행 흐름을 중단하고 호출된 함수로 실행 흐름을 옮긴다. 

<br>

## **매개변수와 인수**

함수를 실행하기 위해 필요한 값을 함수 외부에서 함수 내부로 전달할 필요가 있는 경우, 매개변수(parameter,인자)를 통해 인수(argument)를 전달한다. 

```js
// 함수 선언문
function add(x, y) {
  return x + y;
}

// 함수 호출
// 인수 1과 2는 매개변수 x와 y에 순서대로 할당되고 함수 몸체의 문들이 실행된다.
var result = add(1, 2);
```

함수가 호출되면 함수 몸체 내에서 암묵적으로 매개변수가 생성되고 일반 변수와 마찬가지로 undefined로 초기화된 이후 인수가 순서대로 할당된다. 

매개변수의 스코프(유효 범위)는 함수 내부다.

```js
function add(x, y) {
  console.log(x, y); // 2 5
  return x + y;
}

add(2, 5);

// add 함수의 매개변수 x, y는 함수 몸체 내부에서만 참조할 수 있다.
console.log(x, y); // ReferenceError: x is not defined
```

함수는 매개변수의 개수와 인수의 개수가 일치하지 않아도 된다.
인수가 부족해서 인수가 할당되지 않은 매개변수의 값은 undefined다.

<br>

```js
function add(x, y) {
  return x + y;
}

console.log(add(2)); // NaN
```

매개변수보다 인수가 더 많은 경우 초과된 인수는 무시된다.

```js
function add(x, y) {
  return x + y;
}

console.log(add(2, 5, 10)); // 7
```

**초과된 인수는 그냥 버려지는게 아니라 암묵적으로 argument 객체의 프로퍼티로 보관된다.**

```js
function add(x, y) {
  console.log(arguments);
  // Arguments(3) [2, 5, 10, callee: ƒ, Symbol(Symbol.iterator): ƒ]

  return x + y;
}

add(2, 5, 10);
```

## **인수 확인**

```js
function add(x, y) {
  return x + y;
}

console.log(add(2));        // NaN
console.log(add('a', 'b')); // 'ab'
```

1. 자바스크립트 함수는 매개변수와 인수의 개수가 일치하는지 확인하지 않는다.

2. 자바스크립트 동적 타입 언어다. 따라서 자바스크립트 함수는 매개변수의 타입을 사전에 지정할 수 없다.

- `typeof`로 타입 체크하기
  
    ```js
    function add(x, y) {
      if (typeof x !== 'number' || typeof y !== 'number') {
        // 매개변수를 통해 전달된 인수의 타입이 부적절한 경우 에러를 발생시킨다.
        throw new TypeError('인수는 모두 숫자 값이어야 합니다.');
      }

      return x + y;
    }

    console.log(add(2));        // TypeError: 인수는 모두 숫자 값이어야 합니다.
    console.log(add('a', 'b')); // TypeError: 인수는 모두 숫자 값이어야 합니다.
    ```

- 단축 평가를 활용해 기본값 할당하기

    ```js
    function add(a, b, c) {
      a = a || 0;
      b = b || 0;
      c = c || 0;
      return a + b + c;
    }

    console.log(add(1, 2, 3)); // 6
    console.log(add(1, 2)); // 3
    console.log(add(1)); // 1
    console.log(add()); // 0
    ```

- 매개변수 기본값을 사용하기

    ```js
    function add(a = 0, b = 0, c = 0) {
      return a + b + c;
    }

    console.log(add(1, 2, 3)); // 6
    console.log(add(1, 2)); // 3
    console.log(add(1)); // 1
    console.log(add()); // 0
    ```

## **매개변수의 최대 개수**

ECMAScript 사양에서는 매개변수의 최대 개수에 대해 명시적으로 제한하고 잇지 있지 않다.

매개변수는 순서에 의미가 있다.

**한 가지 일만 해야 하며 가급적 작게 만들어야 한다.**

매개변수는 최대 3개 이상을 넘지 않는 것을 권장한다. 그 이상의 매개변수가 필요하다면 객체를 인수로 전달하는 것이 유리하다

- jQuery의 ajax 메서드에 객체를 인수로 전달하는 예
    ```js
    $.ajax({
      method: 'POST',
      url: '/user',
      data: { id: 1, name: 'Lee' },
      cache: false
    });
    ```

**함수 외부에서 함수 내부로 전달한 객체를 함수 내부에서 변경하면 함수 외부의 객체가 변경되는 부수효과(side effect)가 발생한다.**

## **반환문**

>함수는 return 키워드와 표현식(반환값)으로 이뤄진 반환문을 사용해 실행 결과를 함수 외부로 반환(return)할 수 있다.

```js
function multiply(x, y) {
  return x * y; // 반환문
}

// 함수 호출은 반환값으로 평가된다.
var result = multiply(3, 5);
console.log(result); // 15
```

함수는 return 키워드를 사용해 자바스크립트에서 사용 가능한 모든 값을 반환할 수 있다.

**함수 호출은 표현식이다.** 

반환문은 두 가지 역할을 한다. 

- 반환문은 함수의 실행을 중단하고 함수 몸체를 빠져나간다. 

    ```js
    function multiply(x, y) {
      return x * y; // 반환문
      // 반환문 이후에 다른 문이 존재하면 그 문은 실행되지 않고 무시된다.
      console.log('실행되지 않는다.');
    }

    console.log(multiply(3, 5)); // 15
    ```

    반환문 이후에 다른 문이 존재하면 그 문은 실행되지 않고 무시된다.

- 반환문은 return 키워드 뒤에 오는 표현식을 평가해 반환한다. 

  ```js
  function foo () {
    return;
  }

  console.log(foo()); // undefined
  ```

  retrun 키워드 뒤에 표현식이 없으면 undefined가 반환된다.

- 반환문은 생략할 수 있다. 

    ```js
    function foo () {
      // 반환문을 생략하면 암묵적으로 undefined가 반환된다.
    }

    console.log(foo()); // undefined
    ```

    마지막 문까지 실행한 후 암묵적으로 undefined를 반환한다.

  return 키워드와 반환값으로 사용할 표현식 사이에 줄바꿈이 있으면 세미콜론 자동 삽입 기능으로 의도치 않은 결과가 발생할 수 있다.

반환문은 함수 몸체 내부에서만 사용할 수 있다. 전역에서 반환문을 사용하면 문법 에러가 발생한다.

---

# 6. 참조에 의한 전달과 외부 상태의 변경

원시 값은 값에 의한 전달(pass by value), 객체는 참조에 의한 전달(pass by reference)방식으로 동작한다.


```js
// 매개변수 primitive는 원시 값을 전달받고, 매개변수 obj는 객체를 전달받는다.
function changeVal(primitive, obj) {
  primitive += 100;
  obj.name = 'Kim';
}

// 외부 상태
var num = 100;
var person = { name: 'Lee' };

console.log(num); // 100
console.log(person); // {name: "Lee"}

// 원시 값은 값 자체가 복사되어 전달되고 객체는 참조 값이 복사되어 전달된다.
changeVal(num, person);

// 원시 값은 원본이 훼손되지 않는다.
console.log(num); // 100

// 객체는 원본이 훼손된다.
console.log(person); // {name: "Kim"}
```

- 원시 타입 인수는 값 자체가 복사되어 매개변수에 전달되기 때문에 함수 몸체에서 그 값을 변경(재할당을 통한 교체)해도 원본은 훼손되지 않는다.(부수 효과도 발생하지 않는다.) 

- 객체 타입 인수는 참조 값이 복사되어 매개변수에 전달되기 때문에 함수 몸체에서 참조 값을 통해 객체를 변경할 경우 원본이 훼손된다.(부수 효과가 발생한다.)


# 7. 다양한 함수의 형태

## **즉시 실행 함수**

>함수 정의와 동시에 즉시 호출되는 함수를 즉시 실행 함수라고 한다. 즉시 실행 함수는 단 한 번만 호출되며 다시 호출할 수 없다.

```js
// 익명 즉시 실행 함수
(function () {
  var a = 3;
  var b = 5;
  return a * b;
}());
```

익명 함수를 사용하는 것이 일반적이다. 함수 이름이 있는 기명 즉시 실행 함수도 사용할 수 있다. 

하지만 그룹 연산자(...) 내의 기명 함수는 함수 선언문이 아니라 함수 리터럴로 평가되며 함수 이름은 함수 몸체에서만 참조할 수 있는 식별자이므로 즉시 실행 함수는 다시 호출할 수는 없다.

```js
// 기명 즉시 실행 함수
(function foo() {
  var a = 3;
  var b = 5;
  return a * b;
}());

foo(); // ReferenceError: foo is not defined
```

즉시 실행 함수는 반드시 그룹 연산자(...)로 감싸야 한다.

에러가 발생하는 이유들

- 함수 선언문은 함수 이름을 생략할 수 없다.
  ```js
  function () { // SyntaxError: Function statements require a function name
    // ...
  }();
  ```

- 세미콜론 자동 삽입 기능으로 함수 코드 블록의 닫느 중괄호 뒤에 "`;`" 암묵적으로 추가된다.

  ```js
  function foo() {
    // ...
  }(); // SyntaxError: Unexpected token ')'
  ```

함수 선언문 뒤의 (...)는 함수 호출 연산자가 아니라 그룹 연산자로 해석되고, 그룹 연산자에 피연산자가 없기 때문에 에러가 발생한다.

```js
function foo() {}(); // => function foo() {};();
```

그룹 연산자 이외의 연산자를 사용해도 좋다.

```js
(function () {
  // ...
}());

(function () {
  // ...
})();

!function () {
  // ...
}();

+function () {
  // ...
}();
```

즉시 실행 함수도 일반 함수처럼 값을 반환할 수 있고 인수를 전달할 수도 있다.

```js
// 즉시 실행 함수도 일반 함수처럼 값을 반환할 수 있다.
var res = (function () {
  var a = 3;
  var b = 5;
  return a * b;
}());

console.log(res); // 15

// 즉시 실행 함수에도 일반 함수처럼 인수를 전달할 수 있다.
res = (function (a, b) {
  return a * b;
}(3, 5));

console.log(res); // 15
```

## **재귀 함수**

>함수가 자기 자신을 호출하는 것을 재귀 함수(recursive call)이라 한다. 

재귀 함수는 반복되는 처리를 위해 사용한다.

- 반복문 (for)

  ```js
  function countdown(n) {
    for (var i = n; i >= 0; i--) console.log(i);
  }

  countdown(10);
  ```

- 재귀 함수

  ```js
  function countdown(n) {
    if (n < 0) return;
    console.log(n);
    countdown(n - 1); // 재귀 호출
  }

  countdown(10);
  ```

재귀 함수는 자신을 무한 재귀 호출한다. 따라서 재귀 함수 내에는 재귀 호출을 멈출 수 있는 **탈출 조건을 받드시 만들어야 한다.**

## **중첩 함수**

>함수 내부에 정의된 함수를 중첩 함수(nested function) 또는 내부 함수(inner function)라 한다. 그리고 중첩 함수를 포함하는 함수는 외부 함수(outer function)라 부른다.

중첩 함수는 외부 함수 내부에서만 호출할 수 있다. 일반적으로 중첩 함수는 자신을 포함하는 외부 함수를 돕는 헬퍼 함수(helper function)의 역할을 한다.

```js
function outer() {
  var x = 1;

  // 중첩 함수
  function inner() {
    var y = 2;
    // 외부 함수의 변수를 참조할 수 있다.
    console.log(x + y); // 3
  }

  inner();
}

outer();
```

ES6부터 함수 정의는 문이 위치할 수 잇는 문맥이라면 어디든지 가능하다.

단, 호이스팅으로 인해 혼란이 발생할 수 있으므로 if문이나 for문 등의 코드 블록에서 함수 선언문을 통해 함수를 정의하는 것은 바람직하지 않다.

## **콜백 함수**

함수의 매개변수를 통해 다른 함수 내부로 전달되는 함수를 콜백 함수(callback function)라고 하며, 매개 변수를 통해 함수의 외부에서 콜백 함수를 전달받은 함수를 고차 함수(Higher-Order Function,HOF)라고 한다.

```js
// 외부에서 전달받은 f를 n만큼 반복 호출한다.
function repeat(n, f) {
  for (var i = 0; i < n; i++) {
    f(i); // i를 전달하면서 f를 호출
  }
}

var logAll = function (i) {
  console.log(i);
};

// 반복 호출할 함수를 인수로 전달한다.
repeat(5, logAll); // 0 1 2 3 4

var logOdds = function (i) {
  if (i % 2) console.log(i);
};

// 반복 호출할 함수를 인수로 전달한다.
repeat(5, logOdds); // 1 3
```

**고차 함수는 콜백함수를 자신의 일부분으로 합성한다.**

**콜백 함수는 고차 함수에 의해 호출되며 이때 고차 함수는 필요에 따라 콜백 함수에 인스를 전달할 수 있다.**

- 콜백 함수가 고차 함수 내부에만 호출된다면 콜백 함수를 익명 함수 리터럴로 정의하면서 곧바로 고차 함수에 전달하는 것이 일반적이다.

  ```js
  // 익명 함수 리터럴을 콜백 함수로 고차 함수에 전달한다.
  // 익명 함수 리터럴은 repeat 함수를 호출할 때마다 평가되어 함수 객체를 생성한다.
  repeat(5, function (i) {
    if (i % 2) console.log(i);
  }); // 1 3
  ```

콜백 함수는 함수형 프로그래밍 패러다임뿐 아니라 비동기 처리(이벤트 처리, Ajax 통신, 타이머 함수등)에 활용되는 중요한 패턴이다.

```js
// 콜백 함수를 사용한 이벤트 처리
// myButton 버튼을 클릭하면 콜백 함수를 실행한다.
document.getElementById('myButton').addEventListener('click', function () {
  console.log('button clicked!');
});

// 콜백 함수를 사용한 비동기 처리
// 1초 후에 메시지를 출력한다.
setTimeout(function () {
  console.log('1초 경과');
}, 1000);
```

콜백 함수는 비동기 처리뿐 아니라 배열 고차 함수에서도 사용된다.

```js
// 콜백 함수를 사용하는 고차 함수 map
var res = [1, 2, 3].map(function (item) {
  return item * 2;
});

console.log(res); // [2, 4, 6]

// 콜백 함수를 사용하는 고차 함수 filter
res = [1, 2, 3].filter(function (item) {
  return item % 2;
});

console.log(res); // [1, 3]

// 콜백 함수를 사용하는 고차 함수 reduce
res = [1, 2, 3].reduce(function (acc, cur) {
  return acc + cur;
}, 0);

console.log(res); // 6
```

## **순수 함수와 비순수 함수**

>부수 효과가 없는 함수를 순수 함수(pure function)라 하고, 외부 상태에 의존하거나 외부 상태를 변경하는, 즉 부수 효과가 있는 함수를 비순수 함수(impure function)라고 한다.

<strong style="color:green;font-size:20px;">순수 함수</strong>

순수 함수는 동일한 인수가 전달되면 언제나 동일한 값을 반환하는 함수다. 즉, 순수 함수는 어떤 외부 상태에도 의존하지 않고 오직 매개변수를 통해 함수 내부로 전달된 인수에게만 의존해 값을 생성해 반환한다.

순수 함수는 일반적으로 최소 하나 이상의 인수를 전달받는다. 

순수 함수는

- 인수의 불변성을 유지한다.

- 어떤 외부 상태에도 의존하지 않으며 상태를 변경하지 않는다.

는 특징이 있다.

```js
var count = 0; // 현재 카운트를 나타내는 상태

// 순수 함수 increase는 동일한 인수가 전달되면 언제나 동일한 값을 반환한다.
function increase(n) {
  return ++n;
}

// 순수 함수가 반환한 결과값을 변수에 재할당해서 상태를 변경
count = increase(count);
console.log(count); // 1

count = increase(count);
console.log(count); // 2
```

<strong style="color:green;font-size:20px;">비순수 함수</strong>

반대로 함수의 외부 상태에 따라 반환값이 달리지는 함수, 다시 말해 외부 상태에 의존하는 함수를 비순수 함수라고 한다.

비순수 함수는 

- 함수의 외부 상태를 변경하는 부수 효과(side effect)가 있다. 즉, 비순수 함수는 외부 상태에 의존하거나 외부 상태를 변경하는 함수다.

라는 특징이 있다.

```js
var count = 0; // 현재 카운트를 나타내는 상태: increase 함수에 의해 변화한다.

// 비순수 함수
function increase() {
  return ++count; // 외부 상태에 의존하며 외부 상태를 변경한다.
}

// 비순수 함수는 외부 상태(count)를 변경하므로 상태 변화를 추적하기 어려워진다.
increase();
console.log(count); // 1

increase();
console.log(count); // 2
```

위 예제와 같이 인수를 전달받지 않은 함수 내부에서 외부 상태를 직접 참조하면 외부 상태에 의존하게 되어 반환값이 변할 수 있고, 외부 상태도 변경할 수 있으므로 비순수 함수가 된다.

함수 내부에서 외부 상태를 직접 참조하지 않더라도 매개변수를 통해 객체를 전달받으면 비순수 함수가 된다.