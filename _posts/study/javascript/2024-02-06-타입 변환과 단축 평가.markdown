---
layout: post
related_posts:
  - _posts/study/javascript/2024-02-04-제어문.markdown 
  - _posts/study/javascript/2024-02-08-객체 리터럴.markdown 
title: 타입 변환과 단축 평가
categories:
  - study
  - javascript
image: /assets/img/javascript/modern-javascript-book.png
permalink: '/:categories/:year/:month/:day/:title/'
description: >
  모던 자바스크립트 Deep Dive: 자바스크립트의 기본 개념과 동작 원리 - 09장 타입 변환과 단축 평가
---

* toc
{:toc}

# 1. 타입 변환이란?
>자바스크립트의 모든 값은 **타입**이 있다.<br>
>값의 타입은 개발자의 의도에 따라 다른 타입으로 변환할
  
<br>

- 개발자가 **의도적으로 값의 타입을 변환**하는 것을 **명시적 타입 변환(explicit coercion)** 또는 **타입 캐스팅(type castting)** 이라 한다.

    ```js
    var x = 10;

    // 명시적 타입 변환
    // 숫자를 문자열로 타입 캐스팅한다.
    var str = x.toString();
    console.log(typeof str, str); // string 10

    // x 변수의 값이 변경된 것은 아니다.
    console.log(typeof x, x); // number 10
    ```

<br>

- 개발자가 **의도와는 상관없이** 표현식을 평가하는 도중에 자바스크립트 엔진에 의해 암묵적으로 타입이 자동으로 변환되기도 한다.
    ```js
    var x = 10;

    // 암묵적 타입 변환
    // 문자열 연결 연산자는 숫자 타입 x의 값을 바탕으로 새로운 문자열을 생성한다.
    var str = x + '';
    console.log(typeof str, str); // string 10

    // x 변수의 값이 변경된 것은 아니다.
    console.log(typeof x, x); // number 10
    ```

<br>

    명시적 타입 변환이나 암묵적 타입 변환이 기존 원시 값(위 예제의 경우 x 변수 값)을 직접 변경하는 것은 아니다.

<br>

- 원시 값은 변경 불가능한 값(immutable value)이므로 변경할 수 없다.

- 타입 변환이란 **기존 원시 값을 사용해 다른 타입의 새로운 원시 값을 생성**하는 것이다.

<br>

**`암묵적 타입 변환`**

기존 변수 값을 재할당하여 변경하는 것이 아니다.

자바스크립트 엔진은 **표현식을 에러 없이 평가하기 위해** 피연산자의 값을 암묵적 타입 변환해 새로운 타입의 값을 만들어 단 한 번 사용하고 버린다.

**`명시적 타입 변환`**

- 타입 변경하겠다는 개발자의 의지가 코드에 명백히 드러난다.

<br>

- - -

# 2. 암묵적 타입 변환
>자바스크립트 엔진은 표현식을 평가할 때 개발자의 의도와는 상관없이 코드의 문맥을 고려해 암묵적으로 데이터 타입을 강제 변환(암묵적 타입 변환)한다.

<br>

```js
// 피연산자가 모두 문자열 타입이어야 하는 문맥
'10' + 2 // -> '102'

// 피연산자가 모두 숫자 타입이어야 하는 문맥
5 * '10' // -> 50

// 피연산자 또는 표현식이 불리언 타입이어야 하는 문맥
!0 // -> true
if (1) { }
```

<br>

이처럼 표현식을 평가할 때 코드의 문맥에 부합하지 않는 다양한 상황이 발생할 수 있다. 이때 프로그래밍 언어에 따라 에러를 발생하기도 하지만 자바스크립트는 가급적 에러를 발생시키지 않도록 암묵적 타입 변환을 통해 표현식을 평가한다.

- 암묵적 타입 변환이 발생하면 `문자열`, `숫자`, `불리언`과 같은 원시 타입 중 하나로 타입을 자동 변환한다.

<br>

## **문자열 타입으로 변환**

```js
1 + '2' // -> "12"
```

자바스크립트 엔진은 문자열 연산자 표현식을 평가하기 위해 **문자열 연결 연산자의 피연사자 중에서 문자열 타입이 아닌 피연산자를 문자열 타입으로 암묵적 타입 변환한다.**

 - ES6에서 도입된 템플릿 리터럴의 표현식 삽입은 표현식의 평가 결과를 문자열 타입으로 암묵적 타입 변환한다.
    ```js
    `1 + 1 = ${1 + 1}` // -> "1 + 1 = 2"
    ```

<br>

자바스크립트 엔진은 문자열 타입 아닌 값을 문자열 타입으로 암묵적 타입 변환을 수행할 때 다음과 같이 동작한다.

```js
// 숫자 타입
0 + ''         // -> "0"
-0 + ''        // -> "0"
1 + ''         // -> "1"
-1 + ''        // -> "-1"
NaN + ''       // -> "NaN"
Infinity + ''  // -> "Infinity"
-Infinity + '' // -> "-Infinity"

// 불리언 타입
true + ''  // -> "true"
false + '' // -> "false"

// null 타입
null + '' // -> "null"

// undefined 타입
undefined + '' // -> "undefined"

// 심벌 타입
(Symbol()) + '' // -> TypeError: Cannot convert a Symbol value to a string

// 객체 타입
({}) + ''           // -> "[object Object]"
Math + ''           // -> "[object Math]"
[] + ''             // -> ""
[10, 20] + ''       // -> "10,20"
(function(){}) + '' // -> "function(){}"
Array + ''          // -> "function Array() { [native code] }"
```

<br>

## **숫자 타입으로 변환**

- 산술 연산자
  ```js
  1 - '1'   // -> 0
  1 * '10'  // -> 10
  1 / 'one' // -> NaN
  ```

  자바스크립트 엔진은 **산술 연산자 표현식을 평가하기 위해 산술 연산자의 피연산자 중에서 숫자 타입이 아닌 피연산자를 숫자 타입으로 암묵적 타입 변환한다.**

  이때 피연산자를 숫자 타입으로 변환할 수 없는 경우는 산술 연산을 수행할 수 없으므로 표현식의 평가 결과는 **NaN**이 된다.

<br>

- 비교 연산자

  ```js
  '1' > 0  // -> true
  ```

  자바스크립트 엔진은 **비교 연산자 표현식을 평가하기 위해 연산자의 피연산자 중에서 숫자 타입이 아닌 피연산자를 숫자 타입으로 암묵적 타입 변환한다.**

<br>

자바스크립트 엔진은 숫자 타입이 아닌 값을 숫자 타입으로 암묵적 타입 변환을 수행할 때 다음과 같은 동작한다. 즉, + 단항 연산자는 피연산자가 숫자 타입의 값이 아니면 숫자 타입의 값으로 암묵적 타입 변환을 수행한다.

```js
// 문자열 타입
+''       // -> 0
+'0'      // -> 0
+'1'      // -> 1
+'string' // -> NaN

// 불리언 타입
+true     // -> 1
+false    // -> 0

// null 타입
+null     // -> 0

// undefined 타입
+undefined // -> NaN

// 심벌 타입
+Symbol() // -> TypeError: Cannot convert a Symbol value to a number

// 객체 타입
+{}             // -> NaN
+[]             // -> 0
+[10, 20]       // -> NaN
+(function(){}) // -> NaN
```

빈 문자열(`''`), 빈 배열(`[]`), `null`, `false`는 0으로 `true`는 1로 변환된다.

<br>

## **불리언 타입으로 변환**

```js
if ('') console.log(x);
```

자바스크립트 엔진은 **조건식의 평가 결과를 불리언 타입으로 암묵적 타입 변환한다.**

자바스크립트 엔진은 불리언 타입이 아닌 값을 

- `Truthy` 값(참으로 평가되는 값) = `true`

- `Falsy` 값(거짓으로 평가되는 값) = `false`

으로 구분된다.

`false`로 평가되는 `Falsy` 값들

- `false`
- `undefined`
- `null`
- `0`, `-0`
- `NaN`
- `''` (빈 문자열)

<br>

```js
// 아래의 조건문은 모두 코드 블록을 실행한다.
if (!false)     console.log(false + ' is falsy value');
if (!undefined) console.log(undefined + ' is falsy value');
if (!null)      console.log(null + ' is falsy value');
if (!0)         console.log(0 + ' is falsy value');
if (!NaN)       console.log(NaN + ' is falsy value');
if (!'')        console.log('' + ' is falsy value');
```

<br>

`Falsy` 값 외의 모든 값은 모두 `true`로 평가되는 `Truthy` 값이다.

<br>

- - -

# 3. 명시적 타입 변환
>표준 빌트인 생성자 함수(String, Number, Boolean)를  new 연산자 없이 호출하는 방법과 빌트인 메서드를 사용하는 방법, 그리고 앞에서 살펴본 암묵적 타입 변환을 이용하는 방법이 있다.

<br>

    표준 빌트인(built-in) 생성자 함수와 표준 빌트인 메서드는 자바스크립트에서 기본 제공하는 함수다. 표준 빌트인 생성자 함수는 객체를 생성하기 위한 함수이며 new 연산자와 함께 호출한다. 표준 빌트인 메서드는 자바스크립트에서 기본 제공하는 빌트인 객체의 메서드다.

<br>

## **문자열 타입으로 변환**

문자열 타입이 아닌 값을 문자열 타입으로 변환하는 방법은 다음과 같다.

1. `String`  생성자 함수를 new 연산자 없이 호출하는 방법
    ```js
    // 숫자 타입 => 문자열 타입
    String(1);        // -> "1"
    String(NaN);      // -> "NaN"
    String(Infinity); // -> "Infinity"
    // 불리언 타입 => 문자열 타입
    String(true);     // -> "true"
    String(false);    // -> "false"
    ```

2. `Object` `.prototype` `.toString` 메서드를 사용하는 방법
    ```js
    // 숫자 타입 => 문자열 타입
    (1).toString();        // -> "1"
    (NaN).toString();      // -> "NaN"
    (Infinity).toString(); // -> "Infinity"
    // 불리언 타입 => 문자열 타입
    (true).toString();     // -> "true"
    (false).toString();    // -> "false" 
    ```

3. 문자열 연결 연산자를 이용하는 방법
    ```js
    // 숫자 타입 => 문자열 타입
    1 + '';        // -> "1"
    NaN + '';      // -> "NaN"
    Infinity + ''; // -> "Infinity"
    // 불리언 타입 => 문자열 타입
    true + '';     // -> "true"
    false + '';    // -> "false"
    ```

  <br>

  ## **숫자 타입으로 변환**

  숫자 타입이 아닌 값을 숫자 타입으로 변환하는 방법은 다음과 같다.

1. `Number` 생성자 함수를 new 연산자 없이 호출하는 방법
    ```js
    // 문자열 타입 => 숫자 타입
    Number('0');     // -> 0
    Number('-1');    // -> -1
    Number('10.53'); // -> 10.53
    // 불리언 타입 => 숫자 타입
    Number(true);    // -> 1
    Number(false);   // -> 0
    ```

2. `parseInt`, `parseFloat` 함수를 사용하는 방법(문자열만 숫자 타입으로 변환 가능)
    ```js
    // 문자열 타입 => 숫자 타입
    parseInt('0');       // -> 0
    parseInt('-1');      // -> -1
    parseFloat('10.53'); // -> 10.53
    ```

3. `+` 단항 산술 연산자를 이용하는 방법
    ```js
    // 문자열 타입 => 숫자 타입
    +'0';     // -> 0
    +'-1';    // -> -1
    +'10.53'; // -> 10.53
    // 불리언 타입 => 숫자 타입
    +true;    // -> 1
    +false;   // -> 0
    ```

4. `*` 산술 연산자를 이용하는 방법
    ```js
    // 문자열 타입 => 숫자 타입
    '0' * 1;     // -> 0
    '-1' * 1;    // -> -1
    '10.53' * 1; // -> 10.53
    // 불리언 타입 => 숫자 타입
    true * 1;    // -> 1
    false * 1;   // -> 0
    ```

<br>

## **불리언 타입으로 변환**

불리언 타입이 아닌 값을 불리언 타입으로 변환하는 방법은 다음과 같다.

1. `Boolean` 생성자 함수를 new 연산자 없이 호출하는 방법
    ```js
    // 문자열 타입 => 불리언 타입
    Boolean('x');       // -> true
    Boolean('');        // -> false
    Boolean('false');   // -> true
    // 숫자 타입 => 불리언 타입
    Boolean(0);         // -> false
    Boolean(1);         // -> true
    Boolean(NaN);       // -> false
    Boolean(Infinity);  // -> true
    // null 타입 => 불리언 타입
    Boolean(null);      // -> false
    // undefined 타입 => 불리언 타입
    Boolean(undefined); // -> false
    // 객체 타입 => 불리언 타입
    Boolean({});        // -> true
    Boolean([]);        // -> true
    ```
    
2. `!` 부정 논리 연산자를 두번 사용하는 방법
    ```js
    // 문자열 타입 => 불리언 타입
    !!'x';       // -> true
    !!'';        // -> false
    !!'false';   // -> true
    // 숫자 타입 => 불리언 타입
    !!0;         // -> false
    !!1;         // -> true
    !!NaN;       // -> false
    !!Infinity;  // -> true
    // null 타입 => 불리언 타입
    !!null;      // -> false
    // undefined 타입 => 불리언 타입
    !!undefined; // -> false
    // 객체 타입 => 불리언 타입
    !!{};        // -> true
    !![];        // -> true
    ```

<br>

- - -

# 4. 단축 평가

## **논리 연산자를 사용한 단축 평가**

>논리합(`||`) 또는 논리곱(`&&`) 연산자 표현식은 평가 결과는 불리언 값이 아닐 수도 있다.

<br>

논리합(`||`) 또는 논리곱(`&&`) 연산자 표현식은 언제나 2개의 피연산자 중 어느 한쪽으로 평가된다

- 논리곱(`&&`) 연산자는 두 개의 피연산자가 모두 `true`로 평가될 때 `true`를 반환한다.

    ```js
    'Cat' && 'Dog' // -> "Dog"
    ```

  논리곱 연산자는 좌항에 우항으로 평가가 진행된다.

  1. 첫 번째 피연산자 'Cat'은 `Truthy` 값이므로 `true`로 평가된다.

  2. 두 번째 피연산자까지 평가해 보아야 위 표현식을 평가할 수 있다.

  3. 두 번째 피연산자가 위 논리곱 연산자 표현식의 평가 결과를 결정한다.

  4. 논리곱 연산자는 논리 연산의 결과를 결정한느 두 번째 피연산자, 즉 문자열 'Dog'를 그대로 반환된다.

<br>

- 논리합(`||`) 연산자는 두 개의 피연산자 중 하나만 `true`로 평가되어도 `true`를 반환한다.

    ```js
    'Cat' || 'Dog' // -> "Cat"
    ```  

  논리합 연산자도 죄항에서 우항으로 평가가 진행된다.

  1. 첫 번째 피연산자 'Cat'은 `Truthy` 값이므로 `true`로 평가된다.
  2. 이 시점에 두 번째 피연산자까지 평가해 보지 않아도 위 표현식을 평가할 수 있다.
  3. 이때 논리합 연산자는 논리 연산의 결과를 결정한 첫 번째 피연산자, 즉 문자열 'Cat'을 그대로 반환한다.

<br>

논리곱 연산자와 논리합 연산자는 이처럼 논리 연산의 결과를 결정하는 피연산자를 타입 변환하지 않고 그대로 반환한다. 이를 단축 평가(short-circuit eveluation)라 한다.

<br>

>**단축 평가** <br>
>표현식을 평가하는 도중에 평가 결과가 확정된 경우 나머지 평가 과정을 생략하는 것을 말한다.

<br>

<table>
  <tr>
    <th>단축 평가 표현식</th>
    <th>평가 결과</th>
  </tr>

  <tr>
    <td>true || anything</td>
    <td>true</td>
  </tr>

  <tr>
    <td>false || anything</td>
    <td>anything</td>
  </tr>


  <tr>
    <td>true && anything</td>
    <td>anything</td>
  </tr>

  <tr>
    <td>false && anything</td>
    <td>false</td>
  </tr>
</table>

<br>

```js
// 논리합(||) 연산자
'Cat' || 'Dog'  // -> "Cat"
false || 'Dog'  // -> "Dog"
'Cat' || false  // -> "Cat"

// 논리곱(&&) 연산자
'Cat' && 'Dog'  // -> "Dog"
false && 'Dog'  // -> false
'Cat' && false  // -> false
```

<br>

단축 평가를 사용하면 `if`문을 대체할 수 있다.

조건이 `Truthy`값(참으로 평가되는 값)일 때 무언가를 해야 한다면 논리곱(`&&`) 연산자 표현식으로 `if`문을 대체할 수 있다.


```js
var done = true;
var message = '';

// 주어진 조건이 true일 때
if (done) message = '완료';

// if 문은 단축 평가로 대체 가능하다.
// done이 true라면 message에 '완료'를 할당
message = done && '완료';
console.log(message); // 완료
```

<br>

조건이 `Falsy`값(거짓으로 평가되는 값)일 때 무언가를 해야 한다면 논리합(`||`) 연산자 표현식으로 `if`문을 대체할 수 있다.

```js
var done = false;
var message = '';

// 주어진 조건이 false일 때
if (!done) message = '미완료';

// if 문은 단축 평가로 대체 가능하다.
// done이 false라면 message에 '미완료'를 할당
message = done || '미완료';
console.log(message); // 미완료
```

<br>

참고로 삼항 조건 연산자는 `if ...else`문을 대체할 수 있다.

```js
var done = true;
var message = '';

// if...else 문
if (done) message = '완료';
else      message = '미완료';
console.log(message); // 완료

// if...else 문은 삼항 조건 연산자로 대체 가능하다.
message = done ? '완료' : '미완료';
console.log(message); // 완료
```

<br>

<strong style="color:green; font-size:20px;">객체를 가리키기를 기대하는 변수가 null 또는 undefined가 아닌지 확인하고 프로퍼티를 참조할 때</strong>

**객체는 키(key)와 값(value)으로 구성된 프로퍼티(property)의 집합이다.** 

- 만약 객체를 가리키기를 기대하는 변수의 값이 객체가 아니라 null 또는 undefined인 경우 객체의 프로퍼티를 참조하면 타입 에러(TypeError)가 발생한다.

  ```js
  var elem = null;
  var value = elem.value; // TypeError: Cannot read property 'value' of null
  ```

- 이때 단축 평가를 사용하면 에러를 발생시키지 않는다.

  ```js
  var elem = null;
  // elem이 null이나 undefined와 같은 Falsy 값이면 elem으로 평가되고
  // elem이 Truthy 값이면 elem.value로 평가된다.
  var value = elem && elem.value; // -> null
  ```

<br>

<strong style="color:green; font-size:20px;">함수 매개변수에 기본값을 설정할 때</strong>

함수를 호출할 때 인수를 전달하지 않으면 매개변수에는 undefined가 할당된다.

- 단축 평가를 사용해 매개변수의 기본값을 설정하면 undefined로 인해 발생할 수 있는 에러를 발지할 수 있다.

  ```js
  // 단축 평가를 사용한 매개변수의 기본값 설정
  function getStringLength(str) {
    str = str || '';
    return str.length;
  }

  getStringLength();     // -> 0
  getStringLength('hi'); // -> 2

  // ES6의 매개변수의 기본값 설정
  function getStringLength(str = '') {
    return str.length;
  }

  getStringLength();     // -> 0
  getStringLength('hi'); // -> 2
  ```

<br>

## **옵셔널 체이닝 연산자**
>ES11(ECMAScript2020)에서 도입된 옵셔널 체이닝(optional change) 연산자 `?.`는 좌항의 피연산자가 `null` 또는 `undefined`인 경우 `undefined`를 반환하고, 그렇지 않으면 우항의 프로퍼티 참조를 이어간다.

<br>

```js
var elem = null;

// elem이 null 또는 undefined이면 undefined를 반환하고, 그렇지 않으면 우항의 프로퍼티 참조를 이어간다.
var value = elem?.value;
console.log(value); // undefined
```

옵셔널 체이닝 연산자 `?.`는 객체를 가리키기를 기대하는 변수가 `null` 또는 `undefined`가 아닌지 확인하고 프로퍼티를 참조할 때 유용하다.

  - 옵셔널 체이닝 연산자 `?.`는 좌항 피연산자가 `false`로 평가되는 `Falsy`값(`false`, `undefined`, `null`, `0`, `-0`, `NaN`, `''`)이라도 `null` 또는 `undefined`가 아니면 **우항의 프로퍼티 참조를 이어간다.**
    ```js
    var str = '';

    // 문자열의 길이(length)를 참조한다. 이때 좌항 피연산자가 false로 평가되는 Falsy 값이라도
    // null 또는 undefined가 아니면 우항의 프로퍼티 참조를 이어간다.
    var length = str?.length;
    console.log(length); // 0
    ```

  <br>

## **null 병합 연산자**
>ES11(ECMAScript2020)에서 도입된 null 병합(nullish coalescing) 연산자 `??`는 좌항의 피연산자가 `null` 또는 `undefined`인 경우 우항의 피연산자를 반환하고, 그렇지 않으면 좌항의 피연산자를 반환한다.

<br>

null 병합 연산자 `??`는 변수에 기본값을 설정할 때 유용하다.

```js
// 좌항의 피연산자가 null 또는 undefined이면 우항의 피연산자를 반환하고, 그렇지 않으면 좌항의 피연산자를 반환한다.
var foo = null ?? 'default string';
console.log(foo); // "default string"
```

<br>

null 병합 연산자 `??`는 변수에 기본값을 설정할 때 유용하다.

- null 병합 연산자 `??`는 좌항의 피연산자가 `false`로 평가되는 `Falsy`값(`false`, `undefined`, `null`, `0`, `-0`, `NaN`, `''`)이라도 `null` 또는 `undefined`가 아니면 **좌항의 피연산자를 그대로 반환한다.**

    ```js
    // 좌항의 피연산자가 Falsy 값이라도 null 또는 undefined가 아니면 좌항의 피연산자를 반환한다.
    var foo = '' ?? 'default string';
    console.log(foo); // ""
    ```