---
layout: post
related_posts:
  - _posts/study/javascript/2024-01-23-변수.markdown
  - _posts/study/javascript/2024-01-29-데이터 타입.markdown
title: 표현식과 문
categories:
  - study
  - javascript
image: /assets/img/javascript/modern-javascript-book.png
permalink: '/:categories/:year/:month/:day/:title/'
description: >
  모던 자바스크립트 Deep Dive: 자바스크립트의 기본 개념과 동작 원리 - 05장 표현식과 문
---

* toc
{:toc}

# 1. 표현식과 문
>값(value)은 식(expression)이 평가(evaluate)되어 생성된 결과를 말한다.

<br>

**평가**란 식을 해석해서 값을 생성하거나 참조하는 것을 의미한다.

<br>

```js
// 10 + 20은 평가되어 숫자 값 30을 생성한다.
10 + 20; // 30
```

변수의 **하나의 값**을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름이라고 했다. 따라서 **변수에 할당되는 것은 값**이다.

<br>

```js
// 변수에는  10 + 20이 평가되어 생성된 숫자 값 30이 할당된다.
var sum = 10 + 20;
```

위 예제의 sum 변수에 할당되는 것은 10 + 20이 아니라 10 + 20이 **평가된 결과의 숫자 값** 30이다. 따라서  10 + 20은 할당 이전에 평가되어 값을 생성해야 한다.


> **값이란 식이 평가되어 생성된 결과이다.**

<br>

- - -

# 2. 리터럴
> **리터럴(literal)** 은 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 **표기법(notation)** 을 말한다.

<br>

리터럴은 사람이 이해할 수 있는 문자인 `아라비아 숫자(1,2,3)`, `알파벳(a,b)`, `한글(가,나)` 또는 미리 약속된 기호 `""`, `.` , `[]`, `{}`, `//` 등 표기한 코드를 말한다.

자바스크립트 엔진은 코드가 실행되는 시점인 **런타임(runtime)** 에 리터럴을 평가해 값을 생성한다.


| 리터럴 종류   | 예시                                      | 설명                                               |
|--------------|-------------------------------------------|----------------------------------------------------|
| 정수 리터럴   | `42`, `-10`                               | 정수 값을 나타냅니다.                              |
| 부동소수점 리터럴 | `3.14`, `-0.01`                          | 부동소수점 값을 나타냅니다.                        |
| 불리언 리터럴   | `true`, `false`                           | 불리언 값인 참(true) 또는 거짓(false)을 나타냅니다.  |
| 문자열 리터럴   | `'Hello, World!'`, `"123"`                | 문자열 값을 나타냅니다.                            |
| 문자 리터럴     | `'a'`, `'1'`                               | 하나의 문자를 나타냅니다.                          |
| 배열 리터럴     | `[1, 2, 3]`, `['apple', 'banana']`        | 배열을 나타내며, 여러 값을 순서대로 포함합니다.      |
| 객체 리터럴     | `{ key: 'value', age: 25 }`               | 키-값 쌍을 포함하는 객체를 나타냅니다.              |
| 정규 표현식 리터럴 | `/pattern/`                            | 정규 표현식을 나타냅니다.                          |
| 함수 리터럴     | `function() { /* 코드 */ }`               | 함수를 나타냅니다.                                |
| null 리터럴     | `null`                                    | 값이 없음을 나타냅니다.                            |
| undefined 리터럴 | `undefined`                               | 값이 할당되지 않았음을 나타냅니다.                |

<br>

- - -

# 3. 표현식
> **표현식(expression)** 은  값으로 평가될 수 있는 문(statement)이다.<br>
> 즉, **표현식**이 평가되면 새로운 값을 **생성**하거나 기존 값을 **참조**한다.

리터럴은 값으로 평가된다. 따라서 리터럴도 **표현식**이다.
<br>

**표현식**은 리터럴, 식별자(변수, 함수 등의 이름), 연산자, 함수 호출 등의 조합으로 이뤄질 수 있다.

<br>

>**값으로 평가될 수 있는 문은 모두 표현식이다.**

<br>

**표현식 종류**

- 리터럴  표현식
```js
10
'Hello'
```

- 식별자 표현식(선언이 이미 존재한다고 가정)
```js
sum
person.name
arr[1]
```

- 연산자 표현식
```js
10 + 20
sum = 10
sum !== 10
```

- 함수/메서드 호출 표현식(선언이 이미 존재한다고 가정)
```js
square()
person.getName()
```
<br>


## **동치**
> 표현식과 표현식이 평가된 값은 동등한 관계, 즉 **동치(equivalent)** 다.

<br>

표현식은 값처럼 사용할 수 있다. 이것은 문법적으로 값이 위치할 수 있는 자리에는 표현식도 위치할 수 있다는 것을 의미한다.

```js
var x = 1 + 2;

// 식별자 표현식 x는 3으로 평가된다.
x + 3; // -> 6
```

산술 연산자 `+`의 좌항과 우항에는 숫자 값이 위치해야 한다. 이때 숫자 값으로 평가될 수 있는 표현식이라면 숫자 값 대신 사용할 수 있다.

<br>

- - -

# 4. 문
>**문(statement)** 은 프로그램을 구성하는 기본 단위이자 최소 실행 단위이다.

<br>

문의 집합으로 이뤄진 것이 바로 프로그램이며, 문을 작성하고 순서에 맞게 나열하는 것이 프로그래밍이다.

<br>

문은 여러 **토큰**으로 구성된다.


## **토큰(token)**

> **토큰(token)** 이란 문법적인 의미를 가지며, 문법적으로 더 이상 나눌 수 없는 코드의 기본 요소를 의미한다.

<br>

```js
// 문
[var sum = 1 + 2]

// 토큰
[var] [sum] [=] [1] [+] [2]
```

<br>

## **문(statement)**
문은 명령문이라고도 부른다. 즉, 문은 컴퓨터에 내리는 명령이다.

- 변수 선언문
```js
var x;
```

- 할당문
```js
x = 5;
```
- 함수 선언문
```js
function foo() {}
```

- 조건문
```js
if(x > 1) { console.log(x);}
```

- 반복문
```js
for(var i = 0; i < 2; i++) { console.log(i); }
```

<br>

- - -

# 5. 세미콜론과 세미콜론 자동 삽입 기능

> 세미콜론`;`은 문의 종료를 나타낸다.

<br>

즉, 자바스크립트 엔진은 세미콜론으로 문이 종료한 위치를 파악하고 순차적으로 하나씩 문을 실행한다. 따라서 문을 끝날 때는 세미콜론을 붙여야한다.

- 문의 끝에 붙이는 세미콜론은 옵션이다.
- 세미콜론은 생략 가능하다.
- 세미콜론 자동 삽입 기능(ASI autimatic semicolon insertion)이 암죽적으로 수행되기 때문이다.

자동 삽입 기능의 동작과 개발자의 예측이 일치하지 않는 경우도 간혹 있다.

<br>

- - -

# 6. 표현식인 문과 표현식이 아닌 문
> 표현식은 문의 일부일 수도 있고 그 자체로 문이 될 수도 있다.

<br>

- 표현식인 문은 값으로 평가될 수 있는 문

할당문은 값으로 평가될 수 있다. 따라서 표현식인 문이다.
```js
// 변수 선언문은 표현식이 아닌 문이다.
var x;

// 할당문은 그 자체가 표현식이지만 완전한 문이기도 하다. 즉, 할당문은 표현식인 문이다.
x = 100;

// 표현식인 문은 값처럼 사용할 수 있다.
var foo = x = 100;
console.log(foo); // 100
```


- 표현식이 아닌 문의 값으로 평가될 수 없는 문

변수 선언문은 값으로 평가될 수 없다. 따라서 표현식이 아닌 문이다.
```js
// 표현식이 아닌 문은 값처럼 사용할 수 없다.
var foo = var x; // SyntaxError: Unexpected token var
```

<br>

**표현식인 문과 표현식이 아닌 문을 구별하는 가장 간단하고 명료한 방법은 변수에 할당해 보는 것이다.**