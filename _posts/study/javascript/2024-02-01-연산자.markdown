---
layout: post
related_posts:
  - _posts/study/javascript/2024-01-31-데이터 타입.markdown
  - _posts/study/javascript/2024-02-04-제어문.markdown
title: 연산자
categories:
  - study
  - javascript
image: /assets/img/javascript/modern-javascript-book.png
permalink: '/:categories/:year/:month/:day/:title/'
description: >
  모던 자바스크립트 Deep Dive: 자바스크립트의 기본 개념과 동작 원리 - 07장 연산자
---

* toc
{:toc}

**연산자(operator)** 는 하나 이상의 표현식을 대항으로 산술, 할당, 비교, 논리, 타입, 지수 연산(operation) 등을 수행해 하나의 값을 만든다. 

연산의 대상을 **피연산자(operand)** 라 한다. 피연산자는 값으로 평가될 수 있는 표현식이어야 한다.

```js
// 산술 연산자
5 * 4 // -> 20

// 문자열 연결 연산자
'My name is ' + 'Lee' // -> 'My name is Lee'

// 할당 연산자
color = 'red' // -> 'red'

// 비교 연산자
3 > 5 // -> false

// 논리 연산자
true && false // -> false

// 타입 연산자
typeof 'Hi' // -> string
```

- 피연산자가 **`값`** 이라는 `명사`의 역할
- 연산자는 **`피연사자를 연산하여 새로운 값을 만든다`**라는 `동사`의 역할을 한다.

피연산자는 연산의 대상이 되어야 하므로 값으로 평가할 수 있어야 한다. 연산자는 값으로 평가된 피연산자를 연산해 새로운 값을 만든다.

# 1. **산술 연산자**

> **산술 연산자(arithmetic operator)** 는 피연산자를 대상으로 수학적 계산을 수행해 새로운 숫자 값을 만든다. 산술 연산이 불가능한 경우, NaN을 반환한다.

산술 연산자는 피연사자의 개수에 따라 이항 산술 연산자와 단항 산술 연산자로 구분한다.

## **이항 산술 연산자**

>이항(binary) 산술 연산자는 2개의 피연산자를 산술 연산하여 숫자 값을 만든다.

모든 이항 산술 연산자는 피연산자의 값을 변경하는 부수 효과(side effect)가 없다. 

|이항 산술 연산자|의미|부수 효과|
|:---:|:---:|:---:|
|+|덧셈|❌|
|-|뺄셈|❌|
|*|곱셈|❌|
|/|나눗셈|❌|
|%|나머지|❌|

```js
5 + 2; // -> 7
5 - 2; // -> 3
5 * 2; // -> 10
5 / 2; // -> 2.5
5 % 2; // -> 1
```

## **단항 산술 연산자**

>**단항(unary) 산술 연산자**는 2개의 피연산자를 산술 연산하여 숫자 값을 만든다.

|단항 산술 연산자|의미|부수 효과|
|:---:|:---:|:---:|
|++|증가|⭕|
|--|감소|⭕|
|+|어떠한 효과도 없다. 음수를 양수로 반전하지도 않는다.|❌|
|-|양수를 음수로, 음수를 양수로 반전한 값을 반환한다.|❌|

>**주의할 점**<br>
>이항 산술 연산자와 달리 **증가/감소(++/--)연산자는 피연산자의 값을 변경하는 부수 효과가 있다.**

```js
var x = 1;

// ++ 연산자는 피연산자의 값을 변경하는 암묵적 할당이 이뤄진다.
x++; // x = x + 1;
console.log(x); // 2

// -- 연산자는 피연산자의 값을 변경하는 암묵적 할당이 이뤄진다.
x--; // x = x - 1;
console.log(x); // 1
```

>증가/감소(++/--)연산자는 위치에 의미가 있다.

- 피연산자 `앞`에 위치한 `전위` 증가/감소 연산자는 **먼저 피연산자의 값을 증가/감소시킨 후**, 다른 연산을 수행한다.
- 피연산자 `뒤`에 위치한 `후위` 증가/감소 연산자는 **먼저 다른 연산을 수행한 후**, 피연산자의 값을 증가/감소 시킨다.

```js
var x = 5, result;

// 선할당 후증가(postfix increment operator)
result = x++;
console.log(result, x); // 5 6

// 선증가 후할당(prefix increment operator)
result = ++x;
console.log(result, x); // 7 7

// 선할당 후감소(postfix decrement operator)
result = x--;
console.log(result, x); // 7 6

// 선감소 후할당 (prefix decrement operator)
result = --x;
console.log(result, x); // 5 5
```

숫자 타입이 아닌 피연산자에 `+`단항 연산자를 사용하면 피연산자를 숫자 타입으로 변환하여 반환한다. 이때 **숫자 타입으로 변환한 값을 생성해서 반환한다.**

```js
var x  = '1';

// 문자열을 숫자로 타입 변환한다.
console.log(+x); // 1
// 부수 효과는 없다.
console.log(x);  // "1"

// 불리언 값을 숫자로 타입 변환한다.
x = true;
console.log(+x); // 1
// 부수 효과는 없다.
console.log(x);  // true

// 불리언 값을 숫자로 타입 변환한다.
x = false;
console.log(+x); // 0
// 부수 효과는 없다.
console.log(x);  // false

// 문자열을 숫자로 타입 변환할 수 없으므로 NaN을 반환한다.
x = 'Hello';
console.log(+x); // NaN
// 부수 효과는 없다.
console.log(x);  // "Hello"
```

- `-` 단한 연산자는 피연산자의 부호를 반전한 값을 반환한다.
- `+` 단항 연산자와 마찬가지로 숫자 타입이 아닌 피연산자에 사용하면 피연산자를 숫자 타입으로 변환하여 반환한다.

```js
// 부호를 반전한다.
-(-10); // -> 10

// 문자열을 숫자로 타입 변환한다.
-'10'; // -> -10

// 불리언 값을 숫자로 타입 변환한다.
-true; // -> -1

// 문자열은 숫자로 타입 변환할 수 없으므로 NaN을 반환한다.
-'Hello'; // -> NaN
```

## **문자열 연결 연산자**

>**`+` 연산자는 피연산자 중 하나 이상이 문자열인 경우 문자열 연결 연산자로 동작한다.**


```js
// 문자열 연결 연산자
'1' + 2; // -> '12'
1 + '2'; // -> '12'

// 산술 연산자
1 + 2; // -> 3

// true는 1로 타입 변환된다.
1 + true; // -> 2

// false는 0으로 타입 변환된다.
1 + false; // -> 1

// null은 0으로 타입 변환된다.
1 + null; // -> 1

// undefined는 숫자로 타입 변환되지 않는다.
+undefined;    // -> NaN
1 + undefined; // -> NaN
```

바스크립트 엔진에 의해 암죽적으로 타입이 자동 변환되기도 하는데 이를 **암묵적 타입 변환(implicit coercion)** 또는 **타입 강제 변환(type coercion)** 이라고 한다.

# 2. **할당 연산자**

>**할당 연산자(assignment operator)** 는 우할에 있는 피연산자의 평가 결과를 좌항에 있는 변수에 할당한다.

<br>

할당 연산자는 좌항의 변수에 값을 할당하므로 변수 값이 변하는 부수 효과가 있다.

|할당 연산자|예|동일 연산자|부수 효과|
|:---:|:---:|:---:|:---:|
|=|x = 5|x = 5|⭕|
|+=|x += 5|x = x + 5|⭕|
|-=|x -= 5|x = x - 5|⭕|
|*=|x *= 5|x = x * 5|⭕|
|/=|x /= 5|x = x / 5|⭕|
|%=|x %= 5|x = x % 5|⭕|

```js
var x;

x = 10;
console.log(x); // 10

x += 5; // x = x + 5;
console.log(x); // 15

x -= 5; // x = x - 5;
console.log(x); // 10

x *= 5; // x = x * 5;
console.log(x); // 50

x /= 5; // x = x / 5;
console.log(x); // 10

x %= 5; // x = x % 5;
console.log(x); // 0

var str = 'My name is ';

// 문자열 연결 연산자
str += 'Lee'; // str = str + 'Lee';
console.log(str); // 'My name is Lee'
```

표현식은 값으로 평가될 수 있는 문이고, **문에는 표현식인 문과 표현식이 아닌 문**이 있다.

<br>

```js
var x;
// 할당문은 표현식인 문이다.
console.log(x = 10); // 10
```

할당문은 값으로 평가되는 표현식인 문으로서 할당된 값으로 평가된다. 위 예제의 할당문 x = 10에 x에 할당된 숫자 값 10으로 평가된다.

<br>

```js
var a, b, c;

// 연쇄 할당. 오른쪽에서 왼쪽으로 진행.
// ① c = 0 : 0으로 평가된다
// ② b = 0 : 0으로 평가된다
// ③ a = 0 : 0으로 평가된다
a = b = c = 0;

console.log(a, b, c); // 0 0 0
```

# 3. **비교 연산자**
>**비교 연산자(cimparison operator)** 는 좌항과 우항의 피연산자를 비교한 다음 그 결과를 불리언 값으로 반환한다.

<br>

비교 연산자는 `if문` 이나 `for문`과 같은 제어문의 조건식에서 주로 사용한다.

## **동등/일치 비교 연산자**

>**동등 비교(loose equallity)** 연산자와 **일치 비교(strict equaility)** 연산자는 좌항과 우항의 피연산자가 `같은 값`으로 평가되는지 비교해 불리언 값을 반환한다.

|비교 연산자|의미|사례|설명|부수 효과|
|:---:|:---:|:---:|:---:|:---:|
|==|동등 비교|x == y|x와 y의 값이 같음|❌|
|===|일치 비교|x === y|x와 y의 값과 타입이 같음|❌|
|!=|부동등 비교|x != y|x와 y의 값이 다름|❌|
|!==|불일치 비교|x !== y|x와 y의 값과 타입이 다름|❌|

### **동등 비교 연산자**

**동등 비교(==) 연산자는 좌항과 우항의 피연산자를 비교할 때 먼저 암묵적 타입 변환을 통해 타입을 일치시킨 후 같은 값으로 비교한다.**

```js
// 동등 비교
5 == 5; // -> true

// 타입은 다르지만 암묵적 타입 변환을 통해 타입을 일치시키면 동등하다.
5 == '5'; // -> true
```

```js
// 동등 비교. 결과를 예측하기 어렵다.
'0' == ''; // -> false
0 == '';   // -> true
0 == '0';  // -> true
false == 'false';   // -> false
false == '0';       // -> true
false == null;      // -> false
false == undefined; // -> false
```

이처럼 동등 비교(==) 연산자는 예측하기 어려운 결과를 만들어낸다.

### **일치 비교 연산자**

**일치 비교(===) 연산자는 좌항과 우항의 피연산자가 타입도 같고 값도 같은 경우에 한하여 true를 반환한다.**

```js
// 일치 비교
5 === 5; // -> true

// 암묵적 타입 변환을 하지 않고 값을 비교한다.
// 즉, 값과 타입이 모두 같은 경우만 true를 반환한다.
5 === '5'; // -> false
```

- 일치 비교 연산자에서 주의할 것은 NaN이다.

```js
// NaN은 자신과 일치하지 않는 유일한 값이다.
NaN === NaN; // -> false
```

**NaN은 자신과 일치하지 않는 유일한 값이다.** 

- 숫자는 NaN인지 조사하려면 빌트인 함수 `Number.isNaN`을 사용한다.

```js
// Number.isNaN 함수는 지정한 값이 NaN인지 확인하고 그 결과를 불리언 값으로 반환한다.
Number.isNaN(NaN); // -> true
Number.isNaN(10);  // -> false
Number.isNaN(1 + undefined); // -> true
```

- 숫자 0도 주의하자, 자바스크립트에는 `양의 0`과 `음의 0`이 있는데 이들을 비교하면 true를 반환한다.

```js
// 양의 0과 음의 0의 비교. 일치 비교/동등 비교 모두 결과는 true이다.
0 === -0; // -> true
0 == -0;  // -> true
```

>동등 비교 연산자(==)와 일치 비교 연산자(===)는 +0과 -0을 동일하다는 평가한다. 또한 동일한 값인 NaN과 NaN을 비교하면 다른 값이라고 평가한다. 


`Object.is` 메서드는 다음과 같이 예측 가능한 정확한 비교 결과를 반환한다.

```js
-0 === +0;         // -> true
Object.is(-0, +0); // -> false

NaN === NaN;         // -> false
Object.is(NaN, NaN); // -> true
```

### **부동등 && 불일치 비교 연산자**

- 부동등 비교 연산자(!=)와 불일치 비교 연산자(!==)는 각각 동등 비교(==) 연산자와 일치 비교(===) 연산자의 **반대 개념**이다.

```js
// 부동등 비교
5 != 8;   // -> true
5 != 5;   // -> false
5 != '5'; // -> false

// 불일치 비교
5 !== 8;   // -> true
5 !== 5;   // -> false
5 !== '5'; // -> true
```

<br>

## **대소 관계 비교 연산자**

>대소 관계 비교 연산자는 피연산자의 **크기를 비교**하여 **불리언 값을 반환**한다.

|대소 관계 비교 연산자|예제|설명|부수 효과|
|:---:|:---:|:---:|:---:|
|>|x > y|x가 y보다 크다|❌|
|<|x < y|x가 y보다 작다|❌|
|>=|x >= y|x가 y보다 크거나 같다|❌|
|<=|x <= y|x가 y보다 작거나 같다|❌|

```js
// 대소 관계 비교
5 > 0;  // -> true
5 > 5;  // -> false
5 >= 5; // -> true
5 <= 5; // -> true
```

# 4. **삼항 조건 연산자**

>**삼항 조건 연산자(ternary operator)** 는 조건식의 평가 결정에 따라 반환할 값을 결정한다.

자바스크립트의 유일한 삼항 연산자이며, 부수 효과는 없다.

>조건식 ? 조건식이 `true`일 때 반환할 값 : 조건식이 `false`일 때 반환할 값

삼항 조건 연산자는 
- 첫 번째 피연산자가 `true`로 평가되면 두 번째 피연산자를 반환
- 첫 번째 피연산자가 `false`로 평가되면 세 번째 피연산자를 반환

**물음표(?)** 앞의 첫 번째 피연산자는 **조건식**, 즉 불리언 타입의 값으로 평가될 표현식이다.

```js
var x = 2;

// 2 % 2는 0이고 0은 false로 암묵적 타입 변환된다.
var result = x % 2 ? '홀수' : '짝수';

console.log(result); // 짝수
```

>`삼항 조건` 연산자 표현식은 `if ...else문`과 중요한 차이가 있다.<br>
>`삼항 조건` 연산자는 표현식은 값처럼 사용할 수 있지만 `if ...else문`은 값처럼 사용할 수 없다.

# 5. **논리 연산자**

>논리 연산자(logical operator)는 우항괴 좌항의 피연산자(부정 논리 연산자의 경우 우항의 피연산자)를 논리 연산 한다.

<table>
  <tr>
    <td>논리 연산자</td>
    <td>의미</td>
    <td>부수 효과</td>
  </tr>
  
  <tr>
    <td>||</td>
    <td>논리합(OR)</td>
    <td>❌</td>
  </tr>
  <tr>
    <td>&&</td>
    <td>논리곱(AND)</td>
    <td>❌</td>
  </tr>
  <tr>
    <td>!</td>
    <td>부정(NOT)</td>
    <td>❌</td>
  </tr>
</table>

```js
// 논리합(||) 연산자
true || true;   // -> true
true || false;  // -> true
false || true;  // -> true
false || false; // -> false

// 논리곱(&&) 연산자
true && true;   // -> true
true && false;  // -> false
false && true;  // -> false
false && false; // -> false

// 논리 부정(!) 연산자
!true;  // -> false
!false; // -> true
```

논리 부정(!) 연산자는 언제나 불리언 값을 반환한다. 

```js
// 암묵적 타입 변환
!0;       // -> true
!'Hello'; // -> false
```

논리합`(||)` 또는 논리곱`(&&)` 연산자 표현식의 평가 결과는 불리언 값이 아닐 수도 있다. 논리합`(||)` 또는 논리곱`(&&)` 연산자 표현식은 언제나 2개의 피연산자 중 어느 한쪽으로 평가된다.

<br>

```js
// 단축 평가
'Cat' && 'Dog'; // -> 'Dog'
```

<br>

# 6. **쉼표 연산자**

>**쉼표`(,)`** 연산자는 왼쪽 피연산자부터 차례대로 피연산자를 평가하고 마지막 피연산자의 평가가 끝나면 마지막 피연산자의 평가 결과를 반환한다.

```js
var x, y, z;

x = 1, y = 2, z = 3; // 3
```

# 7. **그룹 연산자**

>소괄호(`()`)로 연산자를 감싸는 그룹 연산자는 자신의 피연산자인 표현식을 가장 먼저 평가한다. 

```js
10 * 2 + 3; // -> 23

// 그룹 연산자를 사용하여 우선순위를 조절
10 * (2 + 3); // -> 50
```

# 8. **typeof 연산자**

>typeof 연산자는 피연산자의 데이터 타입을 문자열을 반환한다. 

typeof 연산자는 7가지 문자열을 가진다.

- `string`
- `number`
- `boolean`
- `undefined`
- `symbol`
- `object`
- `function`

```js
typeof ''              // -> "string"
typeof 1               // -> "number"
typeof NaN             // -> "number"
typeof true            // -> "boolean"
typeof undefined       // -> "undefined"
typeof Symbol()        // -> "symbol"
typeof null            // -> "object"
typeof []              // -> "object"
typeof {}              // -> "object"
typeof new Date()      // -> "object"
typeof /test/gi        // -> "object"
typeof function () {}  // -> "function"
```

`typeof` 연산자로 null 값을 연산해 보면 `null`이 아닌 `object`를 반환한다는데 주의하자. 

값이 **null 타입인지 확인할 대는 typeof 연산자를 사용하지 말고 일치 연산자(===)를 사용**하자.

```js
var foo = null;

typeof foo === null; // -> false
foo === null;        // -> true
```

선언하지 않은 식별자를 `typeof`연산자로 연산해 보면 **ReferenceError**가 발생하지 않고 **undefined**를 반환한다.

```js
// undeclared 식별자를 선언한 적이 없다.
typeof undeclared; // -> undefined
```

# 9. **지수 연산자**

>ES7에서 도입된 **지수 연산자**는 좌항의 피연산자를 밑(base)으로, 우항의 피연산자를 지수(exponent)로 거듭 제곱하여 숫자 값을 반환한다.

```js
2 ** 2;   // -> 4
2 ** 2.5; // -> 5.65685424949238
2 ** 0;   // -> 1
2 ** -2;  // -> 0.25
```

음수를 거듭제곱 밑으로 사용해 계산하려면 다음과 같이 괄호를 묶어야 한다.

```js
-5 ** 2;
// SyntaxError: Unary operator used immediately before exponentiation expression.
// Parenthesis must be used to disambiguate operator precedence

(-5) ** 2; // -> 25
```

**지수 연산자는 이항 연산자 중에서 우선 순위가 가장 높다.**

# 10. **그 외의 연산자**

|연산자|개요|
|:---:|:---:|
|?.|옵셔널 체이닝 연산자|
|??|null 병합 연산자|
|delete|프로퍼티 삭제|
|new|생성자 함수를 호출할 때 사용하여 인스턴스를 생성|
|instanceof|좌변의 객체가 우변의 생성자 함수와 연결된 인스턴스인지 판별|
|in|프로퍼티 존재 확인|

# 11. **연산자의 부수 효과**

대부분의 연산자는 다른 코드에 영향을 주지 않는다.

>부수 효과가 있는 연산자는 할당 연산자(=), 증가/감소 연산자(++/--), delete 연산자다.

```js
var x;

// 할당 연산자는 변수 값이 변하는 부수 효과가 있다.
// 이는 x 변수를 사용하는 다른 코드에 영향을 준다.
x = 1;
console.log(x); // 1

// 증가/감소 연산자(++/--)는 피연산자의 값을 변경하는 부수 효과가 있다.
// 피연산자 x의 값이 재할당되어 변경된다. 이는 x 변수를 사용하는 다른 코드에 영향을 준다.
x++;
console.log(x); // 2

var o = { a: 1 };

// delete 연산자는 객체의 프로퍼티를 삭제하는 부수 효과가 있다.
// 이는 o 객체를 사용하는 다른 코드에 영향을 준다.
delete o.a;
console.log(o); // {}
```

# 12. **연산자 우선순위**

>**연산자 우선순위**린 여러 개의 연산자로 이뤄진 문이 실행될 때 연산자가 실행되는 순서를 말한다. <br>
>우선순위가 높을수록 먼저 실행한다.

<table>
  <tr>
    <td>우선순위</td>
    <td>연산자</td>
  </tr>

  <tr>
    <td>1</td>
    <td>()</td>
  </tr>
  <tr>
    <td>2</td>
    <td>new(매개변수 존재), [](프로퍼티 접근), ()(함수 호출), ? .(옵셔널 체이닝 연산자)</td>
  </tr>
  <tr>
    <td>3</td>
    <td>new(매개변수 미존재)</td>
  </tr>
  <tr>
    <td>4</td>
    <td>x++, x--</td>
  </tr>
  <tr>
    <td>5</td>
    <td>!x, +x, ,-x, ++x, --x, typeof, ,, delte</td>
  </tr>
  <tr>
    <td>6</td>
    <td>**(이항 연산자 중에서 우선순위가 가장 높다)</td>
  </tr>
  <tr>
    <td>7</td>
    <td>*, /, %</td>
  </tr>
  <tr>
    <td>8</td>
    <td>+, -</td>
  </tr>
  <tr>
    <td>9</td>
    <td><, <=, >, >=, in instanceof</td>
  </tr>
  <tr>
    <td>10</td>
    <td>==, !=, ===, !==</td>
  </tr>
  <tr>
    <td>11</td>
    <td>??(null 병합 연산자)</td>
  </tr>
  <tr>
    <td>12</td>
    <td>&&</td>
  </tr>
  <tr>
    <td>13</td>
    <td>||</td>
  </tr>
  <tr>
    <td>14</td>
    <td>? ... : ...</td>
  </tr>
  <tr>
    <td>15</td>
    <td>할당 연산자(=, +=, -=, ...)</td>
  </tr>
  <tr>
    <td>16</td>
    <td>,</td>
  </tr>
</table>

<br>

**그룹 연산자를 사용하여 우선순위를 명시적으로 조절**

```js
10 * (2 + 3); // -> 50
```

# 13. **연산자 결합 순서**

>연산자 결합 순서란 연산자의 어느 쪽(좌항 또는 우항)부터 평가를 수행할 것인지를 나타내는 순서를 말한다.

<table>
  <tr>
    <td>결합 순서</td>
    <td>연산자</td>
  </tr>

  <tr>
    <td>좌항 -> 후항</td>
    <td>+, -, /, %, <, <=, >, >=, &&, ||, ., [], (), ??, ?., in, instance of</td>
  </tr>

  <tr>
    <td>우항 -> 좌항</td>
    <td>++, --, 할당 연산자(=, +=, -=, ...), !x, +x, -x, ++x, --x, typeof, delete, ? ... | ..., **</td>
  </tr>
</table>