---
layout: post
related_posts:
  - _posts/study/javascript/2024-02-18-스코프.markdown
  - _posts/study/javascript/2024-02-23-let, const 키워드와 블록 레벨 스코프.markdown
title: 전역 변수의 문제점
categories:
  - study
  - javascript
image: /assets/img/javascript/modern-javascript-book.png
permalink: '/:categories/:year/:month/:day/:title/'
description: >
  모던 자바스크립트 Deep Dive: 자바스크립트의 기본 개념과 동작 원리 - 14장 전역 변수의 문제점
---

* toc
{:toc}

---

# 1. 변수의 생명 주기

## **지역 변수의 생명 주기**

변수는 선언에 의해 생성되고 할당을 통해 값을 갖는다. 그리고 언젠가 소멸한다. **즉, 변수는 생물과 유사하게 생성되고 소멸되는 생명 주기(life cycle)가 있다.** 변수에 생명 주기가 없다면 한번 선언된 변수는 프로그램을 종료하지 않는 한 영원히 메모리 공간을 점유하게 된다.

변수는 자신이 선언된 위치에서 생성되고 소멸한다. 함수 내부에서 선언된 지역 변수는 함수가 호출되면 생성되고 함수가 종료하면 소멸한다.

```js
function foo() {
  var x = 'local';
  console.log(x); // local
  return x;
}

foo();
console.log(x); // ReferenceError: x is not defined
```

변수 선언은 코드가 한 줄씩 순차적으로 실행되는 시점인 런타임에 실행되는 것이 아니라 **런타임 이전 단계에서 자바스크립트 엔진에 의해 먼저 실행된다.**

**지역 변수의 생명 주기는 함수의 생명 주기와 일치한다.**

- 함수 몸체 내부에서 선언된 지역 변수의 생명 주기는 함수의 생명 주기와 대부분의 일치하지만 지역 변수가 함수보다 오래 생존하는 경우도 있다.

변수의 생명 주기는 메모리 공간이 확보(allocate)된 시점부터 메모리 공간이 해체(release)되어 가용 메모리 풀(memory pool)에 반환되는 시점까지다.

누군가가 메모리 공간을 참조하고 있으면 해체되지 않고 확보된 상태로 남아 있게 된다. 이는 스코프도 마찬가지다.

일반적으로 함수가 종료하면 함수가 생성한 스코프도 소멸한다. 하지만 누군가가 스코프를 참조하고 있다면 스코프는 해체되지 않고 생존하게 된다.

```js
var x = 'global';

function foo() {
  console.log(x); // ①
  var x = 'local';
}

foo();
console.log(x); // global
```

지역 변수는 함수 전체에서 유효하다. 단, 변수 할당문이 실행되기 이전까지는 undefined 값을 갖는다.

이 처럼 **호이스팅은 스코프를 단위로 동작한다.**

- 전역 변수의 호이스팅은 전역 변수의 선언이 전역 스코프의 선두로 끌어 올려진 것처럼 동작한며 전역 변수는 전역 전체에서 유효하다.

- 지역 변수의 호이스팅은 지역 변수의 선언이 지역 스코프의 선두로 끌어 올려진 것처럼 동작하며 지역 변수는 함수 전체에서 유효하다.

**호이스팅은 변수 선언이 스코프의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 말한다.**

## **전역 변수의 생명 주기**

함수와 달리 전역 코드는 명시적인 호출 없이 실행된다. 함수 호출과 같이 전역 코드를 실행하는 진입점이 없고 코드가 로드되자마자 곧바로 해석되고 실행된다. 함수는 함수 몸체의 마지막 문 또는 반환문이 실행되면 종료한다.

하지만 전역 코드에는 반환문을 사용할 수 없으므로 마지막 문이 실행되어 더 이상 실행할 문이 없을 때 종료한다.

`var` 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 된다. 이는 전역 변수의 생명 주기가 전역 객체의 생명 주기와 일치한다는 것을 말한다.

<strong style="color:orange;">전역 객체(global object)</strong>

    전역 객체는 코드가 실행되기 이전 단계에 자바스크립트 엔진에 의해 어떤 객체보다도 먼저 생성되는 특수한 객체다.

    전역 객체는 표준 빌트인 객체(Object, String, Number, Function, Array...)와 환경에 따른 호스트 객체(클라이언트 Web API 또는 Node.js의 호스트 API) 그리고 var 키워드로 선언한 전역 변수와 전역 함수를 프로퍼티로 갖는다.

브라우저 환경에선 전역 객체는 window이므로 브라우저 환경에서 `var` 키워드로 선언한 전역 변수는 전역 객체 window의 프로퍼티다. 전역 객체 window는 웹페이지를 닫기 전까지 유효하다. 따라서 브라우저 환경에서 `var` 키워드로 선언한 전역 변수는 웹페이지를 닫을 때까지 유효하다. 

**`var` 키워드로 선언한 전역 변수의 생명 주기는 전역 객체의 생명 주기와 일치한다.**

---

# 2. 전역 변수의 문제점

<strong style="color:white;background:green;padding:3px;">암묵적 결합</strong>

전역 변수는 코드 어디서든 참조하고 할당할 수 있는 변수를 사용하겠다는 것이다. 

**이는 모든 코드가 전역 변수를 참조하고 변경할 수 있는 암묵적 결합(implicit coupling)을 허용하는 것이다.**

<strong style="color:white;background:green;padding:3px;">긴 생명 주기</strong>

**전역 변수는 생명 주기가 길다.** 따라서 메모리 리소스도 오랜 시간 소비한다. 또한 전역 변수의 상태를 변경할 수 있는 시간도 길고 기회도 많다. 또한 `var` 키워드는 변수의 중복 선언을 허용하므로 생명 주기가 긴 전역 변수는 변수 이름이 중복될 가능성이 있다.

```js
var x = 1;

// ...

// 변수의 중복 선언. 기존 변수에 값을 재할당한다.
var x = 100;
console.log(x); // 100
```

지역 변수는 전역 변수보다 생명 주기가 횔씬 짧다. 크지 않은 함수의 지역 변수는 생존 시간이 극히 짧다. 따라서 지역 변수의 상태를 변경할 수 있는 시간도 짧고 기회도 적다. 

<strong style="color:white;background:green;padding:3px;">스코프 체인에서 종점에 존재</strong>

전역 변수는 스코프 체인 상에서 종점에 존재한다. 이는 변수를 검색할 때 전역 변수가 가장 마지막에 검색된다.

**즉, 전역 변수의 검색 속도가 가장 느리다.** 검색 속도의 차이는 그다지 크지 않지만 속도의 차이는 분명히 있다.

<strong style="color:white;background:green;padding:3px;">네임스페이스 오염</strong>

자바스크립트의 가장 큰 문제점 중 하나의 파일이 분리되어 있다 해도 하나의 전역 스코프를 공유한다는 것이다. 

다른 파일 내에서 동일한 이름으로 명명된 전역 변수나 전역 함수가 같은 스코프 내에 존재할 경우 예상치 못한 결과를 가져올 수 있다.

---

# 3. 전역 변수의 사용을 억제하는 방법

전역 변수의 무분별한 사용은 위험하다. 또한 **변수의 스코프는 좁을수록 좋다.**

## **즉시 실행 함수**

**모든 코드를 즉시 실행 함수로 감사면 모든 변수는 실행 함수의 지역 변수가 된다.**

```js
(function () {
  var foo = 10; // 즉시 실행 함수의 지역 변수
  // ...
}());

console.log(foo); // ReferenceError: foo is not defined
```

## **네임스페이스 객체**

전역에 네임스페이스(namespace) 역할을 담당할 객체를 생성하고 전역 변수처럼 사용하고 싶은 변수를 프로퍼티로 추가하는 방법이다.

```js
var MYAPP = {}; // 전역 네임스페이스 객체

MYAPP.name = 'Lee';

console.log(MYAPP.name); // Lee
```

```js
var MYAPP = {}; // 전역 네임스페이스 객체

MYAPP.person = {
  name: 'Lee',
  address: 'Seoul'
};

console.log(MYAPP.person.name); // Lee
```

네임스페이스 객체 자체가 전역 변수에 할당되므로 그다지 유용하지는 않다.

## **모듈 패턴**

모듈 패턴은 클래스를 모방해서 관련이 있는 변수와 함수를 모아 즉시 실행 함수로 감싸 하나의 모듈을 만든다. 

모듈 패턴은 클로저를 기반으로 동작한다. 모듈 패턴의 특징은 전역 변수의 억제는 물론 캡슐화까지 구현할 수 있다는 것이다.

<strong style="color:orange;">캡슐화(encapsulation)</strong>

    객체의 상태(state)를 나타내는 프로퍼티와 프로퍼티를 참조하는 동작(behavior)인 메서드를 하나로 묶는 것을 말한다. 

**모듈 패턴은 전역 네임스페이스의 오염을 막는 기능은 물론 한정적이기는 하지만 정보 은닉을 구현하기 위해 사용한다.**

```js
var Counter = (function () {
  // private 변수
  var num = 0;

  // 외부로 공개할 데이터나 메서드를 프로퍼티로 추가한 객체를 반환한다.
  return {
    increase() {
      return ++num;
    },
    decrease() {
      return --num;
    }
  };
}());

// private 변수는 외부로 노출되지 않는다.
console.log(Counter.num); // undefined

console.log(Counter.increase()); // 1
console.log(Counter.increase()); // 2
console.log(Counter.decrease()); // 1
console.log(Counter.decrease()); // 0
```

## **ES6 모듈**

ES6 모듈을 사용하면 더는 전역 변수를 사용할 수 없다. **ES6 모듈은 파일 자체의 독자적인 모듈 스코프를 제공한다.**

따라서 모듈 내에서 var 키워드로 선언한 변수는 더는 전역 변수가 아니며 window 객체의 프로퍼티도 아니다.

script 태그에 type="module" 어트리뷰트를 추가하면 로드된 자바스크립트 파일은 모듈로서 동작한다. (파일 확장자는 mjs를 권장)

```js
<script type="module" src="lib.mjs"></script>
<script type="module" src="app.mjs"></script>
```