---
layout: post
related_posts:
  - _posts/study/javascript/2024-01-29-표현식과 문.markdown
title: 변수
categories:
  - study
  - javascript
image: /assets/img/javascript/modern-javascript-book.png
permalink: '/:categories/:year/:month/:day/:title/'
description: >
  모던 자바스크립트 Deep Dive: 자바스크립트의 기본 개념과 동작 원리 - 04장 변수
---

* toc
{:toc}

# 1. 변수란 무엇인가? 왜 필요한가?

**변수**는 프로그래밍 언에에서 데이터를 관리하기 위한 핵심 개념이다. 

> **변수**는 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름을 말한다.

변수는 프로그래밍 언어에서 값을 저장하고 참조하는 메커니즘으로, **값의 위치를 가리키는 상징적인 이름**이다. 

- 메모리 공간에 저장된 값을 식별할 수 있는 고유한 이름을 **변수 이름**
- 변수에 저장된 값을 **변수 값**
- 변수에 값을 저장하는 것을 **할당(assignment,대입,저장)**
- 변수에 저장된 값을 읽어 들이는 것을 **참조(reference)**

- - -

# 2. 식별자

> 변수 이름을 **식별자(identifier)** 라고도 한다. **식별자는 어떤 값을 구별해서 식별할 수 있는 고유한 이름을 말한다.**

- **식별자는 값이 아니라 메모리 주소를 기억하고 있다.**
- 식별자로 값을 구별해서 식별한다는 것은 식별자가 기억하고 있는 메모리 주소를 통해 메모리 공간에 저장된 값에 접근할 수 있다는 의미다.

메모리 상에 존재하는 어떤 값을 식별할 수 있는 이름은 모두 식별자라고 한다.

- - -

# 3. 변수 선언

>변수 선언(variable declaration)이란 변수를 생성하는 것을 말한다.

값을 저장하기 위한 메모리 공간을 확하고 변수 이름과 확보된 메모리 공간의 주소를 연결해서 값을 저장할 수 있게 준비하는 것이다.

**변수를 선언할 때는 `var`, `let`, `const` 키워드를 사용한다.**

## var 키워드의 단점

- 블록 스코프를 지원하지 않고 함수 레벨 스코프를 지원한다는 것이다.

## 변수 선언

```js
var score; // 변수 선언(변수 선언문)
```

**자바스크립트 엔진의 변수 선언 단계**

1. **선언 단계** : 변수 이름을 등록해서 자바스크립트 엔진에 변수의 존재를 알린다.
2. **초기화 단계** : 값을 저장하기 위해 메모리 공간을 확보하고 암묵적으로 undefined를 할당해 초기화한다.

만약 초기화 단계를 거치지 않으면 확보된 메모리 공간에는 이전에 다른 애플리케이션이 사용했던 값을 **쓰레기 값(garbage value)**이라 한다.

만약 선언하지 않은 식별자에 접근하면 **ReferenceError(참조 에러)**가 발생한다.

> **ReferenceError(참조 에러)**<br>
> 식별자를 통해 값을 참조하려 했지만 자바스크립트 엔진이 등록된 식별자를 찾을 수 없을 때 발생하는 에러다.

- - -

# 4. 변수 선언의 실행 시점과 변수 호이스팅

```js
console.log(score); // undefined

var score; // 변수 선언문
```

<br>

**자바스크립트 코드는 인터프리터의 의해 한 줄씩 순서적으로 실행된다.**

1. console.log(score) 실행
2. var score 실행

이 순서대로 실행이 되면 참조 에러(ReferenceError)가 발생해야 한다. 하지만 참조 에러가 발생하지 않고 undefined가 출력된다.

그 이유는 **변수 선언이 소스코드가 한 줄씩 순차적으로 실행되는 시점, 즉 런타임(runtime)이 아니라 그 이전 단계에서 먼저 실행되기 때문이다.**

1. **먼저 소스코드의 평가 과정을 거치면서 소스코드를 실행하기 위한 준비**를 한다.
2. 이때 소스코드 실행을 위한 준비 단계인 소스코드의 평가 과정에서 자바스크립트 엔진은 변수 선언을 포함한 모든 **선언문(변수 선언문, 함수 선언문 등)을 소스코드에서 찾아내서 먼저 실행**한다.
3. 소스코드의 평가 과정이 끝나면 비로소 변수 선언을 포함한 모든 **선언문을 제외하고 소스코드를 한 줄씩 순차적으로 실행**한다.

변수 선언이 소스코드의 어디에 위치하는지와 상관없이 어디서든지 변수를 참조할 수 있다.

<br>

> 변수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 변수 **호이스팅(variable hosting)이라 한다.**
>

<br>

- - -

# 5. 값의 할당
> 변수에 값을 할당(assignment)(대입, 저장)할 때는 할당 연산자 `=` 를 사용합니다.

**변수 선언은 소스코드가 순차적으로 실행되는 시점인 런타임 이전에 먼저 실행되지만 값의 할당은 소스코드가 순차적으로 실행되는 시점인 런타임에 실행된다.**

```js
console.log(score); // undefined

var score;  //변수 선언
score = 80; // 값의 할당

console.log(score); //80
```

**변수 선언**은 런타임 이전에 먼저 실행되고 **값의 할당**은 런타임에 실행된다. 따라서 score 변수에 값을 할당하는 시점에는 이미 **변수 선언**이 완료된 상태이며, 이미 undefined로 초기화되어 있다. 

```js
console.log(score); // undefined

var score = 80; // 변수 선언과 값의 할당

console.log(score); // 80
```

**변수의 선언**과 **값의 할당**을 하나의 문장으로 단축 표현해도 자바스크립트 엔진은 변수의 선언과 값의 할당을 2개의 문으로 나누어 각각 실행한다. 

>**주의 할점** <br>
>변수에 값을 할당할 때는 이전 값 undefined가 저장되어 있던 메모리 공간을 지우고 그 메모리 공간에 할당 값 80을 새롭게 저장하는 것이 아니라 **새로운 메모리 공간을 확보하고 그곳에 할당 값 80을 저장**한다.

```js
console.log(score); // undefined

score = 80; // 값의 할당
var score;  //변수 선언

console.log(score); //80
```

호이스팅 현상으로 이미 score에 undefined의 값을 초기화 해주기 때문에 마지막 `console.log(score)`에서 값 80을 출력할 수 있다.

<br>

- - -

# 6. 값의 재할당
>재할당이란 **이미 값이 할당되어 있는 변수에 새로운 값을 또다시 할당하는 것**을 말한다.

<br>

```js
var score = 80; // 변수 선언과 값의 할당
score = 90;     // 값의 재할당
```

**var** 키워드로 선언한 변수는 값의 재할당할 수 있다.

<br>

**값의 재할당 할 수 없어서 변수에 저장된 값을 변경할 수 없다면 변수가 아니라 상수(contant)라 한다.**

>ES6에서 도입된 const 키워드를 사용해 선언한 변수는 재할당이 금지된다.<br>

<br>

처음 값을 할당할 때와 마찬가지로 이전 값 80이 저장되어 있던 메모리 공간을 지우고 그 메모리 공간에 재할당 값 90을 새롭게 저장하는 것이 아니라 **새로운 메모리 공간을 확보**하고 그 메모리 공간에 숫자 값 90을 저장한다.

불필요한 값들을 **가비지 콜렉터**에 의해 메모리에서 자동 해체된다.
단, 메모리에서 언제 해체될지는 예측할 수 없다.

## 가비지 콜렉터(garbage collector)

>가비지 콜렉터는 애플리케이션이 할당한 메모리 공간을 주기적으로 검사하여 더 이상 사용되지 않는 메모리를 해체하는 기능을 말한다. 더 이상 사용되지 않는 메모리란 어떤 식별자도 참조하지 않는 메모리 공간을 의미한다.

자바스크립트는 **가비지 콜렉터**를 내장하고 있는 메니지드 언어로서 **가비지 콜렉터**를 통해 메모리 누수(memori leak)를 방지한다.

<br>

프로그래밍 언어는 메모리 관리 방식에 따라 언매니지드 언어와 매니지드 언어로 분류할 수 있다.

**언매니지드 언어(unmanaged laguage)**

- 메모리 제어를 개발자가 주도할 수 있으므로 개발자의 역량에 따라 최적의 성능을 확보할 수 있지만 그 반대의 경우 치명적 오류를 생산할 가능성도 있다.

**매니지드 언어(managed laguage)**

- 매니지드 언어는 메모리의 할당 및 해체를 위한 메모리 관리 가능을 언어 차원에서 담당하고 개발자의 직접적인 메모리 제어를 허용하지 않는다. 

- - -

# 7. 식별자 네이밍 규칙

> 식별자(identifier)는 어떤 값을 구별해서 식별해낼 수 있는 고유한 이름을 말한다.

<br>

식별자는 다음과 같은 네이밍 규칙을 준수한다.

- 식별자는 특수문자를 제외한 문자, 숫자, 언더스코어(_), 달러 기호($)를 포함할 수 있다.
- 단, 식별자는 특수문자를 제외한 문자, 언더스코어(_), 달러 기호($)로 시작해야 한다.
- 숫자로 시작하는 것은 허용하지 않는다.
- 예약어는 식별자로 사용할 수 없다. ex) await, for, if 등등
- 참고로 변수는 쉼표(,)로 구분해 하나의 문에서 여러 개를 한번에 선언할 수 있다. (하지만 가독성이 나빠지므로 권장하지는 않는다.)
- 유니코드 문자를 허용하므로 알파벳 외의 한글이나 일본어 식별자도 사용한다. (알파벳 외의 유니코드 문자로 식별자 사용은 바람직하지 않으므로 권장하지 않는다.)
- 대소문자를 구별한다.
- 변수 이름은 변수의 존재 목적을 쉽게 이해할 수 있도록 의미를 명확히 표현해야 한다.
- 변수 선언에 별도의 주석이 필요하다면 변수의 존재 목적을 명확히 드러내지 못하는 것이다.

## 예약어

예약어는 프로그래밍 언어에서 사용되고 있거나 사용될 예정인 단어를 말한다.

| 예약어        | 설명                                       |
| ------------- | ------------------------------------------ |
| `break`       | 반복문이나 switch 문에서 루프를 종료함       |
| `case`        | switch 문에서 특정 조건에 맞는 케이스를 정의 |
| `catch`       | 예외를 처리하는 블록                       |
| `class`       | 클래스를 정의하는 키워드                    |
| `const`       | 상수를 정의하는 키워드                      |
| `continue`    | 현재 루프의 나머지 부분을 건너뛰고 다음 반복 실행 |
| `debugger`    | 디버깅을 위해 중단점을 설정하는 키워드      |
| `default`     | switch 문에서 어떠한 케이스도 맞지 않을 때 실행 |
| `delete`      | 객체의 속성이나 배열의 요소를 삭제           |
| `do`          | do-while 루프를 시작하는 키워드             |
| `else`        | if 문의 조건이 거짓일 때 실행되는 블록      |
| `export`      | 모듈에서 함수, 객체, 변수 등을 내보내는 키워드 |
| `extends`     | 클래스가 다른 클래스를 상속받을 때 사용     |
| `finally`     | try-catch 블록에서 예외 처리 후 항상 실행    |
| `for`         | 반복문을 시작하는 키워드                    |
| `function`    | 함수를 정의하는 키워드                      |
| `if`          | 조건문을 시작하는 키워드                    |
| `import`      | 모듈에서 함수, 객체, 변수 등을 가져오는 키워드 |
| `in`          | 객체의 속성이나 배열의 요소가 있는지 확인    |
| `instanceof`  | 객체가 특정 클래스의 인스턴스인지 확인      |
| `let`         | 블록 범위의 변수를 선언하는 키워드          |
| `new`         | 객체 인스턴스를 생성하는 키워드             |
| `return`      | 함수에서 값을 반환하는 키워드              |
| `super`       | 부모 클래스의 메소드를 호출하는 키워드      |
| `switch`      | 다중 조건을 처리하는 조건문                 |
| `this`        | 현재 객체나 함수를 가리키는 키워드          |
| `throw`       | 예외를 발생시키는 키워드                   |
| `try`         | 예외를 처리하는 블록                       |
| `typeof`      | 특정 값의 데이터 타입을 반환               |
| `var`         | 변수를 선언하는 키워드                      |
| `void`        | 특정 표현식의 값을 반환하지 않음을 명시     |
| `while`       | while 루프를 시작하는 키워드               |
| `with`        | 특정 객체의 속성에 짧은 접근 경로를 제공    |
| `yield`       | 제너레이터 함수에서 값을 생성하는 키워드    |

## 네이밍 컨벤션

하나 이상의 영어 단어로 구성된 식별자를 만들 때 가독성 좋게 단어를 한눈에 구분하기 위해 규정한 명명 규칙이다.

- 카멜 케이스(camelCase)
```js
var firstName;
```

- 스네이크 케이스(snake_case)
```js
var first_name;
```

- 파스칼 케이스(PascalCase)
```js
var FristName
```

- 헝거리언 케이스(typeHungarianCase)
```js
var strFirstName; // type + identifier
var $elem = document.getElementById('myId') // DOM 노드
var observable$ = fromEvent(document, 'click'); // RxJS 옵저버블
```