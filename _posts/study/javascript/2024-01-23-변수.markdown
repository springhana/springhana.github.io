---
layout: post
related_posts:
  - _posts/study/javascript/2024-01-29-표현식과 문.markdown
title: 변수
categories:
  - study
  - javascript
image: /assets/img/javascript/modern-javascript-book.png
permalink: '/:categories/:year/:month/:day/:title/'
description: >
  모던 자바스크립트 Deep Dive: 자바스크립트의 기본 개념과 동작 원리 - 04장 변수
---

* toc
{:toc}

# 1. 변수란 무엇인가? 왜 필요한가?
- <span style="color:red">변수</span>는 프로그래밍 언에에서 데이터를 관리하기 위한 핵심 개념이다. 
<br/>
- 자바스크립트 코드를 `계산(평가,evaluation)`하려면 먼저 10, 20, + 라는 `기호(리터럴,literal과 연산자,operator)`의 의미를 알고 있어야 하며, 10 * 20이라는 `식(표현식,expression)`의 의미도 `해석(파싱,parsion)`할 수 있어야 한다.

> 메모리(memory)는 데이터를 저장할 수 있는 메모리 셀(memory)의 집합체다.

<br/>

<img src="/assets/img/javascript/memory_cell.png" />

<br/>


메모리 셀 하나의 크기는 1바이트(8비트)이며, 컴퓨터는 메모리 셀의 크기, 즉 1바이트 단위로 데이터를 저장(write)하거나 읽어(read)들인다.

각 셀은 고유의 메모리 주소(memory address)를 갖는다. 메모리 주소는 메모리 공간의 위치를 나타내며, 0부터 시작해서 메모리의 크기만큼 정수로 표현된다. 

컴퓨터는 모든 데이터를 2진수로 처리한다. 따라서 메모리에 저장되는 데이터는 데이터의 종류(숫자, 텍스트, 이미지, 동영상 등)와 상관없이 모두 2진수로 저장된다.

성공적으로 연산이 끝났고 연산 결과도 메모리에 저장되어있지만 문제가 있다. CPU가 연산해서 만들어낸 숫자 값을 재사용할 수 없다는 것이다.

**메모리 주소를 통해 값에 직접 접근하는 것은 치명적 오류를 발생시킬 가능성이 높은 매우 위험한 일이다.** 만약  실수로 운영체제가 사용하고 있는 값을 변경하면 시스템을 멈추게 하는 치명적인 오류가 발생할 수도 있다. 따라서 **자바스크립트는 개발자의 직접적인 메모리 제어를 허용하지 않는다.**

값이 저장될 메모리 주소는 코드는 코드가 실행될 대 메모리의 상황에 따라 임의로 결정된다. **따라서 메모리 주소를 통해 값에 직접 접근하려는 시도는 올바른 방법이 아니다.**

<br>

> **변수**는 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 도는 그 메모리 공간을 식별하기 위해 붙인 이름을 말한다.

<br>

변수는 프로그래밍 언어에서 값을 저장하고 참조하는 메커니즘으로, **값의 위치를 가리키는 상징적인 이름**이다. 따라서 개발자가 직접 메모리 주소를 통해 값을 저장하고 참조할 필요가 없고 변수를 통해 안전하게 값에 접근할 수 있다.

<br/>

```js
// 변수는 하나의 값을 저장하기 위한 수단이다.
var userId = 1;
var userName = 'Lee';

// 객체나 배열 같은 자료구조를 사용하면 여러 개의 값을 하나로 그룹화해서 하나의 값처럼 사용할 수 있다.
var user = { id: 1, name: 'Lee' };
var users =  [
  { id: 1, name: 'Lee' },
  { id: 2, name: 'Kim' }
];
```

<br/>

<img src="/assets/img/javascript/memory_cell.png" />

<br/>

- 메모리 공간에 저장된 값을 식별할 수 있는 고유한 이름을 **변수 이름**
- 변수에 저장된 값을 **변수 값**
- 변수에 값을 저장하는 것을 **할당(assignment,대입,저장)**
- 변수에 저장된 값을 읽어 들이는 것을 **참조(reference)**

- - -

# 2. 식별자

> 변수 이름을 **식별자(identifier)**라고도 한다. **식별자는 어떤 값을 구별해서 식별할 수 있는 고유한 이름을 말한다.**

<br/>

- **식별자는 값이 아니라 메모리 주소를 기억하고 있다.**
- 식별자로 값을 구별해서 식별한다는 것은 식별자가 기억하고 있는 메모리 주소를 통해 메모리 공간에 저장된 값에 접근할 수 있다는 의미다.

<br>

식별자라는 용어는 이름에만 국한해서 사용하지 않는다. 예를 들어 변수, 함수, 클래스 등의 이름은 모두 식별자다.

- 변수이름으로는 메모리 상에 존재하는 변수 값을 식별할 수 있다.
- 함수이름으로는 메모리 상에 존재하는 함수(자바스크립트에서 함수는 값이다)를 식별할 수 있다.

즉, 메모리 상에 존재하는 어떤 값을 식별할 수 있는 이름은 모두 식별자라고 한다.

- - -

# 3. 변수 선언

>변수 선언(variable declaration)이란 변수를 생성하는 것을 말한다.

<br/>

값을 저장하기 위한 메모리 공간을 확보(allocate)하고 변수 이름과 확보된 메모리 공간의 주소를 연결(name binding)해서 값을 저장할 수 있게 준비하는 것이다.

**변수를 선언할 때는 `var`, `let`, `const` 키워드를 사용한다.**

## var 키워드의 단점

- 블록 스코프(block-level scope)를 지원하지 않고 함수 레벨 스코프(function-level scope)를 지원한다는 것이다.

이로 인해 의도치 않게 전역 변수가 선언되어 심각한 부작용이 발생하기도 한다.

## 변수 선언
```js
var score; // 변수 선언(변수 선언문)
```

<br>

<img src="/assets/img/javascript/variable.png"/>

<br>

**자바스크립트 엔진의 변수 선언 단계**

1. **선언 단계** : 변수 이름을 등록해서 자바스크립트 엔진에 변수의 존재를 알린다.
2. **초기화 단계** : 값을 저장하기 위해 메모리 공간을 확보하고 암묵적으로 undefined를 할당해 초기화한다.

만약 초기화 단계를 거치지 않으면 확보된 메모리 공간에는 이전에 다른 애플리케이션이 사용했던 값을 **쓰레기 값(garbage value)**이라 한다.

만약 선언하지 않은 식별자에 접근하면 **ReferenceError(참조 에러)**가 발생한다.

> **ReferenceError(참조 에러)**<br>
> 식별자를 통해 값을 참조하려 했지만 자바스크립트 엔진이 등록된 식별자를 찾을 수 없을 때 발생하는 에러다.

- - -

# 4. 변수 선언의 실행 시점과 변수 호이스팅

```js
console.log(score); // undefined

var score; // 변수 선언문
```

<br>

**자바스크립트 코드는 인터프리터의 의해 한 줄씩 순서적으로 실행된다.**

1. console.log(score) 실행
2. var score 실행

이 순서대로 실행이 되면 참조 에러(ReferenceError)가 발생해야 한다. 하지만 참조 에러가 발생하지 않고 undefined가 출력된다.

그 이유는 **변수 선언이 소스코드가 한 줄씩 순차적으로 실행되는 시점, 즉 런타임(runtime)이 아니라 그 이전 단계에서 먼저 실행되기 때문이다.**

1. **먼저 소스코드의 평가 과정을 거치면서 소스코드를 실행하기 위한 준비**를 한다.
2. 이때 소스코드 실행을 위한 준비 단계인 소스코드의 평가 과정에서 자바스크립트 엔진은 변수 선언을 포함한 모든 **선언문(변수 선언문, 함수 선언문 등)을 소스코드에서 찾아내서 먼저 실행**한다.
3. 소스코드의 평가 과정이 끝나면 비로소 변수 선언을 포함한 모든 **선언문을 제외하고 소스코드를 한 줄씩 순차적으로 실행**한다.

즉, 자바스크립트 엔진은 변수 선언이 소스코드의 어디에 있든 상관없이 다른 코드보다 먼저 실행된다. 따라서 변수 선언이 소스코드의 어디에 위치하는지와 상관없이 어디서든지 변수를 참조할 수 있다.

<br>

> 변수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 변수 **호이스팅(variable hosting)이라 한다.**
>

<br>

- - -

# 5. 값의 할당
> 변수에 값을 할당(assignment)(대입, 저장)할 때는 할당 연산자 =를 사용합니다.

<br>

```js
var score;  // 변수 선언
score = 80; // 값의 할당

var score = 80 // 변수 선언과 값의 할당
```

<br>

**변수 선언은 소스코드가 순차적으로 실행되는 시점인 런타임 이전에 먼저 실행되지만 값의 할당은 소스코드가 순차적으로 실행되는 시점인 런타임에 실행된다.**

<br>

```js
console.log(score); // undefined

var score;  //변수 선언
score = 80; // 값의 할당

console.log(score); //80
```
**변수 선언**은 런타임 이전에 먼저 실행되고 **값의 할당**은 런타임에 실행된다. 따라서 score 변수에 값을 할당하는 시점에는 이미 **변수 선언**이 완료된 상태이며, 이미 undefined로 초기화되어 있다. 

<br>

```js
console.log(score); // undefined

var score = 80; // 변수 선언과 값의 할당

console.log(score); // 80
```
**변수의 선언**과 **값의 할당**을 하나의 문장으로 단축 표현해도 자바스크립트 엔진은 변수의 선언과 값의 할당을 2개의 문으로 나누어 각각 실행한다. 

<br>

>**주의 할점** <br>
>변수에 값을 할당할 때는 이전 값 undefined가 저장되어 있던 메모리 공간을 지우고 그 메모리 공간에 할당 값 80을 새롭게 저장하는 것이 아니라 **새로운 메모리 공간을 확보하고 그곳에 할당 값 80을 저장**한다.

<br>

```js
console.log(score); // undefined

score = 80; // 값의 할당
var score;  //변수 선언

console.log(score); //80
```
이 코드를 보면 위에 코드와 할당과 선언의 순서가 다르지만 호이스팅 현상으로 이미 score에 undefined의 값을 초기화 해주기 때문에 마지막 `console.log(score)`에서 값 80을 출력할 수 있다.

<br>

- - -

# 6. 값의 재할당
>재할당이란 **이미 값이 할당되어 있는 변수에 새로운 값을 또다시 할당하는 것**을 말한다.

<br>

```js
var score = 80; // 변수 선언과 값의 할당
score = 90;     // 값의 재할당
```

**var** 키워드로 선언한 변수는 값의 재할당할 수 있다.

- **var** 키워드로 선언한 변수는  선언과 동시에 undefined로 초기화되기 때문에 엄밀히 말하자면 변수에 처음으로 값의 할당하는 것도 사실은 재할당이다.

<br>

**값의 재할당 할 수 없어서 변수에 저장된 값을 변경할 수 없다면 변수가 아니라 상수(contant)라 한다.**

>ES6에서 도입된 const 키워드를 사용해 선언한 변수는 재할당이 금지된다.<br>
>**하지만 const 키워드는 반드시 상수만을 위해 사용되지 않는다.**

<br>

<img src="/assets/img/javascript/variable_memori.png"/>

<br>

처음 값을 할당할 때와 마찬가지로 이전 값 80이 저장되어 있던 메모리 공간을 지우고 그 메모리 공간에 재할당 값 90을 새롭게 저장하는 것이 아니라 **새로운 메모리 공간을 확보**하고 그 메모리 공간에 숫자 값 90을 저장한다.

현재 score 변수의 값은 90이다. score 변수의 이전 값인 undefined와 80은 어떤 변수도 값으로 갖고 있지 않다. 어떤 식별자와도 연결되어 있지 않다.
이것은 undefined와 80이 **더 이상 필요하지 않다는 것을 의미**한다.
아무도 사용하고 있지 않으니 필요하지 않은 것이다.


이러한 불필요한 값들을 **가비지 콜렉터**에 의해 메모리에서 자동 해체된다.
단, 메모리에서 언제 해체될지는 예측할 수 없다.

<br>

## 가비지 콜렉터(garbage collector)

>가비지 콜렉터는 애플리케이션이 할당(allocate)한 메모리 공간을 주기적으로 검사하여 더 이상 사용되지 않는 메모리를 해체(release)하는 기능을 말한다. 더 이상 사용되지 않는 메모리란 어떤 식별자도 참조하지 않는 메모리 공간을 의미한다.
<br>
<br>
자바스크립트는 **가비지 콜렉터**를 내장하고 있는 메니지드 언어로서 **가비지 콜렉터**를 통해 메모리 누수(memori leak)를 방지한다.

<br>

프로그래밍 언어는 메모리 관리 방식에 따라 언매니지드 언어와 매니지드 언어로 분류할 수 있다.

**언매니지드 언어(unmanaged laguage)**

- 메모리 제어를 개발자가 주도할 수 있으므로 개발자의 역량에 따라 최적의 성능을 확보할 수 있지만 그 반대의 경우 치명적 오류를 생산할 가능성도 있다.

- C언어 같은 언매니지드 언어는 개발자가 명시적으로 메모리를 할당하고 해체하기 위해 malloc()과 free() 같은 저수준(low-level)메모리 제어  가능을 제공한다.

**매니지드 언어(managed laguage)**

- 매니지드 언어는 메모리의 할당 및 해체를 위한 메모리 관리 가능을 언어 차원에서 담당하고 개발자의 직접적인 메모리 제어를 허용하지 않는다. 즉, 개발자가 명시적으로 메모리를 할당하고 해체할 수 없다.

- 더 이상 사용하지 않는 메모리의 해체는 가비지 콜렉터가 수행하며, 이 또한 개발자가 관여할 수 없다. 이 또한 개발자가 관여할 수 없다.

- 개발자의 역량에 의존하는 부분이 상대적으로 작아져 어느 정도 일정한 생산성을 확볼할 수 있다는 장점이 있지만 성능 면에서는 어느 정도의 손실을 감수할 수 밖에 없다.

<br>

- - -

# 7. 식별자 네이밍 규칙

> 식별자(identifier)는 어떤 값을 구별해서 식별해낼 수 있는 고유한 이름을 말한다.

<br>

식별자는 다음과 같은 네이밍 규칙을 준수한다.

- 식별자는 특수문자를 제외한 문자, 숫자, 언더스코어(_), 달러 기호($)를 포함할 수 있다.
- 단, 식별자는 특수문자를 제외한 문자, 언더스코어(_), 달러 기호($)로 시작해야 한다.
- 숫자로 시작하는 것은 허용하지 않는다.
- 예약어는 식별자로 사용할 수 없다. ex) await, for, if 등등
- 참고로 변수는 쉼표(,)로 구분해 하나의 문에서 여러 개를 한번에 선언할 수 있다. (하지만 가독성이 나빠지므로 권장하지는 않는다.)
- 유니코드 문자를 허용하므로 알파벳 외의 한글이나 일본어 식별자도 사용한다. (알파벳 외의 유니코드 문자로 식별자 사용은 바람직하지 않으므로 권장하지 않는다.)
- 대소문자를 구별한다.
- 변수 이름은 변수의 존재 목적을 쉽게 이해할 수 있도록 의미를 명확히 표현해야 한다.
- 변수 선언에 별도의 주석이 필요하다면 변수의 존재 목적을 명확히 드러내지 못하는 것이다.

## 예약어

예약어는 프로그래밍 언어에서 사용되고 있거나 사용될 예정인 단어를 말한다.

<br>

| 예약어        | 설명                                       |
| ------------- | ------------------------------------------ |
| `break`       | 반복문이나 switch 문에서 루프를 종료함       |
| `case`        | switch 문에서 특정 조건에 맞는 케이스를 정의 |
| `catch`       | 예외를 처리하는 블록                       |
| `class`       | 클래스를 정의하는 키워드                    |
| `const`       | 상수를 정의하는 키워드                      |
| `continue`    | 현재 루프의 나머지 부분을 건너뛰고 다음 반복 실행 |
| `debugger`    | 디버깅을 위해 중단점을 설정하는 키워드      |
| `default`     | switch 문에서 어떠한 케이스도 맞지 않을 때 실행 |
| `delete`      | 객체의 속성이나 배열의 요소를 삭제           |
| `do`          | do-while 루프를 시작하는 키워드             |
| `else`        | if 문의 조건이 거짓일 때 실행되는 블록      |
| `export`      | 모듈에서 함수, 객체, 변수 등을 내보내는 키워드 |
| `extends`     | 클래스가 다른 클래스를 상속받을 때 사용     |
| `finally`     | try-catch 블록에서 예외 처리 후 항상 실행    |
| `for`         | 반복문을 시작하는 키워드                    |
| `function`    | 함수를 정의하는 키워드                      |
| `if`          | 조건문을 시작하는 키워드                    |
| `import`      | 모듈에서 함수, 객체, 변수 등을 가져오는 키워드 |
| `in`          | 객체의 속성이나 배열의 요소가 있는지 확인    |
| `instanceof`  | 객체가 특정 클래스의 인스턴스인지 확인      |
| `let`         | 블록 범위의 변수를 선언하는 키워드          |
| `new`         | 객체 인스턴스를 생성하는 키워드             |
| `return`      | 함수에서 값을 반환하는 키워드              |
| `super`       | 부모 클래스의 메소드를 호출하는 키워드      |
| `switch`      | 다중 조건을 처리하는 조건문                 |
| `this`        | 현재 객체나 함수를 가리키는 키워드          |
| `throw`       | 예외를 발생시키는 키워드                   |
| `try`         | 예외를 처리하는 블록                       |
| `typeof`      | 특정 값의 데이터 타입을 반환               |
| `var`         | 변수를 선언하는 키워드                      |
| `void`        | 특정 표현식의 값을 반환하지 않음을 명시     |
| `while`       | while 루프를 시작하는 키워드               |
| `with`        | 특정 객체의 속성에 짧은 접근 경로를 제공    |
| `yield`       | 제너레이터 함수에서 값을 생성하는 키워드    |

## 네이밍 컨벤션

하나 이상의 영어 단어로 구성된 식별자를 만들 때 가독성 좋게 단어를 한눈에 구분하기 위해 규정한 명명 규칙이다.

- 카멜 케이스(camelCase)
```js
var firstName;
```

- 스네이크 케이스(snake_case)
```js
var first_name;
```

- 파스칼 케이스(PascalCase)
```js
var FristName
```

- 헝거리언 케이스(typeHungarianCase)
```js
var strFirstName; // type + identifier
var $elem = document.getElementById('myId') // DOM 노드
var observable$ = fromEvent(document, 'click'); // RxJS 옵저버블
```